
tmp36vsThermistorWithFastKalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800ae10  0800ae10  0001ae10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b33c  0800b33c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b344  0800b344  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b34c  0800b34c  0001b34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001e0  0800b530  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800b530  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f51a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231f  00000000  00000000  0002f72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00031a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  00032450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d91  00000000  00000000  00032d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be1f  00000000  00000000  0005bb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f02cd  00000000  00000000  00067938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f88  00000000  00000000  00157c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800adf8 	.word	0x0800adf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800adf8 	.word	0x0800adf8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	ed87 0a01 	vstr	s0, [r7, #4]
 8001036:	ed97 0a01 	vldr	s0, [r7, #4]
 800103a:	f004 fa61 	bl	8005500 <logf>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZN25measurement_temperature_cC1Ev>:
	float thermistor_reference_resistance;


	uint16_t adc_resolotion_u16;

	measurement_temperature_c() {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

		this->analog_value = 0;
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	e9c1 2300 	strd	r2, r3, [r1]
		this->temperature_thermistor = 0;
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		this->temperature_tmp36 = 0;
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		this->filtered_temperatur_thermistor = 0;
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c1 2306 	strd	r2, r3, [r1, #24]
		this->filtered_temperature_tmp36 = 0;
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9c1 2308 	strd	r2, r3, [r1, #32]

		this->v_supply = 3.3;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <_ZN25measurement_temperature_cC1Ev+0x94>)
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
		this->r_10k_voltage_divider = 10000;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <_ZN25measurement_temperature_cC1Ev+0x98>)
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
		this->b_param_for_thermistor = 3450;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <_ZN25measurement_temperature_cC1Ev+0x9c>)
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
		this->thermistor_reference_temperature = 298.15;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <_ZN25measurement_temperature_cC1Ev+0xa0>)
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
		this->thermistor_voltage_out = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38
		this->thermistor_current_resistance = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c
		this->thermistor_reference_resistance = 10000;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <_ZN25measurement_temperature_cC1Ev+0x98>)
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40

		this->adc_resolotion_u16 = 4096;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	}
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40533333 	.word	0x40533333
 80010e4:	461c4000 	.word	0x461c4000
 80010e8:	4557a000 	.word	0x4557a000
 80010ec:	43951333 	.word	0x43951333

080010f0 <_ZN25measurement_temperature_c32read_analog_value_via_thermistorEP17ADC_HandleTypeDefm>:

	void read_analog_value_via_thermistor(ADC_HandleTypeDef *hadc,
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	ed2d 8b02 	vpush	{d8}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
			uint32_t channel) {

		ADC_ChannelConfTypeDef sConfig = { 0 };
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
		uint32_t adc_sample_period_u32 = ADC_SAMPLETIME_480CYCLES;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
		sConfig.Channel = channel;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	617b      	str	r3, [r7, #20]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001116:	2301      	movs	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
		sConfig.SamplingTime = adc_sample_period_u32;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	61fb      	str	r3, [r7, #28]

		if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f001 fbfb 	bl	8002920 <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <_ZN25measurement_temperature_c32read_analog_value_via_thermistorEP17ADC_HandleTypeDefm+0x4e>
			Error_Handler();
 800113a:	f000 fe49 	bl	8001dd0 <Error_Handler>
		}

		HAL_ADC_Start(hadc);
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f001 fa54 	bl	80025ec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f001 fb51 	bl	80027f0 <HAL_ADC_PollForConversion>
		this->analog_value = HAL_ADC_GetValue(hadc);
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f001 fbd9 	bl	8002906 <HAL_ADC_GetValue>
 8001154:	4603      	mov	r3, r0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9f4 	bl	8000544 <__aeabi_ui2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	68f9      	ldr	r1, [r7, #12]
 8001162:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop(hadc);
 8001166:	68b8      	ldr	r0, [r7, #8]
 8001168:	f001 fb0e 	bl	8002788 <HAL_ADC_Stop>

		this->thermistor_voltage_out = (this->v_supply
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
				* (float) (this->analog_value / this->adc_resolotion_u16));
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9f0 	bl	8000564 <__aeabi_i2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	f7ff fb7e 	bl	800088c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fd46 	bl	8000c28 <__aeabi_d2f>
 800119c:	ee07 0a90 	vmov	s15, r0
 80011a0:	ee68 7a27 	vmul.f32	s15, s16, s15
		this->thermistor_voltage_out = (this->v_supply
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		this->thermistor_current_resistance = (this->v_supply
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
				- this->thermistor_voltage_out)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80011b6:	ee77 6a67 	vsub.f32	s13, s14, s15
				/ (this->thermistor_voltage_out / this->r_10k_voltage_divider);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011c6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80011ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->thermistor_current_resistance = (this->v_supply
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		this->temperature_thermistor = ((this->thermistor_reference_temperature * this->b_param_for_thermistor)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80011e0:	ee27 8a27 	vmul.f32	s16, s14, s15
				 / (this->thermistor_reference_temperature * log(this->thermistor_current_resistance / this->thermistor_reference_resistance)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80011f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011fa:	eeb0 0a66 	vmov.f32	s0, s13
 80011fe:	f7ff ff15 	bl	800102c <_ZSt3logf>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	ee28 7aa7 	vmul.f32	s14, s17, s15
				 + this->b_param_for_thermistor)) - 273.15;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
				 / (this->thermistor_reference_temperature * log(this->thermistor_current_resistance / this->thermistor_reference_resistance)
 8001214:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001218:	ee17 0a10 	vmov	r0, s14
 800121c:	f7ff f9b4 	bl	8000588 <__aeabi_f2d>
				 + this->b_param_for_thermistor)) - 273.15;
 8001220:	a307      	add	r3, pc, #28	; (adr r3, 8001240 <_ZN25measurement_temperature_c32read_analog_value_via_thermistorEP17ADC_HandleTypeDefm+0x150>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff f84f 	bl	80002c8 <__aeabi_dsub>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
		this->temperature_thermistor = ((this->thermistor_reference_temperature * this->b_param_for_thermistor)
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	e9c1 2302 	strd	r2, r3, [r1, #8]


	}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	ecbd 8b02 	vpop	{d8}
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	66666666 	.word	0x66666666
 8001244:	40711266 	.word	0x40711266

08001248 <_ZN25measurement_temperature_c19read_temp_via_tem36EP17ADC_HandleTypeDefm>:

	void read_temp_via_tem36(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]

		ADC_ChannelConfTypeDef sConfig = { 0 };
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
		uint32_t adc_sample_period_u32 = ADC_SAMPLETIME_480CYCLES;
 8001262:	2307      	movs	r3, #7
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
		sConfig.Channel = channel;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	617b      	str	r3, [r7, #20]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
		sConfig.SamplingTime = adc_sample_period_u32;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	61fb      	str	r3, [r7, #28]

		if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f001 fb51 	bl	8002920 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <_ZN25measurement_temperature_c19read_temp_via_tem36EP17ADC_HandleTypeDefm+0x4a>
			Error_Handler();
 800128e:	f000 fd9f 	bl	8001dd0 <Error_Handler>
		}

		HAL_ADC_Start(hadc);
 8001292:	68b8      	ldr	r0, [r7, #8]
 8001294:	f001 f9aa 	bl	80025ec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f001 faa7 	bl	80027f0 <HAL_ADC_PollForConversion>
		this->analog_value = HAL_ADC_GetValue(hadc);
 80012a2:	68b8      	ldr	r0, [r7, #8]
 80012a4:	f001 fb2f 	bl	8002906 <HAL_ADC_GetValue>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f94a 	bl	8000544 <__aeabi_ui2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	68f9      	ldr	r1, [r7, #12]
 80012b6:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop(hadc);
 80012ba:	68b8      	ldr	r0, [r7, #8]
 80012bc:	f001 fa64 	bl	8002788 <HAL_ADC_Stop>

		this->temperature_tmp36 = (((double) this->analog_value) * 3.3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001330 <_ZN25measurement_temperature_c19read_temp_via_tem36EP17ADC_HandleTypeDefm+0xe8>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f9b4 	bl	8000638 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	461d      	mov	r5, r3
				/ pow(2, 12) - 0.5) * 100.0;
 80012d8:	210c      	movs	r1, #12
 80012da:	2002      	movs	r0, #2
 80012dc:	f000 fd7d 	bl	8001dda <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7ff fad0 	bl	800088c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <_ZN25measurement_temperature_c19read_temp_via_tem36EP17ADC_HandleTypeDefm+0xe0>)
 80012fa:	f7fe ffe5 	bl	80002c8 <__aeabi_dsub>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <_ZN25measurement_temperature_c19read_temp_via_tem36EP17ADC_HandleTypeDefm+0xe4>)
 800130c:	f7ff f994 	bl	8000638 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
		this->temperature_tmp36 = (((double) this->analog_value) * 3.3
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bdb0      	pop	{r4, r5, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	3fe00000 	.word	0x3fe00000
 800132c:	40590000 	.word	0x40590000
 8001330:	66666666 	.word	0x66666666
 8001334:	400a6666 	.word	0x400a6666

08001338 <_ZN20fast_kalman_filter_tC1Edddddd>:
	    this->Hparam = 1;
	    this->Rparam = 0.1;

	}

	fast_kalman_filter_t(double Qparam, double Rparam, double samplingPeriod,
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6378      	str	r0, [r7, #52]	; 0x34
 8001340:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001344:	ed87 1b08 	vstr	d1, [r7, #32]
 8001348:	ed87 2b06 	vstr	d2, [r7, #24]
 800134c:	ed87 3b04 	vstr	d3, [r7, #16]
 8001350:	ed87 4b02 	vstr	d4, [r7, #8]
 8001354:	ed87 5b00 	vstr	d5, [r7]
			double PNStd, double MNstd, double initialValue) {

	    this->Fparam = 1;
 8001358:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <_ZN20fast_kalman_filter_tC1Edddddd+0x118>)
 8001360:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    this->Hparam = 1;
 8001364:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <_ZN20fast_kalman_filter_tC1Edddddd+0x118>)
 800136c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	    this->Y = 0.0;
 8001370:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	    this->Bparam = samplingPeriod;
 800137e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001384:	e9c1 2300 	strd	r2, r3, [r1]
	    this->Qparam = Qparam * PNStd * PNStd;
 8001388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800138c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001390:	f7ff f952 	bl	8000638 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013a0:	f7ff f94a 	bl	8000638 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	    this->Rparam = Rparam * MNstd * MNstd;
 80013ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013b6:	f7ff f93f 	bl	8000638 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013c6:	f7ff f937 	bl	8000638 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013d0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	    this->PPresent = MNstd * MNstd;
 80013d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013dc:	f7ff f92c 	bl	8000638 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	    // system dynamic parameters
	    this->XHatPresent = initialValue;
 80013ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	    this->SPresent = MNstd * MNstd;
 80013f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fc:	f7ff f91c 	bl	8000638 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001406:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	    this->RefPPresent = MNstd * MNstd;
 800140a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800140e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001412:	f7ff f911 	bl	8000638 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800141c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	    this->RefY = 0;
 8001420:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	    this->RefXHatPresent = initialValue;
 800142e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001434:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	    this->RefSPresent = 0;
 8001438:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	}
 8001446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001448:	4618      	mov	r0, r3
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	3ff00000 	.word	0x3ff00000

08001454 <_ZN20fast_kalman_filter_t20get_tmp36_estimationEdd>:
	double get_tmp36_estimation(double measuredData, double FinputValue ){
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6178      	str	r0, [r7, #20]
 800145c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001460:	ed87 1b00 	vstr	d1, [r7]

	    // state
	    this->RefXHatForward = this->Fparam * this->RefXHatPresent + this->Bparam * FinputValue;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001470:	f7ff f8e2 	bl	8000638 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4614      	mov	r4, r2
 800147a:	461d      	mov	r5, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001486:	f7ff f8d7 	bl	8000638 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7fe ff1b 	bl	80002cc <__adddf3>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	6979      	ldr	r1, [r7, #20]
 800149c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	    // state uncertainty
	    this->RefPForward = this->Fparam * this->RefPPresent * this->Fparam + this->Qparam;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80014ac:	f7ff f8c4 	bl	8000638 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014be:	f7ff f8bb 	bl	8000638 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014d0:	f7fe fefc 	bl	80002cc <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

	    // update
	    this->RefY = measuredData - this->Hparam * this->RefXHatForward;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80014ea:	f7ff f8a5 	bl	8000638 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f6:	f7fe fee7 	bl	80002c8 <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

	    // innovation
	    this->RefSForward = this->Hparam * this->RefPForward * this->Hparam + this->Rparam;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001510:	f7ff f892 	bl	8000638 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001522:	f7ff f889 	bl	8000638 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001534:	f7fe feca 	bl	80002cc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	6979      	ldr	r1, [r7, #20]
 800153e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	    // coefficient
	    this->Kparam = this->RefPForward * this->Hparam * 1.0 / this->RefSForward;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800154e:	f7ff f873 	bl	8000638 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001560:	f7ff f994 	bl	800088c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	6979      	ldr	r1, [r7, #20]
 800156a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	    this->RefXHatForward = this->RefXHatForward + this->Kparam * this->RefY;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001580:	f7ff f85a 	bl	8000638 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7fe fe9e 	bl	80002cc <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	6979      	ldr	r1, [r7, #20]
 8001596:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	    this->RefPForward = (1.0 - this->Kparam * this->Hparam) * this->RefPForward;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015a6:	f7ff f847 	bl	8000638 <__aeabi_dmul>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	4917      	ldr	r1, [pc, #92]	; (8001610 <_ZN20fast_kalman_filter_t20get_tmp36_estimationEdd+0x1bc>)
 80015b4:	f7fe fe88 	bl	80002c8 <__aeabi_dsub>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80015c6:	f7ff f837 	bl	8000638 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

	    // update previous values
	    this->RefPPresent = this->RefPForward;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80015da:	6979      	ldr	r1, [r7, #20]
 80015dc:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	    this->RefXHatPresent = this->RefXHatForward;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80015e6:	6979      	ldr	r1, [r7, #20]
 80015e8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	    this->RefSPresent = this->RefSForward;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

	    return this->RefXHatForward;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80015fe:	ec43 2b17 	vmov	d7, r2, r3

	}
 8001602:	eeb0 0a47 	vmov.f32	s0, s14
 8001606:	eef0 0a67 	vmov.f32	s1, s15
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	3ff00000 	.word	0x3ff00000

08001614 <_ZN20fast_kalman_filter_t25get_thermistor_estimationEdd>:

	double get_thermistor_estimation(double measuredData, double FinputValue){
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6178      	str	r0, [r7, #20]
 800161c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001620:	ed87 1b00 	vstr	d1, [r7]

	    // state
	    this->XHatForward = this->Fparam * this->XHatPresent + this->Bparam * FinputValue;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001630:	f7ff f802 	bl	8000638 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4614      	mov	r4, r2
 800163a:	461d      	mov	r5, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001646:	f7fe fff7 	bl	8000638 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fe3b 	bl	80002cc <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	6979      	ldr	r1, [r7, #20]
 800165c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	    // state uncertainty
	    this->PForward = this->Fparam * this->PPresent * this->Fparam + this->Qparam;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800166c:	f7fe ffe4 	bl	8000638 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800167e:	f7fe ffdb 	bl	8000638 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001690:	f7fe fe1c 	bl	80002cc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	6979      	ldr	r1, [r7, #20]
 800169a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	    // update
	    this->Y = measuredData - this->Hparam * this->XHatForward;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80016aa:	f7fe ffc5 	bl	8000638 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b6:	f7fe fe07 	bl	80002c8 <__aeabi_dsub>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	6979      	ldr	r1, [r7, #20]
 80016c0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	    // innovation
	    this->SForward = this->Hparam * this->PForward * this->Hparam + this->Rparam;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80016d0:	f7fe ffb2 	bl	8000638 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016e2:	f7fe ffa9 	bl	8000638 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016f4:	f7fe fdea 	bl	80002cc <__adddf3>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	6979      	ldr	r1, [r7, #20]
 80016fe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	    // coefficient
	    this->Kparam = this->PForward * this->Hparam * 1.0 / this->SForward;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800170e:	f7fe ff93 	bl	8000638 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001720:	f7ff f8b4 	bl	800088c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	6979      	ldr	r1, [r7, #20]
 800172a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	    this->XHatForward = this->XHatForward + this->Kparam * this->Y;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001740:	f7fe ff7a 	bl	8000638 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe fdbe 	bl	80002cc <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	6979      	ldr	r1, [r7, #20]
 8001756:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	    this->PForward = (1.0 - this->Kparam * this->Hparam) * this->PForward;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001766:	f7fe ff67 	bl	8000638 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	4917      	ldr	r1, [pc, #92]	; (80017d0 <_ZN20fast_kalman_filter_t25get_thermistor_estimationEdd+0x1bc>)
 8001774:	f7fe fda8 	bl	80002c8 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001786:	f7fe ff57 	bl	8000638 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	6979      	ldr	r1, [r7, #20]
 8001790:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	    // update previous values
	    this->PPresent = this->PForward;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	    this->XHatPresent = this->XHatForward;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	    this->SPresent = this->SForward;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80017b2:	6979      	ldr	r1, [r7, #20]
 80017b4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	    return this->XHatForward;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017be:	ec43 2b17 	vmov	d7, r2, r3


	}
 80017c2:	eeb0 0a47 	vmov.f32	s0, s14
 80017c6:	eef0 0a67 	vmov.f32	s1, s15
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdb0      	pop	{r4, r5, r7, pc}
 80017d0:	3ff00000 	.word	0x3ff00000
 80017d4:	00000000 	.word	0x00000000

080017d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017dc:	b089      	sub	sp, #36	; 0x24
 80017de:	af08      	add	r7, sp, #32
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017e0:	f000 fe36 	bl	8002450 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017e4:	f000 f8cc 	bl	8001980 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017e8:	f000 fa50 	bl	8001c8c <_ZL12MX_GPIO_Initv>
	MX_USART3_UART_Init();
 80017ec:	f000 f9f4 	bl	8001bd8 <_ZL19MX_USART3_UART_Initv>
	MX_DMA_Init();
 80017f0:	f000 fa26 	bl	8001c40 <_ZL11MX_DMA_Initv>
	MX_UART4_Init();
 80017f4:	f000 f9bc 	bl	8001b70 <_ZL13MX_UART4_Initv>
	MX_ADC1_Init();
 80017f8:	f000 f95e 	bl	8001ab8 <_ZL12MX_ADC1_Initv>
	/* USER CODE BEGIN 2 */

	time_ms = 0;
 80017fc:	4956      	ldr	r1, [pc, #344]	; (8001958 <main+0x180>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9c1 2300 	strd	r2, r3, [r1]
	t_start_time_u16 = 0;
 800180a:	4b54      	ldr	r3, [pc, #336]	; (800195c <main+0x184>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
	t_final_time_u16 = 0;
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <main+0x188>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
	sampling_period = 0;
 8001816:	4953      	ldr	r1, [pc, #332]	; (8001964 <main+0x18c>)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c1 2300 	strd	r2, r3, [r1]
	memset(send_temp_values, 0, 100);
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	2100      	movs	r1, #0
 8001828:	484f      	ldr	r0, [pc, #316]	; (8001968 <main+0x190>)
 800182a:	f004 fec7 	bl	80065bc <memset>
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		measurement_temperature_ct.read_analog_value_via_thermistor(&hadc1,
 800182e:	220a      	movs	r2, #10
 8001830:	494e      	ldr	r1, [pc, #312]	; (800196c <main+0x194>)
 8001832:	484f      	ldr	r0, [pc, #316]	; (8001970 <main+0x198>)
 8001834:	f7ff fc5c 	bl	80010f0 <_ZN25measurement_temperature_c32read_analog_value_via_thermistorEP17ADC_HandleTypeDefm>
		ADC_CHANNEL_10); // unfiltered measurement thermistor temperature
		measurement_temperature_ct.read_temp_via_tem36(&hadc1, ADC_CHANNEL_3); //unfiltered measurement tmp36 temperature
 8001838:	2203      	movs	r2, #3
 800183a:	494c      	ldr	r1, [pc, #304]	; (800196c <main+0x194>)
 800183c:	484c      	ldr	r0, [pc, #304]	; (8001970 <main+0x198>)
 800183e:	f7ff fd03 	bl	8001248 <_ZN25measurement_temperature_c19read_temp_via_tem36EP17ADC_HandleTypeDefm>

		measurement_temperature_ct.filtered_temperatur_thermistor =
				kalman_filter_ct.get_thermistor_estimation(
 8001842:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <main+0x198>)
 8001844:	ed93 7b02 	vldr	d7, [r3, #8]
 8001848:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001948 <main+0x170>
 800184c:	eeb0 0a47 	vmov.f32	s0, s14
 8001850:	eef0 0a67 	vmov.f32	s1, s15
 8001854:	4847      	ldr	r0, [pc, #284]	; (8001974 <main+0x19c>)
 8001856:	f7ff fedd 	bl	8001614 <_ZN20fast_kalman_filter_t25get_thermistor_estimationEdd>
 800185a:	eeb0 7a40 	vmov.f32	s14, s0
 800185e:	eef0 7a60 	vmov.f32	s15, s1
		measurement_temperature_ct.filtered_temperatur_thermistor =
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <main+0x198>)
 8001864:	ed83 7b06 	vstr	d7, [r3, #24]
						measurement_temperature_ct.temperature_thermistor, 0.0); // filtered result of thermistor temperature
		measurement_temperature_ct.filtered_temperature_tmp36 =
				kalman_filter_ct.get_tmp36_estimation(
 8001868:	4b41      	ldr	r3, [pc, #260]	; (8001970 <main+0x198>)
 800186a:	ed93 7b04 	vldr	d7, [r3, #16]
 800186e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001948 <main+0x170>
 8001872:	eeb0 0a47 	vmov.f32	s0, s14
 8001876:	eef0 0a67 	vmov.f32	s1, s15
 800187a:	483e      	ldr	r0, [pc, #248]	; (8001974 <main+0x19c>)
 800187c:	f7ff fdea 	bl	8001454 <_ZN20fast_kalman_filter_t20get_tmp36_estimationEdd>
 8001880:	eeb0 7a40 	vmov.f32	s14, s0
 8001884:	eef0 7a60 	vmov.f32	s15, s1
		measurement_temperature_ct.filtered_temperature_tmp36 =
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <main+0x198>)
 800188a:	ed83 7b08 	vstr	d7, [r3, #32]
						measurement_temperature_ct.temperature_tmp36, 0.0); // filtered result of tmp36 temperature

		t_start_time_u16 = t_final_time_u16;
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <main+0x188>)
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <main+0x184>)
 8001894:	801a      	strh	r2, [r3, #0]
		t_final_time_u16 = HAL_GetTick();
 8001896:	f000 fe35 	bl	8002504 <HAL_GetTick>
 800189a:	4603      	mov	r3, r0
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <main+0x188>)
 80018a0:	801a      	strh	r2, [r3, #0]

		if (t_final_time_u16 == 0) {
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <main+0x188>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <main+0xe0>
			sampling_period = 0.001;
 80018aa:	492e      	ldr	r1, [pc, #184]	; (8001964 <main+0x18c>)
 80018ac:	a328      	add	r3, pc, #160	; (adr r3, 8001950 <main+0x178>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9c1 2300 	strd	r2, r3, [r1]
 80018b6:	e00d      	b.n	80018d4 <main+0xfc>
		} else {
			sampling_period = (double) (t_final_time_u16 - t_start_time_u16);
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <main+0x188>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <main+0x184>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe4d 	bl	8000564 <__aeabi_i2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4925      	ldr	r1, [pc, #148]	; (8001964 <main+0x18c>)
 80018d0:	e9c1 2300 	strd	r2, r3, [r1]
		}

		time_ms += sampling_period;
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <main+0x180>)
 80018d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <main+0x18c>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fcf4 	bl	80002cc <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	491b      	ldr	r1, [pc, #108]	; (8001958 <main+0x180>)
 80018ea:	e9c1 2300 	strd	r2, r3, [r1]

		sprintf(send_temp_values, "%lf %lf %lf %lf %lf\r\n", time_ms,
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <main+0x180>)
 80018f0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <main+0x198>)
 80018f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018fa:	491d      	ldr	r1, [pc, #116]	; (8001970 <main+0x198>)
 80018fc:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8001900:	4c1b      	ldr	r4, [pc, #108]	; (8001970 <main+0x198>)
 8001902:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 8001906:	4e1a      	ldr	r6, [pc, #104]	; (8001970 <main+0x198>)
 8001908:	e9d6 8906 	ldrd	r8, r9, [r6, #24]
 800190c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001910:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001918:	e9cd 2300 	strd	r2, r3, [sp]
 800191c:	4652      	mov	r2, sl
 800191e:	465b      	mov	r3, fp
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <main+0x1a0>)
 8001922:	4811      	ldr	r0, [pc, #68]	; (8001968 <main+0x190>)
 8001924:	f005 fccc 	bl	80072c0 <siprintf>
				measurement_temperature_ct.filtered_temperature_tmp36,
				measurement_temperature_ct.temperature_thermistor,
				measurement_temperature_ct.filtered_temperatur_thermistor);

		HAL_UART_Transmit(&huart3, (uint8_t*) send_temp_values,
				strlen(send_temp_values), HAL_MAX_DELAY);
 8001928:	480f      	ldr	r0, [pc, #60]	; (8001968 <main+0x190>)
 800192a:	f7fe fc71 	bl	8000210 <strlen>
 800192e:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart3, (uint8_t*) send_temp_values,
 8001930:	b29a      	uxth	r2, r3
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	490c      	ldr	r1, [pc, #48]	; (8001968 <main+0x190>)
 8001938:	4810      	ldr	r0, [pc, #64]	; (800197c <main+0x1a4>)
 800193a:	f003 f8eb 	bl	8004b14 <HAL_UART_Transmit>

		HAL_Delay(5);
 800193e:	2005      	movs	r0, #5
 8001940:	f000 fdec 	bl	800251c <HAL_Delay>
		measurement_temperature_ct.read_analog_value_via_thermistor(&hadc1,
 8001944:	e773      	b.n	800182e <main+0x56>
 8001946:	bf00      	nop
	...
 8001950:	d2f1a9fc 	.word	0xd2f1a9fc
 8001954:	3f50624d 	.word	0x3f50624d
 8001958:	200004f8 	.word	0x200004f8
 800195c:	20000500 	.word	0x20000500
 8001960:	20000502 	.word	0x20000502
 8001964:	20000508 	.word	0x20000508
 8001968:	20000510 	.word	0x20000510
 800196c:	200001fc 	.word	0x200001fc
 8001970:	20000410 	.word	0x20000410
 8001974:	20000458 	.word	0x20000458
 8001978:	0800ae10 	.word	0x0800ae10
 800197c:	200002c8 	.word	0x200002c8

08001980 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b0b4      	sub	sp, #208	; 0xd0
 8001984:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001986:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800198a:	2230      	movs	r2, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f004 fe14 	bl	80065bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001994:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	2284      	movs	r2, #132	; 0x84
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 fe05 	bl	80065bc <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80019b2:	f001 ffbb 	bl	800392c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <_Z18SystemClock_Configv+0x130>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <_Z18SystemClock_Configv+0x130>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <_Z18SystemClock_Configv+0x130>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <_Z18SystemClock_Configv+0x134>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d6:	4a37      	ldr	r2, [pc, #220]	; (8001ab4 <_Z18SystemClock_Configv+0x134>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <_Z18SystemClock_Configv+0x134>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001a06:	2304      	movs	r3, #4
 8001a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001a0c:	2348      	movs	r3, #72	; 0x48
 8001a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 ff92 	bl	800394c <HAL_RCC_OscConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf14      	ite	ne
 8001a2e:	2301      	movne	r3, #1
 8001a30:	2300      	moveq	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 8001a38:	f000 f9ca 	bl	8001dd0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2302      	movs	r3, #2
 8001a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a60:	2102      	movs	r1, #2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fa16 	bl	8003e94 <HAL_RCC_ClockConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2301      	movne	r3, #1
 8001a70:	2300      	moveq	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <_Z18SystemClock_Configv+0xfc>
		Error_Handler();
 8001a78:	f000 f9aa 	bl	8001dd0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8001a7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a80:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_UART4;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fc02 	bl	8004298 <HAL_RCCEx_PeriphCLKConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <_Z18SystemClock_Configv+0x128>
		Error_Handler();
 8001aa4:	f000 f994 	bl	8001dd0 <Error_Handler>
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	37d0      	adds	r7, #208	; 0xd0
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <_ZL12MX_ADC1_Initv+0xb0>)
 8001ace:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001af8:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <_ZL12MX_ADC1_Initv+0xb4>)
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001b18:	f000 fd24 	bl	8002564 <HAL_ADC_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <_ZL12MX_ADC1_Initv+0x78>
		Error_Handler();
 8001b2c:	f000 f950 	bl	8001dd0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001b30:	2303      	movs	r3, #3
 8001b32:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4808      	ldr	r0, [pc, #32]	; (8001b64 <_ZL12MX_ADC1_Initv+0xac>)
 8001b42:	f000 feed 	bl	8002920 <HAL_ADC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <_ZL12MX_ADC1_Initv+0xa2>
		Error_Handler();
 8001b56:	f000 f93b 	bl	8001dd0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200001fc 	.word	0x200001fc
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	0f000001 	.word	0x0f000001

08001b70 <_ZL13MX_UART4_Initv>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <_ZL13MX_UART4_Initv+0x64>)
 8001b78:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <_ZL13MX_UART4_Initv+0x60>)
 8001bb4:	f002 ff60 	bl	8004a78 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <_ZL13MX_UART4_Initv+0x5c>
		Error_Handler();
 8001bc8:	f000 f902 	bl	8001dd0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000244 	.word	0x20000244
 8001bd4:	40004c00 	.word	0x40004c00

08001bd8 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <_ZL19MX_USART3_UART_Initv+0x64>)
 8001be0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001c1a:	4807      	ldr	r0, [pc, #28]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001c1c:	f002 ff2c 	bl	8004a78 <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf14      	ite	ne
 8001c26:	2301      	movne	r3, #1
 8001c28:	2300      	moveq	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <_ZL19MX_USART3_UART_Initv+0x5c>
		Error_Handler();
 8001c30:	f000 f8ce 	bl	8001dd0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200002c8 	.word	0x200002c8
 8001c3c:	40004800 	.word	0x40004800

08001c40 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_ZL11MX_DMA_Initv+0x48>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <_ZL11MX_DMA_Initv+0x48>)
 8001c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <_ZL11MX_DMA_Initv+0x48>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	200c      	movs	r0, #12
 8001c64:	f001 f97b 	bl	8002f5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c68:	200c      	movs	r0, #12
 8001c6a:	f001 f994 	bl	8002f96 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	200d      	movs	r0, #13
 8001c74:	f001 f973 	bl	8002f5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c78:	200d      	movs	r0, #13
 8001c7a:	f001 f98c 	bl	8002f96 <HAL_NVIC_EnableIRQ>

}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001cba:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a3f      	ldr	r2, [pc, #252]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a39      	ldr	r2, [pc, #228]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a33      	ldr	r2, [pc, #204]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a2d      	ldr	r2, [pc, #180]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <_ZL12MX_GPIO_Initv+0x130>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d38:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <_ZL12MX_GPIO_Initv+0x134>)
 8001d3a:	f001 fddd 	bl	80038f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2140      	movs	r1, #64	; 0x40
 8001d42:	4820      	ldr	r0, [pc, #128]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x138>)
 8001d44:	f001 fdd8 	bl	80038f8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <_ZL12MX_GPIO_Initv+0x13c>)
 8001d50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481b      	ldr	r0, [pc, #108]	; (8001dcc <_ZL12MX_GPIO_Initv+0x140>)
 8001d5e:	f001 fc1f 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001d62:	f244 0381 	movw	r3, #16513	; 0x4081
 8001d66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <_ZL12MX_GPIO_Initv+0x134>)
 8001d7c:	f001 fc10 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d80:	2340      	movs	r3, #64	; 0x40
 8001d82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x138>)
 8001d98:	f001 fc02 	bl	80035a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x138>)
 8001db0:	f001 fbf6 	bl	80035a0 <HAL_GPIO_Init>

}
 8001db4:	bf00      	nop
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	10110000 	.word	0x10110000
 8001dcc:	40020800 	.word	0x40020800

08001dd0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dd8:	e7fe      	b.n	8001dd8 <Error_Handler+0x8>

08001dda <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001dda:	b5b0      	push	{r4, r5, r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7fe fbbd 	bl	8000564 <__aeabi_i2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f7fe fbb8 	bl	8000564 <__aeabi_i2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	ec43 2b11 	vmov	d1, r2, r3
 8001dfc:	ec45 4b10 	vmov	d0, r4, r5
 8001e00:	f003 fad0 	bl	80053a4 <pow>
 8001e04:	eeb0 7a40 	vmov.f32	s14, s0
 8001e08:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e10:	eef0 0a67 	vmov.f32	s1, s15
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1a:	0000      	movs	r0, r0
 8001e1c:	0000      	movs	r0, r0
	...

08001e20 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d116      	bne.n	8001e5e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <_Z41__static_initialization_and_destruction_0ii+0x3e>
measurement_temperature_c measurement_temperature_ct;
 8001e3a:	4815      	ldr	r0, [pc, #84]	; (8001e90 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001e3c:	f7ff f906 	bl	800104c <_ZN25measurement_temperature_cC1Ev>
fast_kalman_filter_t kalman_filter_ct(0.1, 10, 0.01, 0.04, 0.04, 25);
 8001e40:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001e68 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8001e44:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 8001e70 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8001e48:	ed9f 3b09 	vldr	d3, [pc, #36]	; 8001e70 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8001e4c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001e78 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8001e50:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001e80 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8001e54:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001e88 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8001e58:	480e      	ldr	r0, [pc, #56]	; (8001e94 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001e5a:	f7ff fa6d 	bl	8001338 <_ZN20fast_kalman_filter_tC1Edddddd>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	40390000 	.word	0x40390000
 8001e70:	47ae147b 	.word	0x47ae147b
 8001e74:	3fa47ae1 	.word	0x3fa47ae1
 8001e78:	47ae147b 	.word	0x47ae147b
 8001e7c:	3f847ae1 	.word	0x3f847ae1
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40240000 	.word	0x40240000
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	3fb99999 	.word	0x3fb99999
 8001e90:	20000410 	.word	0x20000410
 8001e94:	20000458 	.word	0x20000458

08001e98 <_GLOBAL__sub_I_hadc1>:
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ffbd 	bl	8001e20 <_Z41__static_initialization_and_destruction_0ii>
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_MspInit+0x44>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_MspInit+0x44>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_MspInit+0x44>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_MspInit+0x44>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_MspInit+0x44>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_MspInit+0x44>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_ADC_MspInit+0xa4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d13b      	bne.n	8001f8a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480b      	ldr	r0, [pc, #44]	; (8001f9c <HAL_ADC_MspInit+0xac>)
 8001f6e:	f001 fb17 	bl	80035a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f72:	2308      	movs	r3, #8
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f76:	2303      	movs	r3, #3
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_ADC_MspInit+0xb0>)
 8001f86:	f001 fb0b 	bl	80035a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40012000 	.word	0x40012000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6c      	ldr	r2, [pc, #432]	; (8002174 <HAL_UART_MspInit+0x1d0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d174      	bne.n	80020b0 <HAL_UART_MspInit+0x10c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fc6:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a6b      	ldr	r2, [pc, #428]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b69      	ldr	r3, [pc, #420]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a65      	ldr	r2, [pc, #404]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	4b60      	ldr	r3, [pc, #384]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800200e:	2301      	movs	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800201e:	2308      	movs	r3, #8
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	4854      	ldr	r0, [pc, #336]	; (800217c <HAL_UART_MspInit+0x1d8>)
 800202a:	f001 fab9 	bl	80035a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800202e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002040:	2308      	movs	r3, #8
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	484d      	ldr	r0, [pc, #308]	; (8002180 <HAL_UART_MspInit+0x1dc>)
 800204c:	f001 faa8 	bl	80035a0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002052:	4a4d      	ldr	r2, [pc, #308]	; (8002188 <HAL_UART_MspInit+0x1e4>)
 8002054:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002056:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800205c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002064:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 800206c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002070:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002084:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002092:	483c      	ldr	r0, [pc, #240]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 8002094:	f000 ff9a 	bl	8002fcc <HAL_DMA_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800209e:	f7ff fe97 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a37      	ldr	r2, [pc, #220]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 80020a6:	671a      	str	r2, [r3, #112]	; 0x70
 80020a8:	4a36      	ldr	r2, [pc, #216]	; (8002184 <HAL_UART_MspInit+0x1e0>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ae:	e05c      	b.n	800216a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a35      	ldr	r2, [pc, #212]	; (800218c <HAL_UART_MspInit+0x1e8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d157      	bne.n	800216a <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a2e      	ldr	r2, [pc, #184]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fc:	2307      	movs	r3, #7
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	4619      	mov	r1, r3
 8002106:	4822      	ldr	r0, [pc, #136]	; (8002190 <HAL_UART_MspInit+0x1ec>)
 8002108:	f001 fa4a 	bl	80035a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_UART_MspInit+0x1f4>)
 8002110:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002114:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002118:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002126:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800212c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 800213c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002140:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800214e:	4811      	ldr	r0, [pc, #68]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002150:	f000 ff3c 	bl	8002fcc <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 800215a:	f7ff fe39 	bl	8001dd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002162:	671a      	str	r2, [r3, #112]	; 0x70
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_UART_MspInit+0x1f0>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6393      	str	r3, [r2, #56]	; 0x38
}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	; 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40004c00 	.word	0x40004c00
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020800 	.word	0x40020800
 8002184:	2000034c 	.word	0x2000034c
 8002188:	40026040 	.word	0x40026040
 800218c:	40004800 	.word	0x40004800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	200003ac 	.word	0x200003ac
 8002198:	40026028 	.word	0x40026028

0800219c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021a0:	f3bf 8f4f 	dsb	sy
}
 80021a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <__NVIC_SystemReset+0x24>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80021ae:	4904      	ldr	r1, [pc, #16]	; (80021c0 <__NVIC_SystemReset+0x24>)
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_SystemReset+0x28>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80021b6:	f3bf 8f4f 	dsb	sy
}
 80021ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <__NVIC_SystemReset+0x20>
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	05fa0004 	.word	0x05fa0004

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__NVIC_SystemReset();
 80021d2:	f7ff ffe3 	bl	800219c <__NVIC_SystemReset>

080021d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <MemManage_Handler+0x4>

080021dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	__NVIC_SystemReset();
 80021e0:	f7ff ffdc 	bl	800219c <__NVIC_SystemReset>

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	__NVIC_SystemReset();
 80021e8:	f7ff ffd8 	bl	800219c <__NVIC_SystemReset>

080021ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221a:	f000 f95f 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <DMA1_Stream1_IRQHandler+0x10>)
 800222a:	f000 ff7d 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200003ac 	.word	0x200003ac

08002238 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <DMA1_Stream2_IRQHandler+0x10>)
 800223e:	f000 ff73 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000034c 	.word	0x2000034c

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002266:	f004 f97f 	bl	8006568 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
	return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
	while (1) {}		/* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
	}

return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e009      	b.n	80022f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf1      	blt.n	80022dc <_write+0x12>
	}
	return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_close>:

int _close(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232a:	605a      	str	r2, [r3, #4]
	return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_isatty>:

int _isatty(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return 1;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
	return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f004 f8e4 	bl	8006568 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20050000 	.word	0x20050000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20000574 	.word	0x20000574
 80023d4:	20000598 	.word	0x20000598

080023d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002404:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002418:	4c0b      	ldr	r4, [pc, #44]	; (8002448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002426:	f7ff ffd7 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242a:	f004 f8a3 	bl	8006574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242e:	f7ff f9d3 	bl	80017d8 <main>
  bx  lr    
 8002432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002434:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002440:	0800b350 	.word	0x0800b350
  ldr r2, =_sbss
 8002444:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002448:	20000594 	.word	0x20000594

0800244c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC_IRQHandler>
	...

08002450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x28>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x28>)
 800245a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fd71 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fd1c 	bl	8001ea8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd89 	bl	8002fb2 <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f000 fd51 	bl	8002f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	20000580 	.word	0x20000580

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000580 	.word	0x20000580

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e031      	b.n	80025de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fcb4 	bl	8001ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_ADC_Init+0x84>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fafe 	bl	8002bb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
 80025ce:	e001      	b.n	80025d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	ffffeefd 	.word	0xffffeefd

080025ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_ADC_Start+0x1a>
 8002602:	2302      	movs	r3, #2
 8002604:	e0ad      	b.n	8002762 <HAL_ADC_Start+0x176>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d018      	beq.n	800264e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_ADC_Start+0x184>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a50      	ldr	r2, [pc, #320]	; (8002774 <HAL_ADC_Start+0x188>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0c9a      	lsrs	r2, r3, #18
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002640:	e002      	b.n	8002648 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d175      	bne.n	8002748 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002660:	4b45      	ldr	r3, [pc, #276]	; (8002778 <HAL_ADC_Start+0x18c>)
 8002662:	4013      	ands	r3, r2
 8002664:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002682:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002696:	d106      	bne.n	80026a6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f023 0206 	bic.w	r2, r3, #6
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
 80026a4:	e002      	b.n	80026ac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80026be:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_ADC_Start+0x190>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d143      	bne.n	8002760 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e03a      	b.n	8002760 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_ADC_Start+0x194>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d10e      	bne.n	8002712 <HAL_ADC_Start+0x126>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002710:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_ADC_Start+0x190>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d120      	bne.n	8002760 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a18      	ldr	r2, [pc, #96]	; (8002784 <HAL_ADC_Start+0x198>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d11b      	bne.n	8002760 <HAL_ADC_Start+0x174>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d114      	bne.n	8002760 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	e00b      	b.n	8002760 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83
 8002778:	fffff8fe 	.word	0xfffff8fe
 800277c:	40012300 	.word	0x40012300
 8002780:	40012000 	.word	0x40012000
 8002784:	40012200 	.word	0x40012200

08002788 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_Stop+0x16>
 800279a:	2302      	movs	r3, #2
 800279c:	e01f      	b.n	80027de <HAL_ADC_Stop+0x56>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_ADC_Stop+0x64>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	ffffeefe 	.word	0xffffeefe

080027f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280c:	d113      	bne.n	8002836 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281c:	d10b      	bne.n	8002836 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e063      	b.n	80028fe <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002836:	f7ff fe65 	bl	8002504 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800283c:	e021      	b.n	8002882 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d01d      	beq.n	8002882 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_ADC_PollForConversion+0x6c>
 800284c:	f7ff fe5a 	bl	8002504 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d212      	bcs.n	8002882 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d00b      	beq.n	8002882 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e03d      	b.n	80028fe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d1d6      	bne.n	800283e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0212 	mvn.w	r2, #18
 8002898:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d123      	bne.n	80028fc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d11f      	bne.n	80028fc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d111      	bne.n	80028fc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1c>
 8002938:	2302      	movs	r3, #2
 800293a:	e12a      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x272>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b09      	cmp	r3, #9
 800294a:	d93a      	bls.n	80029c2 <HAL_ADC_ConfigChannel+0xa2>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002954:	d035      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68d9      	ldr	r1, [r3, #12]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	3b1e      	subs	r3, #30
 800296c:	2207      	movs	r2, #7
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a87      	ldr	r2, [pc, #540]	; (8002ba0 <HAL_ADC_ConfigChannel+0x280>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10a      	bne.n	800299c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68d9      	ldr	r1, [r3, #12]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	061a      	lsls	r2, r3, #24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299a:	e035      	b.n	8002a08 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68d9      	ldr	r1, [r3, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	4618      	mov	r0, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4403      	add	r3, r0
 80029b4:	3b1e      	subs	r3, #30
 80029b6:	409a      	lsls	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c0:	e022      	b.n	8002a08 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	2207      	movs	r2, #7
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43da      	mvns	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	400a      	ands	r2, r1
 80029e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	4603      	mov	r3, r0
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4403      	add	r3, r0
 80029fe:	409a      	lsls	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d824      	bhi.n	8002a5a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	3b05      	subs	r3, #5
 8002a22:	221f      	movs	r2, #31
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	400a      	ands	r2, r1
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	3b05      	subs	r3, #5
 8002a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34
 8002a58:	e04c      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d824      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b23      	subs	r3, #35	; 0x23
 8002a74:	221f      	movs	r2, #31
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	400a      	ands	r2, r1
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	4618      	mov	r0, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b23      	subs	r3, #35	; 0x23
 8002a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aaa:	e023      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b41      	subs	r3, #65	; 0x41
 8002abe:	221f      	movs	r2, #31
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	400a      	ands	r2, r1
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3b41      	subs	r3, #65	; 0x41
 8002ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <HAL_ADC_ConfigChannel+0x284>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10a      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1f4>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_ADC_ConfigChannel+0x288>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_ADC_ConfigChannel+0x288>)
 8002b0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_ADC_ConfigChannel+0x284>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d109      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x212>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b12      	cmp	r3, #18
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_ADC_ConfigChannel+0x288>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_ADC_ConfigChannel+0x288>)
 8002b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_ADC_ConfigChannel+0x284>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d125      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x268>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_ADC_ConfigChannel+0x280>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <HAL_ADC_ConfigChannel+0x22e>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b11      	cmp	r3, #17
 8002b4c:	d11c      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_ADC_ConfigChannel+0x288>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <HAL_ADC_ConfigChannel+0x288>)
 8002b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_ADC_ConfigChannel+0x280>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_ADC_ConfigChannel+0x28c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_ADC_ConfigChannel+0x290>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9a      	lsrs	r2, r3, #18
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b7a:	e002      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f9      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	10000012 	.word	0x10000012
 8002ba4:	40012000 	.word	0x40012000
 8002ba8:	40012300 	.word	0x40012300
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	431bde83 	.word	0x431bde83

08002bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bbc:	4b78      	ldr	r3, [pc, #480]	; (8002da0 <ADC_Init+0x1ec>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <ADC_Init+0x1ec>)
 8002bc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002bc8:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <ADC_Init+0x1ec>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4973      	ldr	r1, [pc, #460]	; (8002da0 <ADC_Init+0x1ec>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <ADC_Init+0x1f0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6899      	ldr	r1, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	e00f      	b.n	8002cae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0202 	bic.w	r2, r2, #2
 8002cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01b      	beq.n	8002d14 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	3b01      	subs	r3, #1
 8002d08:	035a      	lsls	r2, r3, #13
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e007      	b.n	8002d24 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	051a      	lsls	r2, r3, #20
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d66:	025a      	lsls	r2, r3, #9
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6899      	ldr	r1, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	029a      	lsls	r2, r3, #10
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40012300 	.word	0x40012300
 8002da4:	0f000001 	.word	0x0f000001

08002da8 <__NVIC_SetPriorityGrouping>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <__NVIC_SetPriorityGrouping+0x40>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00
 8002dec:	05fa0000 	.word	0x05fa0000

08002df0 <__NVIC_GetPriorityGrouping>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <__NVIC_EnableIRQ+0x38>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_SetPriority>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	; (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff8e 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff29 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff3e 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff8e 	bl	8002e9c <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5d 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff31 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffa2 	bl	8002f04 <SysTick_Config>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fa94 	bl	8002504 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e099      	b.n	800311c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003008:	e00f      	b.n	800302a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300a:	f7ff fa7b 	bl	8002504 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b05      	cmp	r3, #5
 8003016:	d908      	bls.n	800302a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2203      	movs	r2, #3
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e078      	b.n	800311c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e8      	bne.n	800300a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_DMA_Init+0x158>)
 8003044:	4013      	ands	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b04      	cmp	r3, #4
 8003082:	d107      	bne.n	8003094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	4313      	orrs	r3, r2
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0307 	bic.w	r3, r3, #7
 80030aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d117      	bne.n	80030ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f9e9 	bl	80034a8 <DMA_CheckFifoParam>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2240      	movs	r2, #64	; 0x40
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ea:	2301      	movs	r3, #1
 80030ec:	e016      	b.n	800311c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9a0 	bl	800343c <DMA_CalcBaseAndBitshift>
 80030fc:	4603      	mov	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	223f      	movs	r2, #63	; 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	f010803f 	.word	0xf010803f

08003128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003134:	4b92      	ldr	r3, [pc, #584]	; (8003380 <HAL_DMA_IRQHandler+0x258>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a92      	ldr	r2, [pc, #584]	; (8003384 <HAL_DMA_IRQHandler+0x25c>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a9b      	lsrs	r3, r3, #10
 8003140:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	2208      	movs	r2, #8
 8003154:	409a      	lsls	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01a      	beq.n	8003194 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	2208      	movs	r2, #8
 8003182:	409a      	lsls	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	2201      	movs	r2, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	2201      	movs	r2, #1
 80031b8:	409a      	lsls	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 0202 	orr.w	r2, r3, #2
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	2204      	movs	r2, #4
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d012      	beq.n	8003200 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	2204      	movs	r2, #4
 80031ee:	409a      	lsls	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	2210      	movs	r2, #16
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d043      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d03c      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2210      	movs	r2, #16
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d018      	beq.n	800326a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d108      	bne.n	8003258 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d024      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
 8003256:	e01f      	b.n	8003298 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
 8003268:	e016      	b.n	8003298 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0208 	bic.w	r2, r2, #8
 8003286:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	2220      	movs	r2, #32
 800329e:	409a      	lsls	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 808e 	beq.w	80033c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8086 	beq.w	80033c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	2220      	movs	r2, #32
 80032c0:	409a      	lsls	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d136      	bne.n	8003340 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0216 	bic.w	r2, r2, #22
 80032e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <HAL_DMA_IRQHandler+0x1da>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0208 	bic.w	r2, r2, #8
 8003310:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	223f      	movs	r2, #63	; 0x3f
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003332:	2b00      	cmp	r3, #0
 8003334:	d07d      	beq.n	8003432 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	4798      	blx	r3
        }
        return;
 800333e:	e078      	b.n	8003432 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01c      	beq.n	8003388 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d108      	bne.n	800336e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	2b00      	cmp	r3, #0
 8003362:	d030      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
 800336c:	e02b      	b.n	80033c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d027      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
 800337e:	e022      	b.n	80033c6 <HAL_DMA_IRQHandler+0x29e>
 8003380:	20000000 	.word	0x20000000
 8003384:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0210 	bic.w	r2, r2, #16
 80033a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d032      	beq.n	8003434 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d022      	beq.n	8003420 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2205      	movs	r2, #5
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d307      	bcc.n	800340e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f2      	bne.n	80033f2 <HAL_DMA_IRQHandler+0x2ca>
 800340c:	e000      	b.n	8003410 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800340e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
 8003430:	e000      	b.n	8003434 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003432:	bf00      	nop
    }
  }
}
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop

0800343c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	3b10      	subs	r3, #16
 800344c:	4a13      	ldr	r2, [pc, #76]	; (800349c <DMA_CalcBaseAndBitshift+0x60>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <DMA_CalcBaseAndBitshift+0x64>)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d908      	bls.n	800347c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003472:	4013      	ands	r3, r2
 8003474:	1d1a      	adds	r2, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	659a      	str	r2, [r3, #88]	; 0x58
 800347a:	e006      	b.n	800348a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	aaaaaaab 	.word	0xaaaaaaab
 80034a0:	0800ae40 	.word	0x0800ae40
 80034a4:	fffffc00 	.word	0xfffffc00

080034a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11f      	bne.n	8003502 <DMA_CheckFifoParam+0x5a>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d856      	bhi.n	8003576 <DMA_CheckFifoParam+0xce>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <DMA_CheckFifoParam+0x28>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034f3 	.word	0x080034f3
 80034d8:	080034e1 	.word	0x080034e1
 80034dc:	08003577 	.word	0x08003577
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d046      	beq.n	800357a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f0:	e043      	b.n	800357a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034fa:	d140      	bne.n	800357e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e03d      	b.n	800357e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350a:	d121      	bne.n	8003550 <DMA_CheckFifoParam+0xa8>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d837      	bhi.n	8003582 <DMA_CheckFifoParam+0xda>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <DMA_CheckFifoParam+0x70>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	08003529 	.word	0x08003529
 800351c:	0800352f 	.word	0x0800352f
 8003520:	08003529 	.word	0x08003529
 8003524:	08003541 	.word	0x08003541
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
      break;
 800352c:	e030      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d025      	beq.n	8003586 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353e:	e022      	b.n	8003586 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003548:	d11f      	bne.n	800358a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800354e:	e01c      	b.n	800358a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d903      	bls.n	800355e <DMA_CheckFifoParam+0xb6>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d003      	beq.n	8003564 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800355c:	e018      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      break;
 8003562:	e015      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e00b      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      break;
 8003576:	bf00      	nop
 8003578:	e00a      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      break;
 800357a:	bf00      	nop
 800357c:	e008      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      break;
 800357e:	bf00      	nop
 8003580:	e006      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
 8003584:	e004      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      break;   
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
    }
  } 
  
  return status; 
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	e175      	b.n	80038ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035c0:	2201      	movs	r2, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	429a      	cmp	r2, r3
 80035da:	f040 8164 	bne.w	80038a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00b      	beq.n	80035fe <HAL_GPIO_Init+0x5e>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d007      	beq.n	80035fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f2:	2b11      	cmp	r3, #17
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b12      	cmp	r3, #18
 80035fc:	d130      	bne.n	8003660 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x100>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b12      	cmp	r3, #18
 800369e:	d123      	bne.n	80036e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	08da      	lsrs	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3208      	adds	r2, #8
 80036a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	220f      	movs	r2, #15
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	69b9      	ldr	r1, [r7, #24]
 80036e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0203 	and.w	r2, r3, #3
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80be 	beq.w	80038a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372a:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_GPIO_Init+0x324>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_GPIO_Init+0x324>)
 8003730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <HAL_GPIO_Init+0x324>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003742:	4a61      	ldr	r2, [pc, #388]	; (80038c8 <HAL_GPIO_Init+0x328>)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_GPIO_Init+0x32c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d037      	beq.n	80037de <HAL_GPIO_Init+0x23e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a57      	ldr	r2, [pc, #348]	; (80038d0 <HAL_GPIO_Init+0x330>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d031      	beq.n	80037da <HAL_GPIO_Init+0x23a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a56      	ldr	r2, [pc, #344]	; (80038d4 <HAL_GPIO_Init+0x334>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d02b      	beq.n	80037d6 <HAL_GPIO_Init+0x236>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a55      	ldr	r2, [pc, #340]	; (80038d8 <HAL_GPIO_Init+0x338>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d025      	beq.n	80037d2 <HAL_GPIO_Init+0x232>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a54      	ldr	r2, [pc, #336]	; (80038dc <HAL_GPIO_Init+0x33c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <HAL_GPIO_Init+0x22e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a53      	ldr	r2, [pc, #332]	; (80038e0 <HAL_GPIO_Init+0x340>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d019      	beq.n	80037ca <HAL_GPIO_Init+0x22a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_GPIO_Init+0x344>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_GPIO_Init+0x226>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a51      	ldr	r2, [pc, #324]	; (80038e8 <HAL_GPIO_Init+0x348>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_GPIO_Init+0x222>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a50      	ldr	r2, [pc, #320]	; (80038ec <HAL_GPIO_Init+0x34c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <HAL_GPIO_Init+0x21e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4f      	ldr	r2, [pc, #316]	; (80038f0 <HAL_GPIO_Init+0x350>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_GPIO_Init+0x21a>
 80037b6:	2309      	movs	r3, #9
 80037b8:	e012      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037ba:	230a      	movs	r3, #10
 80037bc:	e010      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037be:	2308      	movs	r3, #8
 80037c0:	e00e      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037c2:	2307      	movs	r3, #7
 80037c4:	e00c      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037c6:	2306      	movs	r3, #6
 80037c8:	e00a      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037ca:	2305      	movs	r3, #5
 80037cc:	e008      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037ce:	2304      	movs	r3, #4
 80037d0:	e006      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037d2:	2303      	movs	r3, #3
 80037d4:	e004      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e002      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_GPIO_Init+0x240>
 80037de:	2300      	movs	r3, #0
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	f002 0203 	and.w	r2, r2, #3
 80037e6:	0092      	lsls	r2, r2, #2
 80037e8:	4093      	lsls	r3, r2
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037f0:	4935      	ldr	r1, [pc, #212]	; (80038c8 <HAL_GPIO_Init+0x328>)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	3302      	adds	r3, #2
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <HAL_GPIO_Init+0x354>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003822:	4a34      	ldr	r2, [pc, #208]	; (80038f4 <HAL_GPIO_Init+0x354>)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <HAL_GPIO_Init+0x354>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800384c:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <HAL_GPIO_Init+0x354>)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003852:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_GPIO_Init+0x354>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	43db      	mvns	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003876:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <HAL_GPIO_Init+0x354>)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_GPIO_Init+0x354>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a0:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <HAL_GPIO_Init+0x354>)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3301      	adds	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b0f      	cmp	r3, #15
 80038b0:	f67f ae86 	bls.w	80035c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40020000 	.word	0x40020000
 80038d0:	40020400 	.word	0x40020400
 80038d4:	40020800 	.word	0x40020800
 80038d8:	40020c00 	.word	0x40020c00
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40021400 	.word	0x40021400
 80038e4:	40021800 	.word	0x40021800
 80038e8:	40021c00 	.word	0x40021c00
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40022400 	.word	0x40022400
 80038f4:	40013c00 	.word	0x40013c00

080038f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
 8003904:	4613      	mov	r3, r2
 8003906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003908:	787b      	ldrb	r3, [r7, #1]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390e:	887a      	ldrh	r2, [r7, #2]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003914:	e003      	b.n	800391e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	041a      	lsls	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	619a      	str	r2, [r3, #24]
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40007000 	.word	0x40007000

0800394c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e291      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	4b96      	ldr	r3, [pc, #600]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b04      	cmp	r3, #4
 800397a:	d00c      	beq.n	8003996 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397c:	4b93      	ldr	r3, [pc, #588]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d112      	bne.n	80039ae <HAL_RCC_OscConfig+0x62>
 8003988:	4b90      	ldr	r3, [pc, #576]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d10b      	bne.n	80039ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003996:	4b8d      	ldr	r3, [pc, #564]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d06c      	beq.n	8003a7c <HAL_RCC_OscConfig+0x130>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d168      	bne.n	8003a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e26b      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x7a>
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a83      	ldr	r2, [pc, #524]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e02e      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x9c>
 80039ce:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7e      	ldr	r2, [pc, #504]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7b      	ldr	r2, [pc, #492]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xd8>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6b      	ldr	r2, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fd6a 	bl	8002504 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fd66 	bl	8002504 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e21f      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe fd56 	bl	8002504 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fd52 	bl	8002504 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e20b      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x110>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d069      	beq.n	8003b5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x190>
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1df      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	493d      	ldr	r1, [pc, #244]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e040      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d023      	beq.n	8003b2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fd08 	bl	8002504 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fe fd04 	bl	8002504 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1bd      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4929      	ldr	r1, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
 8003b2a:	e018      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe fce4 	bl	8002504 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fe fce0 	bl	8002504 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e199      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d038      	beq.n	8003bdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d019      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fe fcc1 	bl	8002504 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b86:	f7fe fcbd 	bl	8002504 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e176      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x23a>
 8003ba4:	e01a      	b.n	8003bdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_RCC_OscConfig+0x280>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fca7 	bl	8002504 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bba:	f7fe fca3 	bl	8002504 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d903      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e15c      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
 8003bcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a4 	beq.w	8003d32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
 8003c02:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d118      	bne.n	8003c50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c1e:	4b7f      	ldr	r3, [pc, #508]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7e      	ldr	r2, [pc, #504]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fe fc6b 	bl	8002504 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fe fc67 	bl	8002504 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b64      	cmp	r3, #100	; 0x64
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e120      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c44:	4b75      	ldr	r3, [pc, #468]	; (8003e1c <HAL_RCC_OscConfig+0x4d0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d106      	bne.n	8003c66 <HAL_RCC_OscConfig+0x31a>
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a6e      	ldr	r2, [pc, #440]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e02d      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x33c>
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a69      	ldr	r2, [pc, #420]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b67      	ldr	r3, [pc, #412]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a66      	ldr	r2, [pc, #408]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	e01c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x35e>
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a60      	ldr	r2, [pc, #384]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	4b5e      	ldr	r3, [pc, #376]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a5d      	ldr	r2, [pc, #372]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	e00b      	b.n	8003cc2 <HAL_RCC_OscConfig+0x376>
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a5a      	ldr	r2, [pc, #360]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a57      	ldr	r2, [pc, #348]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d015      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fe fc1b 	bl	8002504 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fe fc17 	bl	8002504 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0ce      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ee      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x386>
 8003cf4:	e014      	b.n	8003d20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fc05 	bl	8002504 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fe fc01 	bl	8002504 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0b8      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ee      	bne.n	8003cfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a4 	beq.w	8003e84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d06b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d149      	bne.n	8003de4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fbd2 	bl	8002504 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe fbce 	bl	8002504 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e087      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	4313      	orrs	r3, r2
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fba2 	bl	8002504 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fb9e 	bl	8002504 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e057      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x478>
 8003de2:	e04f      	b.n	8003e84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe fb88 	bl	8002504 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fe fb84 	bl	8002504 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e03d      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4ac>
 8003e16:	e035      	b.n	8003e84 <HAL_RCC_OscConfig+0x538>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x544>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d121      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11a      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0d0      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 020f 	bic.w	r2, r3, #15
 8003ec2:	4965      	ldr	r1, [pc, #404]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d040      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b41      	ldr	r3, [pc, #260]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e073      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06b      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4936      	ldr	r1, [pc, #216]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fe fabc 	bl	8002504 <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fe fab8 	bl	8002504 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e053      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d210      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 020f 	bic.w	r2, r3, #15
 8003fce:	4922      	ldr	r1, [pc, #136]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4602      	mov	r2, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	490a      	ldr	r1, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x1cc>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1d0>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1d4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fa18 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023c00 	.word	0x40023c00
 800405c:	40023800 	.word	0x40023800
 8004060:	0800ae28 	.word	0x0800ae28
 8004064:	20000000 	.word	0x20000000
 8004068:	20000004 	.word	0x20000004

0800406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	2300      	movs	r3, #0
 800407e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004084:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d00d      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x40>
 8004090:	2b08      	cmp	r3, #8
 8004092:	f200 80bd 	bhi.w	8004210 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x34>
 800409a:	2b04      	cmp	r3, #4
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800409e:	e0b7      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040a2:	60bb      	str	r3, [r7, #8]
      break;
 80040a4:	e0b7      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040a8:	60bb      	str	r3, [r7, #8]
      break;
 80040aa:	e0b4      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ac:	4b5d      	ldr	r3, [pc, #372]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040b6:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04d      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b58      	ldr	r3, [pc, #352]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	461a      	mov	r2, r3
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	ea02 0800 	and.w	r8, r2, r0
 80040da:	ea03 0901 	and.w	r9, r3, r1
 80040de:	4640      	mov	r0, r8
 80040e0:	4649      	mov	r1, r9
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	014b      	lsls	r3, r1, #5
 80040ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040f0:	0142      	lsls	r2, r0, #5
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	ebb0 0008 	subs.w	r0, r0, r8
 80040fa:	eb61 0109 	sbc.w	r1, r1, r9
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	018b      	lsls	r3, r1, #6
 8004108:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800410c:	0182      	lsls	r2, r0, #6
 800410e:	1a12      	subs	r2, r2, r0
 8004110:	eb63 0301 	sbc.w	r3, r3, r1
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 0100 	mov.w	r1, #0
 800411c:	00d9      	lsls	r1, r3, #3
 800411e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004122:	00d0      	lsls	r0, r2, #3
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	eb12 0208 	adds.w	r2, r2, r8
 800412c:	eb43 0309 	adc.w	r3, r3, r9
 8004130:	f04f 0000 	mov.w	r0, #0
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	0259      	lsls	r1, r3, #9
 800413a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800413e:	0250      	lsls	r0, r2, #9
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	461a      	mov	r2, r3
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	f7fc fdba 	bl	8000cc8 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4613      	mov	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e04a      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	461a      	mov	r2, r3
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	ea02 0400 	and.w	r4, r2, r0
 8004176:	ea03 0501 	and.w	r5, r3, r1
 800417a:	4620      	mov	r0, r4
 800417c:	4629      	mov	r1, r5
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	014b      	lsls	r3, r1, #5
 8004188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800418c:	0142      	lsls	r2, r0, #5
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	1b00      	subs	r0, r0, r4
 8004194:	eb61 0105 	sbc.w	r1, r1, r5
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	018b      	lsls	r3, r1, #6
 80041a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041a6:	0182      	lsls	r2, r0, #6
 80041a8:	1a12      	subs	r2, r2, r0
 80041aa:	eb63 0301 	sbc.w	r3, r3, r1
 80041ae:	f04f 0000 	mov.w	r0, #0
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	00d9      	lsls	r1, r3, #3
 80041b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041bc:	00d0      	lsls	r0, r2, #3
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	1912      	adds	r2, r2, r4
 80041c4:	eb45 0303 	adc.w	r3, r5, r3
 80041c8:	f04f 0000 	mov.w	r0, #0
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	0299      	lsls	r1, r3, #10
 80041d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041d6:	0290      	lsls	r0, r2, #10
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f7fc fd6e 	bl	8000cc8 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	60bb      	str	r3, [r7, #8]
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004212:	60bb      	str	r3, [r7, #8]
      break;
 8004214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004216:	68bb      	ldr	r3, [r7, #8]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a9b      	lsrs	r3, r3, #10
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	; (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	0800ae38 	.word	0x0800ae38

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004274:	f7ff ffdc 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0b5b      	lsrs	r3, r3, #13
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	0800ae38 	.word	0x0800ae38

08004298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042c0:	4b69      	ldr	r3, [pc, #420]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a68      	ldr	r2, [pc, #416]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042ca:	6093      	str	r3, [r2, #8]
 80042cc:	4b66      	ldr	r3, [pc, #408]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	4964      	ldr	r1, [pc, #400]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d017      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042f2:	4b5d      	ldr	r3, [pc, #372]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	4959      	ldr	r1, [pc, #356]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004310:	d101      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800431e:	2301      	movs	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d017      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800432e:	4b4e      	ldr	r3, [pc, #312]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004334:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	494a      	ldr	r1, [pc, #296]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434c:	d101      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800435a:	2301      	movs	r3, #1
 800435c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 808b 	beq.w	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b3a      	ldr	r3, [pc, #232]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	4a39      	ldr	r2, [pc, #228]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	6413      	str	r3, [r2, #64]	; 0x40
 8004388:	4b37      	ldr	r3, [pc, #220]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004394:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a34      	ldr	r2, [pc, #208]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800439a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fe f8b0 	bl	8002504 <HAL_GetTick>
 80043a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a8:	f7fe f8ac 	bl	8002504 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e357      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c6:	4b28      	ldr	r3, [pc, #160]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d035      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d02e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e4:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ee:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800440c:	4b16      	ldr	r3, [pc, #88]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d114      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fe f874 	bl	8002504 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441e:	e00a      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fe f870 	bl	8002504 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e319      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ee      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444e:	d111      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800445e:	400b      	ands	r3, r1
 8004460:	4901      	ldr	r1, [pc, #4]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
 8004466:	e00b      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004468:	40023800 	.word	0x40023800
 800446c:	40007000 	.word	0x40007000
 8004470:	0ffffcff 	.word	0x0ffffcff
 8004474:	4bb1      	ldr	r3, [pc, #708]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4ab0      	ldr	r2, [pc, #704]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800447a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800447e:	6093      	str	r3, [r2, #8]
 8004480:	4bae      	ldr	r3, [pc, #696]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	49ab      	ldr	r1, [pc, #684]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800448e:	4313      	orrs	r3, r2
 8004490:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	d010      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800449e:	4ba7      	ldr	r3, [pc, #668]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a4:	4aa5      	ldr	r2, [pc, #660]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044ae:	4ba3      	ldr	r3, [pc, #652]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	49a0      	ldr	r1, [pc, #640]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044cc:	4b9b      	ldr	r3, [pc, #620]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044da:	4998      	ldr	r1, [pc, #608]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ee:	4b93      	ldr	r3, [pc, #588]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044fc:	498f      	ldr	r1, [pc, #572]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004510:	4b8a      	ldr	r3, [pc, #552]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800451e:	4987      	ldr	r1, [pc, #540]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004532:	4b82      	ldr	r3, [pc, #520]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	497e      	ldr	r1, [pc, #504]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004554:	4b79      	ldr	r3, [pc, #484]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f023 0203 	bic.w	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	4976      	ldr	r1, [pc, #472]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004576:	4b71      	ldr	r3, [pc, #452]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f023 020c 	bic.w	r2, r3, #12
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004584:	496d      	ldr	r1, [pc, #436]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004598:	4b68      	ldr	r3, [pc, #416]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a6:	4965      	ldr	r1, [pc, #404]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045ba:	4b60      	ldr	r3, [pc, #384]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	495c      	ldr	r1, [pc, #368]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045dc:	4b57      	ldr	r3, [pc, #348]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	4954      	ldr	r1, [pc, #336]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045fe:	4b4f      	ldr	r3, [pc, #316]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	494b      	ldr	r1, [pc, #300]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004620:	4b46      	ldr	r3, [pc, #280]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	4943      	ldr	r1, [pc, #268]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004642:	4b3e      	ldr	r3, [pc, #248]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	493a      	ldr	r1, [pc, #232]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004664:	4b35      	ldr	r3, [pc, #212]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004672:	4932      	ldr	r1, [pc, #200]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d011      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004686:	4b2d      	ldr	r3, [pc, #180]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004694:	4929      	ldr	r1, [pc, #164]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c6:	4b1d      	ldr	r3, [pc, #116]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	4919      	ldr	r1, [pc, #100]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f8:	4910      	ldr	r1, [pc, #64]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d006      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80d9 	beq.w	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800471a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800471e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fd fef0 	bl	8002504 <HAL_GetTick>
 8004724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004726:	e00b      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004728:	f7fd feec 	bl	8002504 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d904      	bls.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e197      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004740:	4b6c      	ldr	r3, [pc, #432]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ed      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d021      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11d      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004760:	4b64      	ldr	r3, [pc, #400]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800476e:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004774:	0e1b      	lsrs	r3, r3, #24
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	019a      	lsls	r2, r3, #6
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	071b      	lsls	r3, r3, #28
 8004794:	4957      	ldr	r1, [pc, #348]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d02e      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c6:	d129      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047c8:	4b4a      	ldr	r3, [pc, #296]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047d6:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047dc:	0f1b      	lsrs	r3, r3, #28
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	019a      	lsls	r2, r3, #6
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	431a      	orrs	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	071b      	lsls	r3, r3, #28
 80047fc:	493d      	ldr	r1, [pc, #244]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004804:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480a:	f023 021f 	bic.w	r2, r3, #31
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	3b01      	subs	r3, #1
 8004814:	4937      	ldr	r1, [pc, #220]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01d      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004828:	4b32      	ldr	r3, [pc, #200]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	0e1b      	lsrs	r3, r3, #24
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483c:	0f1b      	lsrs	r3, r3, #28
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	019a      	lsls	r2, r3, #6
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	431a      	orrs	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	431a      	orrs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	071b      	lsls	r3, r3, #28
 800485c:	4925      	ldr	r1, [pc, #148]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d011      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	019a      	lsls	r2, r3, #6
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	061b      	lsls	r3, r3, #24
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	071b      	lsls	r3, r3, #28
 800488c:	4919      	ldr	r1, [pc, #100]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004894:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800489a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800489e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fd fe30 	bl	8002504 <HAL_GetTick>
 80048a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048a8:	f7fd fe2c 	bl	8002504 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0d7      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	f040 80cd 	bne.w	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fd fe13 	bl	8002504 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048e2:	f7fd fe0f 	bl	8002504 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b64      	cmp	r3, #100	; 0x64
 80048ee:	d903      	bls.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0ba      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80048f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048f8:	4b5e      	ldr	r3, [pc, #376]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004904:	d0ed      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02e      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d12a      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800492e:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800493c:	4b4d      	ldr	r3, [pc, #308]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	0f1b      	lsrs	r3, r3, #28
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	019a      	lsls	r2, r3, #6
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	4944      	ldr	r1, [pc, #272]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800496a:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800496c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	493d      	ldr	r1, [pc, #244]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d022      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004998:	d11d      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800499a:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	0e1b      	lsrs	r3, r3, #24
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049a8:	4b32      	ldr	r3, [pc, #200]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	0f1b      	lsrs	r3, r3, #28
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	019a      	lsls	r2, r3, #6
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	431a      	orrs	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	061b      	lsls	r3, r3, #24
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	071b      	lsls	r3, r3, #28
 80049ce:	4929      	ldr	r1, [pc, #164]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d028      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	0e1b      	lsrs	r3, r3, #24
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049f0:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	019a      	lsls	r2, r3, #6
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	071b      	lsls	r3, r3, #28
 8004a16:	4917      	ldr	r1, [pc, #92]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4911      	ldr	r1, [pc, #68]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a34:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fd fd60 	bl	8002504 <HAL_GetTick>
 8004a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a48:	f7fd fd5c 	bl	8002504 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e007      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a66:	d1ef      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800

08004a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e040      	b.n	8004b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd fa82 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8c0 	bl	8004c3c <UART_SetConfig>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e022      	b.n	8004b0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fb16 	bl	8005100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb9d 	bl	8005244 <UART_CheckIdleState>
 8004b0a:	4603      	mov	r3, r0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	; 0x28
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	f040 8081 	bne.w	8004c30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_UART_Transmit+0x26>
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e079      	b.n	8004c32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_UART_Transmit+0x38>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e072      	b.n	8004c32 <HAL_UART_Transmit+0x11e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2221      	movs	r2, #33	; 0x21
 8004b60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fd fccf 	bl	8002504 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b80:	d108      	bne.n	8004b94 <HAL_UART_Transmit+0x80>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d104      	bne.n	8004b94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	e003      	b.n	8004b9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ba4:	e02c      	b.n	8004c00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fb7a 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e038      	b.n	8004c32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	3302      	adds	r3, #2
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	e007      	b.n	8004bee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1cc      	bne.n	8004ba6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fb47 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e005      	b.n	8004c32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4ba7      	ldr	r3, [pc, #668]	; (8004f04 <UART_SetConfig+0x2c8>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a95      	ldr	r2, [pc, #596]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d120      	bne.n	8004cfa <UART_SetConfig+0xbe>
 8004cb8:	4b94      	ldr	r3, [pc, #592]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d816      	bhi.n	8004cf4 <UART_SetConfig+0xb8>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x90>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004ce9 	.word	0x08004ce9
 8004cd4:	08004ce3 	.word	0x08004ce3
 8004cd8:	08004cef 	.word	0x08004cef
 8004cdc:	2301      	movs	r3, #1
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e14f      	b.n	8004f82 <UART_SetConfig+0x346>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e14c      	b.n	8004f82 <UART_SetConfig+0x346>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e149      	b.n	8004f82 <UART_SetConfig+0x346>
 8004cee:	2308      	movs	r3, #8
 8004cf0:	77fb      	strb	r3, [r7, #31]
 8004cf2:	e146      	b.n	8004f82 <UART_SetConfig+0x346>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e143      	b.n	8004f82 <UART_SetConfig+0x346>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a84      	ldr	r2, [pc, #528]	; (8004f10 <UART_SetConfig+0x2d4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d132      	bne.n	8004d6a <UART_SetConfig+0x12e>
 8004d04:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d828      	bhi.n	8004d64 <UART_SetConfig+0x128>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0xdc>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004d65 	.word	0x08004d65
 8004d20:	08004d65 	.word	0x08004d65
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d59 	.word	0x08004d59
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d53 	.word	0x08004d53
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d65 	.word	0x08004d65
 8004d48:	08004d5f 	.word	0x08004d5f
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e117      	b.n	8004f82 <UART_SetConfig+0x346>
 8004d52:	2302      	movs	r3, #2
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e114      	b.n	8004f82 <UART_SetConfig+0x346>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e111      	b.n	8004f82 <UART_SetConfig+0x346>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e10e      	b.n	8004f82 <UART_SetConfig+0x346>
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e10b      	b.n	8004f82 <UART_SetConfig+0x346>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a69      	ldr	r2, [pc, #420]	; (8004f14 <UART_SetConfig+0x2d8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d120      	bne.n	8004db6 <UART_SetConfig+0x17a>
 8004d74:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d013      	beq.n	8004daa <UART_SetConfig+0x16e>
 8004d82:	2b30      	cmp	r3, #48	; 0x30
 8004d84:	d814      	bhi.n	8004db0 <UART_SetConfig+0x174>
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d009      	beq.n	8004d9e <UART_SetConfig+0x162>
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d810      	bhi.n	8004db0 <UART_SetConfig+0x174>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <UART_SetConfig+0x15c>
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d006      	beq.n	8004da4 <UART_SetConfig+0x168>
 8004d96:	e00b      	b.n	8004db0 <UART_SetConfig+0x174>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e0f1      	b.n	8004f82 <UART_SetConfig+0x346>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e0ee      	b.n	8004f82 <UART_SetConfig+0x346>
 8004da4:	2304      	movs	r3, #4
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e0eb      	b.n	8004f82 <UART_SetConfig+0x346>
 8004daa:	2308      	movs	r3, #8
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e0e8      	b.n	8004f82 <UART_SetConfig+0x346>
 8004db0:	2310      	movs	r3, #16
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e0e5      	b.n	8004f82 <UART_SetConfig+0x346>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <UART_SetConfig+0x2dc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d120      	bne.n	8004e02 <UART_SetConfig+0x1c6>
 8004dc0:	4b52      	ldr	r3, [pc, #328]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dca:	2bc0      	cmp	r3, #192	; 0xc0
 8004dcc:	d013      	beq.n	8004df6 <UART_SetConfig+0x1ba>
 8004dce:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd0:	d814      	bhi.n	8004dfc <UART_SetConfig+0x1c0>
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d009      	beq.n	8004dea <UART_SetConfig+0x1ae>
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d810      	bhi.n	8004dfc <UART_SetConfig+0x1c0>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <UART_SetConfig+0x1a8>
 8004dde:	2b40      	cmp	r3, #64	; 0x40
 8004de0:	d006      	beq.n	8004df0 <UART_SetConfig+0x1b4>
 8004de2:	e00b      	b.n	8004dfc <UART_SetConfig+0x1c0>
 8004de4:	2300      	movs	r3, #0
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e0cb      	b.n	8004f82 <UART_SetConfig+0x346>
 8004dea:	2302      	movs	r3, #2
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e0c8      	b.n	8004f82 <UART_SetConfig+0x346>
 8004df0:	2304      	movs	r3, #4
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e0c5      	b.n	8004f82 <UART_SetConfig+0x346>
 8004df6:	2308      	movs	r3, #8
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e0c2      	b.n	8004f82 <UART_SetConfig+0x346>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e0bf      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a45      	ldr	r2, [pc, #276]	; (8004f1c <UART_SetConfig+0x2e0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d125      	bne.n	8004e58 <UART_SetConfig+0x21c>
 8004e0c:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1a:	d017      	beq.n	8004e4c <UART_SetConfig+0x210>
 8004e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e20:	d817      	bhi.n	8004e52 <UART_SetConfig+0x216>
 8004e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e26:	d00b      	beq.n	8004e40 <UART_SetConfig+0x204>
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2c:	d811      	bhi.n	8004e52 <UART_SetConfig+0x216>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <UART_SetConfig+0x1fe>
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e36:	d006      	beq.n	8004e46 <UART_SetConfig+0x20a>
 8004e38:	e00b      	b.n	8004e52 <UART_SetConfig+0x216>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e0a0      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e40:	2302      	movs	r3, #2
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e09d      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e46:	2304      	movs	r3, #4
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e09a      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e097      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e52:	2310      	movs	r3, #16
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e094      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <UART_SetConfig+0x2e4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d125      	bne.n	8004eae <UART_SetConfig+0x272>
 8004e62:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e70:	d017      	beq.n	8004ea2 <UART_SetConfig+0x266>
 8004e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e76:	d817      	bhi.n	8004ea8 <UART_SetConfig+0x26c>
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7c:	d00b      	beq.n	8004e96 <UART_SetConfig+0x25a>
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d811      	bhi.n	8004ea8 <UART_SetConfig+0x26c>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x254>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d006      	beq.n	8004e9c <UART_SetConfig+0x260>
 8004e8e:	e00b      	b.n	8004ea8 <UART_SetConfig+0x26c>
 8004e90:	2301      	movs	r3, #1
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e075      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e072      	b.n	8004f82 <UART_SetConfig+0x346>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e06f      	b.n	8004f82 <UART_SetConfig+0x346>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e06c      	b.n	8004f82 <UART_SetConfig+0x346>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e069      	b.n	8004f82 <UART_SetConfig+0x346>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <UART_SetConfig+0x2e8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d137      	bne.n	8004f28 <UART_SetConfig+0x2ec>
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ec2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ec6:	d017      	beq.n	8004ef8 <UART_SetConfig+0x2bc>
 8004ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ecc:	d817      	bhi.n	8004efe <UART_SetConfig+0x2c2>
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed2:	d00b      	beq.n	8004eec <UART_SetConfig+0x2b0>
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	d811      	bhi.n	8004efe <UART_SetConfig+0x2c2>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <UART_SetConfig+0x2aa>
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	d006      	beq.n	8004ef2 <UART_SetConfig+0x2b6>
 8004ee4:	e00b      	b.n	8004efe <UART_SetConfig+0x2c2>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e04a      	b.n	8004f82 <UART_SetConfig+0x346>
 8004eec:	2302      	movs	r3, #2
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e047      	b.n	8004f82 <UART_SetConfig+0x346>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e044      	b.n	8004f82 <UART_SetConfig+0x346>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e041      	b.n	8004f82 <UART_SetConfig+0x346>
 8004efe:	2310      	movs	r3, #16
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e03e      	b.n	8004f82 <UART_SetConfig+0x346>
 8004f04:	efff69f3 	.word	0xefff69f3
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40004400 	.word	0x40004400
 8004f14:	40004800 	.word	0x40004800
 8004f18:	40004c00 	.word	0x40004c00
 8004f1c:	40005000 	.word	0x40005000
 8004f20:	40011400 	.word	0x40011400
 8004f24:	40007800 	.word	0x40007800
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a71      	ldr	r2, [pc, #452]	; (80050f4 <UART_SetConfig+0x4b8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d125      	bne.n	8004f7e <UART_SetConfig+0x342>
 8004f32:	4b71      	ldr	r3, [pc, #452]	; (80050f8 <UART_SetConfig+0x4bc>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f40:	d017      	beq.n	8004f72 <UART_SetConfig+0x336>
 8004f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f46:	d817      	bhi.n	8004f78 <UART_SetConfig+0x33c>
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4c:	d00b      	beq.n	8004f66 <UART_SetConfig+0x32a>
 8004f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f52:	d811      	bhi.n	8004f78 <UART_SetConfig+0x33c>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <UART_SetConfig+0x324>
 8004f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f5c:	d006      	beq.n	8004f6c <UART_SetConfig+0x330>
 8004f5e:	e00b      	b.n	8004f78 <UART_SetConfig+0x33c>
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e00d      	b.n	8004f82 <UART_SetConfig+0x346>
 8004f66:	2302      	movs	r3, #2
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e00a      	b.n	8004f82 <UART_SetConfig+0x346>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e007      	b.n	8004f82 <UART_SetConfig+0x346>
 8004f72:	2308      	movs	r3, #8
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e004      	b.n	8004f82 <UART_SetConfig+0x346>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e001      	b.n	8004f82 <UART_SetConfig+0x346>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8a:	d15b      	bne.n	8005044 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d827      	bhi.n	8004fe2 <UART_SetConfig+0x3a6>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0x35c>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	08004fe3 	.word	0x08004fe3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fe3 	.word	0x08004fe3
 8004fb0:	08004fe3 	.word	0x08004fe3
 8004fb4:	08004fe3 	.word	0x08004fe3
 8004fb8:	08004fdb 	.word	0x08004fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7ff f944 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	61b8      	str	r0, [r7, #24]
        break;
 8004fc2:	e013      	b.n	8004fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7ff f954 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8004fc8:	61b8      	str	r0, [r7, #24]
        break;
 8004fca:	e00f      	b.n	8004fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fcc:	4b4b      	ldr	r3, [pc, #300]	; (80050fc <UART_SetConfig+0x4c0>)
 8004fce:	61bb      	str	r3, [r7, #24]
        break;
 8004fd0:	e00c      	b.n	8004fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd2:	f7ff f84b 	bl	800406c <HAL_RCC_GetSysClockFreq>
 8004fd6:	61b8      	str	r0, [r7, #24]
        break;
 8004fd8:	e008      	b.n	8004fec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fde:	61bb      	str	r3, [r7, #24]
        break;
 8004fe0:	e004      	b.n	8004fec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8004fea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d074      	beq.n	80050dc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	005a      	lsls	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	441a      	add	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	b29b      	uxth	r3, r3
 8005008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d916      	bls.n	800503e <UART_SetConfig+0x402>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005016:	d212      	bcs.n	800503e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f023 030f 	bic.w	r3, r3, #15
 8005020:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	b29b      	uxth	r3, r3
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	b29a      	uxth	r2, r3
 800502e:	89fb      	ldrh	r3, [r7, #14]
 8005030:	4313      	orrs	r3, r2
 8005032:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	89fa      	ldrh	r2, [r7, #14]
 800503a:	60da      	str	r2, [r3, #12]
 800503c:	e04e      	b.n	80050dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	77bb      	strb	r3, [r7, #30]
 8005042:	e04b      	b.n	80050dc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005044:	7ffb      	ldrb	r3, [r7, #31]
 8005046:	2b08      	cmp	r3, #8
 8005048:	d827      	bhi.n	800509a <UART_SetConfig+0x45e>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x414>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005075 	.word	0x08005075
 8005054:	0800507d 	.word	0x0800507d
 8005058:	08005085 	.word	0x08005085
 800505c:	0800509b 	.word	0x0800509b
 8005060:	0800508b 	.word	0x0800508b
 8005064:	0800509b 	.word	0x0800509b
 8005068:	0800509b 	.word	0x0800509b
 800506c:	0800509b 	.word	0x0800509b
 8005070:	08005093 	.word	0x08005093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7ff f8e8 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8005078:	61b8      	str	r0, [r7, #24]
        break;
 800507a:	e013      	b.n	80050a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800507c:	f7ff f8f8 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8005080:	61b8      	str	r0, [r7, #24]
        break;
 8005082:	e00f      	b.n	80050a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <UART_SetConfig+0x4c0>)
 8005086:	61bb      	str	r3, [r7, #24]
        break;
 8005088:	e00c      	b.n	80050a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508a:	f7fe ffef 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800508e:	61b8      	str	r0, [r7, #24]
        break;
 8005090:	e008      	b.n	80050a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005096:	61bb      	str	r3, [r7, #24]
        break;
 8005098:	e004      	b.n	80050a4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	77bb      	strb	r3, [r7, #30]
        break;
 80050a2:	bf00      	nop
    }

    if (pclk != 0U)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	085a      	lsrs	r2, r3, #1
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	b29b      	uxth	r3, r3
 80050be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b0f      	cmp	r3, #15
 80050c4:	d908      	bls.n	80050d8 <UART_SetConfig+0x49c>
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050cc:	d204      	bcs.n	80050d8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	e001      	b.n	80050dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40007c00 	.word	0x40007c00
 80050f8:	40023800 	.word	0x40023800
 80050fc:	00f42400 	.word	0x00f42400

08005100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01a      	beq.n	8005216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fe:	d10a      	bne.n	8005216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005254:	f7fd f956 	bl	8002504 <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b08      	cmp	r3, #8
 8005266:	d10e      	bne.n	8005286 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f817 	bl	80052aa <UART_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e00d      	b.n	80052a2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ba:	e05e      	b.n	800537a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d05a      	beq.n	800537a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c4:	f7fd f91e 	bl	8002504 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <UART_WaitOnFlagUntilTimeout+0x30>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11b      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e043      	b.n	800539a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02c      	beq.n	800537a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532e:	d124      	bne.n	800537a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005348:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e00f      	b.n	800539a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4013      	ands	r3, r2
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	429a      	cmp	r2, r3
 8005396:	d091      	beq.n	80052bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <pow>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	ec59 8b10 	vmov	r8, r9, d0
 80053ac:	ec57 6b11 	vmov	r6, r7, d1
 80053b0:	f000 f8de 	bl	8005570 <__ieee754_pow>
 80053b4:	4b4e      	ldr	r3, [pc, #312]	; (80054f0 <pow+0x14c>)
 80053b6:	f993 3000 	ldrsb.w	r3, [r3]
 80053ba:	3301      	adds	r3, #1
 80053bc:	ec55 4b10 	vmov	r4, r5, d0
 80053c0:	d015      	beq.n	80053ee <pow+0x4a>
 80053c2:	4632      	mov	r2, r6
 80053c4:	463b      	mov	r3, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	4639      	mov	r1, r7
 80053ca:	f7fb fbcf 	bl	8000b6c <__aeabi_dcmpun>
 80053ce:	b970      	cbnz	r0, 80053ee <pow+0x4a>
 80053d0:	4642      	mov	r2, r8
 80053d2:	464b      	mov	r3, r9
 80053d4:	4640      	mov	r0, r8
 80053d6:	4649      	mov	r1, r9
 80053d8:	f7fb fbc8 	bl	8000b6c <__aeabi_dcmpun>
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	b148      	cbz	r0, 80053f6 <pow+0x52>
 80053e2:	4630      	mov	r0, r6
 80053e4:	4639      	mov	r1, r7
 80053e6:	f7fb fb8f 	bl	8000b08 <__aeabi_dcmpeq>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d17d      	bne.n	80054ea <pow+0x146>
 80053ee:	ec45 4b10 	vmov	d0, r4, r5
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f6:	4640      	mov	r0, r8
 80053f8:	4649      	mov	r1, r9
 80053fa:	f7fb fb85 	bl	8000b08 <__aeabi_dcmpeq>
 80053fe:	b1e0      	cbz	r0, 800543a <pow+0x96>
 8005400:	2200      	movs	r2, #0
 8005402:	2300      	movs	r3, #0
 8005404:	4630      	mov	r0, r6
 8005406:	4639      	mov	r1, r7
 8005408:	f7fb fb7e 	bl	8000b08 <__aeabi_dcmpeq>
 800540c:	2800      	cmp	r0, #0
 800540e:	d16c      	bne.n	80054ea <pow+0x146>
 8005410:	ec47 6b10 	vmov	d0, r6, r7
 8005414:	f000 ff7b 	bl	800630e <finite>
 8005418:	2800      	cmp	r0, #0
 800541a:	d0e8      	beq.n	80053ee <pow+0x4a>
 800541c:	2200      	movs	r2, #0
 800541e:	2300      	movs	r3, #0
 8005420:	4630      	mov	r0, r6
 8005422:	4639      	mov	r1, r7
 8005424:	f7fb fb7a 	bl	8000b1c <__aeabi_dcmplt>
 8005428:	2800      	cmp	r0, #0
 800542a:	d0e0      	beq.n	80053ee <pow+0x4a>
 800542c:	f001 f89c 	bl	8006568 <__errno>
 8005430:	2321      	movs	r3, #33	; 0x21
 8005432:	6003      	str	r3, [r0, #0]
 8005434:	2400      	movs	r4, #0
 8005436:	4d2f      	ldr	r5, [pc, #188]	; (80054f4 <pow+0x150>)
 8005438:	e7d9      	b.n	80053ee <pow+0x4a>
 800543a:	ec45 4b10 	vmov	d0, r4, r5
 800543e:	f000 ff66 	bl	800630e <finite>
 8005442:	bbb8      	cbnz	r0, 80054b4 <pow+0x110>
 8005444:	ec49 8b10 	vmov	d0, r8, r9
 8005448:	f000 ff61 	bl	800630e <finite>
 800544c:	b390      	cbz	r0, 80054b4 <pow+0x110>
 800544e:	ec47 6b10 	vmov	d0, r6, r7
 8005452:	f000 ff5c 	bl	800630e <finite>
 8005456:	b368      	cbz	r0, 80054b4 <pow+0x110>
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fb fb84 	bl	8000b6c <__aeabi_dcmpun>
 8005464:	b160      	cbz	r0, 8005480 <pow+0xdc>
 8005466:	f001 f87f 	bl	8006568 <__errno>
 800546a:	2321      	movs	r3, #33	; 0x21
 800546c:	6003      	str	r3, [r0, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	2300      	movs	r3, #0
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	f7fb fa09 	bl	800088c <__aeabi_ddiv>
 800547a:	4604      	mov	r4, r0
 800547c:	460d      	mov	r5, r1
 800547e:	e7b6      	b.n	80053ee <pow+0x4a>
 8005480:	f001 f872 	bl	8006568 <__errno>
 8005484:	2322      	movs	r3, #34	; 0x22
 8005486:	6003      	str	r3, [r0, #0]
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fb44 	bl	8000b1c <__aeabi_dcmplt>
 8005494:	2400      	movs	r4, #0
 8005496:	b158      	cbz	r0, 80054b0 <pow+0x10c>
 8005498:	ec47 6b10 	vmov	d0, r6, r7
 800549c:	f000 ff4c 	bl	8006338 <rint>
 80054a0:	4632      	mov	r2, r6
 80054a2:	ec51 0b10 	vmov	r0, r1, d0
 80054a6:	463b      	mov	r3, r7
 80054a8:	f7fb fb2e 	bl	8000b08 <__aeabi_dcmpeq>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d0c2      	beq.n	8005436 <pow+0x92>
 80054b0:	4d11      	ldr	r5, [pc, #68]	; (80054f8 <pow+0x154>)
 80054b2:	e79c      	b.n	80053ee <pow+0x4a>
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	4620      	mov	r0, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	f7fb fb24 	bl	8000b08 <__aeabi_dcmpeq>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d094      	beq.n	80053ee <pow+0x4a>
 80054c4:	ec49 8b10 	vmov	d0, r8, r9
 80054c8:	f000 ff21 	bl	800630e <finite>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d08e      	beq.n	80053ee <pow+0x4a>
 80054d0:	ec47 6b10 	vmov	d0, r6, r7
 80054d4:	f000 ff1b 	bl	800630e <finite>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d088      	beq.n	80053ee <pow+0x4a>
 80054dc:	f001 f844 	bl	8006568 <__errno>
 80054e0:	2322      	movs	r3, #34	; 0x22
 80054e2:	6003      	str	r3, [r0, #0]
 80054e4:	2400      	movs	r4, #0
 80054e6:	2500      	movs	r5, #0
 80054e8:	e781      	b.n	80053ee <pow+0x4a>
 80054ea:	4d04      	ldr	r5, [pc, #16]	; (80054fc <pow+0x158>)
 80054ec:	2400      	movs	r4, #0
 80054ee:	e77e      	b.n	80053ee <pow+0x4a>
 80054f0:	20000009 	.word	0x20000009
 80054f4:	fff00000 	.word	0xfff00000
 80054f8:	7ff00000 	.word	0x7ff00000
 80054fc:	3ff00000 	.word	0x3ff00000

08005500 <logf>:
 8005500:	b508      	push	{r3, lr}
 8005502:	ed2d 8b02 	vpush	{d8}
 8005506:	eeb0 8a40 	vmov.f32	s16, s0
 800550a:	f000 fe07 	bl	800611c <__ieee754_logf>
 800550e:	4b14      	ldr	r3, [pc, #80]	; (8005560 <logf+0x60>)
 8005510:	f993 3000 	ldrsb.w	r3, [r3]
 8005514:	3301      	adds	r3, #1
 8005516:	d014      	beq.n	8005542 <logf+0x42>
 8005518:	eeb4 8a48 	vcmp.f32	s16, s16
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	d60f      	bvs.n	8005542 <logf+0x42>
 8005522:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552a:	dc0a      	bgt.n	8005542 <logf+0x42>
 800552c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005534:	d108      	bne.n	8005548 <logf+0x48>
 8005536:	f001 f817 	bl	8006568 <__errno>
 800553a:	2322      	movs	r3, #34	; 0x22
 800553c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005564 <logf+0x64>
 8005540:	6003      	str	r3, [r0, #0]
 8005542:	ecbd 8b02 	vpop	{d8}
 8005546:	bd08      	pop	{r3, pc}
 8005548:	f001 f80e 	bl	8006568 <__errno>
 800554c:	ecbd 8b02 	vpop	{d8}
 8005550:	2321      	movs	r3, #33	; 0x21
 8005552:	6003      	str	r3, [r0, #0]
 8005554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005558:	4803      	ldr	r0, [pc, #12]	; (8005568 <logf+0x68>)
 800555a:	f000 bfff 	b.w	800655c <nanf>
 800555e:	bf00      	nop
 8005560:	20000009 	.word	0x20000009
 8005564:	ff800000 	.word	0xff800000
 8005568:	0800b2d8 	.word	0x0800b2d8
 800556c:	00000000 	.word	0x00000000

08005570 <__ieee754_pow>:
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	ed2d 8b06 	vpush	{d8-d10}
 8005578:	b08d      	sub	sp, #52	; 0x34
 800557a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800557e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005582:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005586:	ea56 0100 	orrs.w	r1, r6, r0
 800558a:	ec53 2b10 	vmov	r2, r3, d0
 800558e:	f000 84d1 	beq.w	8005f34 <__ieee754_pow+0x9c4>
 8005592:	497f      	ldr	r1, [pc, #508]	; (8005790 <__ieee754_pow+0x220>)
 8005594:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005598:	428c      	cmp	r4, r1
 800559a:	ee10 8a10 	vmov	r8, s0
 800559e:	4699      	mov	r9, r3
 80055a0:	dc09      	bgt.n	80055b6 <__ieee754_pow+0x46>
 80055a2:	d103      	bne.n	80055ac <__ieee754_pow+0x3c>
 80055a4:	b97a      	cbnz	r2, 80055c6 <__ieee754_pow+0x56>
 80055a6:	42a6      	cmp	r6, r4
 80055a8:	dd02      	ble.n	80055b0 <__ieee754_pow+0x40>
 80055aa:	e00c      	b.n	80055c6 <__ieee754_pow+0x56>
 80055ac:	428e      	cmp	r6, r1
 80055ae:	dc02      	bgt.n	80055b6 <__ieee754_pow+0x46>
 80055b0:	428e      	cmp	r6, r1
 80055b2:	d110      	bne.n	80055d6 <__ieee754_pow+0x66>
 80055b4:	b178      	cbz	r0, 80055d6 <__ieee754_pow+0x66>
 80055b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80055ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80055be:	ea54 0308 	orrs.w	r3, r4, r8
 80055c2:	f000 84b7 	beq.w	8005f34 <__ieee754_pow+0x9c4>
 80055c6:	4873      	ldr	r0, [pc, #460]	; (8005794 <__ieee754_pow+0x224>)
 80055c8:	b00d      	add	sp, #52	; 0x34
 80055ca:	ecbd 8b06 	vpop	{d8-d10}
 80055ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d2:	f000 bea9 	b.w	8006328 <nan>
 80055d6:	f1b9 0f00 	cmp.w	r9, #0
 80055da:	da36      	bge.n	800564a <__ieee754_pow+0xda>
 80055dc:	496e      	ldr	r1, [pc, #440]	; (8005798 <__ieee754_pow+0x228>)
 80055de:	428e      	cmp	r6, r1
 80055e0:	dc51      	bgt.n	8005686 <__ieee754_pow+0x116>
 80055e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80055e6:	428e      	cmp	r6, r1
 80055e8:	f340 84af 	ble.w	8005f4a <__ieee754_pow+0x9da>
 80055ec:	1531      	asrs	r1, r6, #20
 80055ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80055f2:	2914      	cmp	r1, #20
 80055f4:	dd0f      	ble.n	8005616 <__ieee754_pow+0xa6>
 80055f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80055fa:	fa20 fc01 	lsr.w	ip, r0, r1
 80055fe:	fa0c f101 	lsl.w	r1, ip, r1
 8005602:	4281      	cmp	r1, r0
 8005604:	f040 84a1 	bne.w	8005f4a <__ieee754_pow+0x9da>
 8005608:	f00c 0c01 	and.w	ip, ip, #1
 800560c:	f1cc 0102 	rsb	r1, ip, #2
 8005610:	9100      	str	r1, [sp, #0]
 8005612:	b180      	cbz	r0, 8005636 <__ieee754_pow+0xc6>
 8005614:	e059      	b.n	80056ca <__ieee754_pow+0x15a>
 8005616:	2800      	cmp	r0, #0
 8005618:	d155      	bne.n	80056c6 <__ieee754_pow+0x156>
 800561a:	f1c1 0114 	rsb	r1, r1, #20
 800561e:	fa46 fc01 	asr.w	ip, r6, r1
 8005622:	fa0c f101 	lsl.w	r1, ip, r1
 8005626:	42b1      	cmp	r1, r6
 8005628:	f040 848c 	bne.w	8005f44 <__ieee754_pow+0x9d4>
 800562c:	f00c 0c01 	and.w	ip, ip, #1
 8005630:	f1cc 0102 	rsb	r1, ip, #2
 8005634:	9100      	str	r1, [sp, #0]
 8005636:	4959      	ldr	r1, [pc, #356]	; (800579c <__ieee754_pow+0x22c>)
 8005638:	428e      	cmp	r6, r1
 800563a:	d12d      	bne.n	8005698 <__ieee754_pow+0x128>
 800563c:	2f00      	cmp	r7, #0
 800563e:	da79      	bge.n	8005734 <__ieee754_pow+0x1c4>
 8005640:	4956      	ldr	r1, [pc, #344]	; (800579c <__ieee754_pow+0x22c>)
 8005642:	2000      	movs	r0, #0
 8005644:	f7fb f922 	bl	800088c <__aeabi_ddiv>
 8005648:	e016      	b.n	8005678 <__ieee754_pow+0x108>
 800564a:	2100      	movs	r1, #0
 800564c:	9100      	str	r1, [sp, #0]
 800564e:	2800      	cmp	r0, #0
 8005650:	d13b      	bne.n	80056ca <__ieee754_pow+0x15a>
 8005652:	494f      	ldr	r1, [pc, #316]	; (8005790 <__ieee754_pow+0x220>)
 8005654:	428e      	cmp	r6, r1
 8005656:	d1ee      	bne.n	8005636 <__ieee754_pow+0xc6>
 8005658:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800565c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005660:	ea53 0308 	orrs.w	r3, r3, r8
 8005664:	f000 8466 	beq.w	8005f34 <__ieee754_pow+0x9c4>
 8005668:	4b4d      	ldr	r3, [pc, #308]	; (80057a0 <__ieee754_pow+0x230>)
 800566a:	429c      	cmp	r4, r3
 800566c:	dd0d      	ble.n	800568a <__ieee754_pow+0x11a>
 800566e:	2f00      	cmp	r7, #0
 8005670:	f280 8464 	bge.w	8005f3c <__ieee754_pow+0x9cc>
 8005674:	2000      	movs	r0, #0
 8005676:	2100      	movs	r1, #0
 8005678:	ec41 0b10 	vmov	d0, r0, r1
 800567c:	b00d      	add	sp, #52	; 0x34
 800567e:	ecbd 8b06 	vpop	{d8-d10}
 8005682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005686:	2102      	movs	r1, #2
 8005688:	e7e0      	b.n	800564c <__ieee754_pow+0xdc>
 800568a:	2f00      	cmp	r7, #0
 800568c:	daf2      	bge.n	8005674 <__ieee754_pow+0x104>
 800568e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005692:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005696:	e7ef      	b.n	8005678 <__ieee754_pow+0x108>
 8005698:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800569c:	d104      	bne.n	80056a8 <__ieee754_pow+0x138>
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	f7fa ffc9 	bl	8000638 <__aeabi_dmul>
 80056a6:	e7e7      	b.n	8005678 <__ieee754_pow+0x108>
 80056a8:	493e      	ldr	r1, [pc, #248]	; (80057a4 <__ieee754_pow+0x234>)
 80056aa:	428f      	cmp	r7, r1
 80056ac:	d10d      	bne.n	80056ca <__ieee754_pow+0x15a>
 80056ae:	f1b9 0f00 	cmp.w	r9, #0
 80056b2:	db0a      	blt.n	80056ca <__ieee754_pow+0x15a>
 80056b4:	ec43 2b10 	vmov	d0, r2, r3
 80056b8:	b00d      	add	sp, #52	; 0x34
 80056ba:	ecbd 8b06 	vpop	{d8-d10}
 80056be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c2:	f000 bc77 	b.w	8005fb4 <__ieee754_sqrt>
 80056c6:	2100      	movs	r1, #0
 80056c8:	9100      	str	r1, [sp, #0]
 80056ca:	ec43 2b10 	vmov	d0, r2, r3
 80056ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056d2:	f000 fe13 	bl	80062fc <fabs>
 80056d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056da:	ec51 0b10 	vmov	r0, r1, d0
 80056de:	f1b8 0f00 	cmp.w	r8, #0
 80056e2:	d12a      	bne.n	800573a <__ieee754_pow+0x1ca>
 80056e4:	b12c      	cbz	r4, 80056f2 <__ieee754_pow+0x182>
 80056e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800579c <__ieee754_pow+0x22c>
 80056ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80056ee:	45e6      	cmp	lr, ip
 80056f0:	d123      	bne.n	800573a <__ieee754_pow+0x1ca>
 80056f2:	2f00      	cmp	r7, #0
 80056f4:	da05      	bge.n	8005702 <__ieee754_pow+0x192>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	2000      	movs	r0, #0
 80056fc:	4927      	ldr	r1, [pc, #156]	; (800579c <__ieee754_pow+0x22c>)
 80056fe:	f7fb f8c5 	bl	800088c <__aeabi_ddiv>
 8005702:	f1b9 0f00 	cmp.w	r9, #0
 8005706:	dab7      	bge.n	8005678 <__ieee754_pow+0x108>
 8005708:	9b00      	ldr	r3, [sp, #0]
 800570a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800570e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005712:	4323      	orrs	r3, r4
 8005714:	d108      	bne.n	8005728 <__ieee754_pow+0x1b8>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4610      	mov	r0, r2
 800571c:	4619      	mov	r1, r3
 800571e:	f7fa fdd3 	bl	80002c8 <__aeabi_dsub>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	e78d      	b.n	8005644 <__ieee754_pow+0xd4>
 8005728:	9b00      	ldr	r3, [sp, #0]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d1a4      	bne.n	8005678 <__ieee754_pow+0x108>
 800572e:	4602      	mov	r2, r0
 8005730:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	e79e      	b.n	8005678 <__ieee754_pow+0x108>
 800573a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800573e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005742:	950a      	str	r5, [sp, #40]	; 0x28
 8005744:	9d00      	ldr	r5, [sp, #0]
 8005746:	46ac      	mov	ip, r5
 8005748:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800574a:	ea5c 0505 	orrs.w	r5, ip, r5
 800574e:	d0e4      	beq.n	800571a <__ieee754_pow+0x1aa>
 8005750:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <__ieee754_pow+0x238>)
 8005752:	429e      	cmp	r6, r3
 8005754:	f340 80fc 	ble.w	8005950 <__ieee754_pow+0x3e0>
 8005758:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800575c:	429e      	cmp	r6, r3
 800575e:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <__ieee754_pow+0x230>)
 8005760:	dd07      	ble.n	8005772 <__ieee754_pow+0x202>
 8005762:	429c      	cmp	r4, r3
 8005764:	dc0a      	bgt.n	800577c <__ieee754_pow+0x20c>
 8005766:	2f00      	cmp	r7, #0
 8005768:	da84      	bge.n	8005674 <__ieee754_pow+0x104>
 800576a:	a307      	add	r3, pc, #28	; (adr r3, 8005788 <__ieee754_pow+0x218>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	e795      	b.n	800569e <__ieee754_pow+0x12e>
 8005772:	429c      	cmp	r4, r3
 8005774:	dbf7      	blt.n	8005766 <__ieee754_pow+0x1f6>
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <__ieee754_pow+0x22c>)
 8005778:	429c      	cmp	r4, r3
 800577a:	dd17      	ble.n	80057ac <__ieee754_pow+0x23c>
 800577c:	2f00      	cmp	r7, #0
 800577e:	dcf4      	bgt.n	800576a <__ieee754_pow+0x1fa>
 8005780:	e778      	b.n	8005674 <__ieee754_pow+0x104>
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	8800759c 	.word	0x8800759c
 800578c:	7e37e43c 	.word	0x7e37e43c
 8005790:	7ff00000 	.word	0x7ff00000
 8005794:	0800b2d8 	.word	0x0800b2d8
 8005798:	433fffff 	.word	0x433fffff
 800579c:	3ff00000 	.word	0x3ff00000
 80057a0:	3fefffff 	.word	0x3fefffff
 80057a4:	3fe00000 	.word	0x3fe00000
 80057a8:	41e00000 	.word	0x41e00000
 80057ac:	4b64      	ldr	r3, [pc, #400]	; (8005940 <__ieee754_pow+0x3d0>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	f7fa fd8a 	bl	80002c8 <__aeabi_dsub>
 80057b4:	a356      	add	r3, pc, #344	; (adr r3, 8005910 <__ieee754_pow+0x3a0>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	4604      	mov	r4, r0
 80057bc:	460d      	mov	r5, r1
 80057be:	f7fa ff3b 	bl	8000638 <__aeabi_dmul>
 80057c2:	a355      	add	r3, pc, #340	; (adr r3, 8005918 <__ieee754_pow+0x3a8>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	4606      	mov	r6, r0
 80057ca:	460f      	mov	r7, r1
 80057cc:	4620      	mov	r0, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa ff32 	bl	8000638 <__aeabi_dmul>
 80057d4:	4b5b      	ldr	r3, [pc, #364]	; (8005944 <__ieee754_pow+0x3d4>)
 80057d6:	4682      	mov	sl, r0
 80057d8:	468b      	mov	fp, r1
 80057da:	2200      	movs	r2, #0
 80057dc:	4620      	mov	r0, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	f7fa ff2a 	bl	8000638 <__aeabi_dmul>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	a14d      	add	r1, pc, #308	; (adr r1, 8005920 <__ieee754_pow+0x3b0>)
 80057ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ee:	f7fa fd6b 	bl	80002c8 <__aeabi_dsub>
 80057f2:	4622      	mov	r2, r4
 80057f4:	462b      	mov	r3, r5
 80057f6:	f7fa ff1f 	bl	8000638 <__aeabi_dmul>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	2000      	movs	r0, #0
 8005800:	4951      	ldr	r1, [pc, #324]	; (8005948 <__ieee754_pow+0x3d8>)
 8005802:	f7fa fd61 	bl	80002c8 <__aeabi_dsub>
 8005806:	4622      	mov	r2, r4
 8005808:	4680      	mov	r8, r0
 800580a:	4689      	mov	r9, r1
 800580c:	462b      	mov	r3, r5
 800580e:	4620      	mov	r0, r4
 8005810:	4629      	mov	r1, r5
 8005812:	f7fa ff11 	bl	8000638 <__aeabi_dmul>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	f7fa ff0b 	bl	8000638 <__aeabi_dmul>
 8005822:	a341      	add	r3, pc, #260	; (adr r3, 8005928 <__ieee754_pow+0x3b8>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa ff06 	bl	8000638 <__aeabi_dmul>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4650      	mov	r0, sl
 8005832:	4659      	mov	r1, fp
 8005834:	f7fa fd48 	bl	80002c8 <__aeabi_dsub>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4680      	mov	r8, r0
 800583e:	4689      	mov	r9, r1
 8005840:	4630      	mov	r0, r6
 8005842:	4639      	mov	r1, r7
 8005844:	f7fa fd42 	bl	80002cc <__adddf3>
 8005848:	2400      	movs	r4, #0
 800584a:	4632      	mov	r2, r6
 800584c:	463b      	mov	r3, r7
 800584e:	4620      	mov	r0, r4
 8005850:	460d      	mov	r5, r1
 8005852:	f7fa fd39 	bl	80002c8 <__aeabi_dsub>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4640      	mov	r0, r8
 800585c:	4649      	mov	r1, r9
 800585e:	f7fa fd33 	bl	80002c8 <__aeabi_dsub>
 8005862:	9b00      	ldr	r3, [sp, #0]
 8005864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005866:	3b01      	subs	r3, #1
 8005868:	4313      	orrs	r3, r2
 800586a:	4682      	mov	sl, r0
 800586c:	468b      	mov	fp, r1
 800586e:	f040 81f1 	bne.w	8005c54 <__ieee754_pow+0x6e4>
 8005872:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005930 <__ieee754_pow+0x3c0>
 8005876:	eeb0 8a47 	vmov.f32	s16, s14
 800587a:	eef0 8a67 	vmov.f32	s17, s15
 800587e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005882:	2600      	movs	r6, #0
 8005884:	4632      	mov	r2, r6
 8005886:	463b      	mov	r3, r7
 8005888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800588c:	f7fa fd1c 	bl	80002c8 <__aeabi_dsub>
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	f7fa fed0 	bl	8000638 <__aeabi_dmul>
 8005898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800589c:	4680      	mov	r8, r0
 800589e:	4689      	mov	r9, r1
 80058a0:	4650      	mov	r0, sl
 80058a2:	4659      	mov	r1, fp
 80058a4:	f7fa fec8 	bl	8000638 <__aeabi_dmul>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4640      	mov	r0, r8
 80058ae:	4649      	mov	r1, r9
 80058b0:	f7fa fd0c 	bl	80002cc <__adddf3>
 80058b4:	4632      	mov	r2, r6
 80058b6:	463b      	mov	r3, r7
 80058b8:	4680      	mov	r8, r0
 80058ba:	4689      	mov	r9, r1
 80058bc:	4620      	mov	r0, r4
 80058be:	4629      	mov	r1, r5
 80058c0:	f7fa feba 	bl	8000638 <__aeabi_dmul>
 80058c4:	460b      	mov	r3, r1
 80058c6:	4604      	mov	r4, r0
 80058c8:	460d      	mov	r5, r1
 80058ca:	4602      	mov	r2, r0
 80058cc:	4649      	mov	r1, r9
 80058ce:	4640      	mov	r0, r8
 80058d0:	f7fa fcfc 	bl	80002cc <__adddf3>
 80058d4:	4b1d      	ldr	r3, [pc, #116]	; (800594c <__ieee754_pow+0x3dc>)
 80058d6:	4299      	cmp	r1, r3
 80058d8:	ec45 4b19 	vmov	d9, r4, r5
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	468b      	mov	fp, r1
 80058e2:	f340 82fe 	ble.w	8005ee2 <__ieee754_pow+0x972>
 80058e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80058ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80058ee:	4303      	orrs	r3, r0
 80058f0:	f000 81f0 	beq.w	8005cd4 <__ieee754_pow+0x764>
 80058f4:	a310      	add	r3, pc, #64	; (adr r3, 8005938 <__ieee754_pow+0x3c8>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	ec51 0b18 	vmov	r0, r1, d8
 80058fe:	f7fa fe9b 	bl	8000638 <__aeabi_dmul>
 8005902:	a30d      	add	r3, pc, #52	; (adr r3, 8005938 <__ieee754_pow+0x3c8>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	e6cb      	b.n	80056a2 <__ieee754_pow+0x132>
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w
 8005910:	60000000 	.word	0x60000000
 8005914:	3ff71547 	.word	0x3ff71547
 8005918:	f85ddf44 	.word	0xf85ddf44
 800591c:	3e54ae0b 	.word	0x3e54ae0b
 8005920:	55555555 	.word	0x55555555
 8005924:	3fd55555 	.word	0x3fd55555
 8005928:	652b82fe 	.word	0x652b82fe
 800592c:	3ff71547 	.word	0x3ff71547
 8005930:	00000000 	.word	0x00000000
 8005934:	bff00000 	.word	0xbff00000
 8005938:	8800759c 	.word	0x8800759c
 800593c:	7e37e43c 	.word	0x7e37e43c
 8005940:	3ff00000 	.word	0x3ff00000
 8005944:	3fd00000 	.word	0x3fd00000
 8005948:	3fe00000 	.word	0x3fe00000
 800594c:	408fffff 	.word	0x408fffff
 8005950:	4bd7      	ldr	r3, [pc, #860]	; (8005cb0 <__ieee754_pow+0x740>)
 8005952:	ea03 0309 	and.w	r3, r3, r9
 8005956:	2200      	movs	r2, #0
 8005958:	b92b      	cbnz	r3, 8005966 <__ieee754_pow+0x3f6>
 800595a:	4bd6      	ldr	r3, [pc, #856]	; (8005cb4 <__ieee754_pow+0x744>)
 800595c:	f7fa fe6c 	bl	8000638 <__aeabi_dmul>
 8005960:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005964:	460c      	mov	r4, r1
 8005966:	1523      	asrs	r3, r4, #20
 8005968:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800596c:	4413      	add	r3, r2
 800596e:	9309      	str	r3, [sp, #36]	; 0x24
 8005970:	4bd1      	ldr	r3, [pc, #836]	; (8005cb8 <__ieee754_pow+0x748>)
 8005972:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005976:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800597a:	429c      	cmp	r4, r3
 800597c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005980:	dd08      	ble.n	8005994 <__ieee754_pow+0x424>
 8005982:	4bce      	ldr	r3, [pc, #824]	; (8005cbc <__ieee754_pow+0x74c>)
 8005984:	429c      	cmp	r4, r3
 8005986:	f340 8163 	ble.w	8005c50 <__ieee754_pow+0x6e0>
 800598a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598c:	3301      	adds	r3, #1
 800598e:	9309      	str	r3, [sp, #36]	; 0x24
 8005990:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005994:	2400      	movs	r4, #0
 8005996:	00e3      	lsls	r3, r4, #3
 8005998:	930b      	str	r3, [sp, #44]	; 0x2c
 800599a:	4bc9      	ldr	r3, [pc, #804]	; (8005cc0 <__ieee754_pow+0x750>)
 800599c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059a0:	ed93 7b00 	vldr	d7, [r3]
 80059a4:	4629      	mov	r1, r5
 80059a6:	ec53 2b17 	vmov	r2, r3, d7
 80059aa:	eeb0 8a47 	vmov.f32	s16, s14
 80059ae:	eef0 8a67 	vmov.f32	s17, s15
 80059b2:	4682      	mov	sl, r0
 80059b4:	f7fa fc88 	bl	80002c8 <__aeabi_dsub>
 80059b8:	4652      	mov	r2, sl
 80059ba:	4606      	mov	r6, r0
 80059bc:	460f      	mov	r7, r1
 80059be:	462b      	mov	r3, r5
 80059c0:	ec51 0b18 	vmov	r0, r1, d8
 80059c4:	f7fa fc82 	bl	80002cc <__adddf3>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	2000      	movs	r0, #0
 80059ce:	49bd      	ldr	r1, [pc, #756]	; (8005cc4 <__ieee754_pow+0x754>)
 80059d0:	f7fa ff5c 	bl	800088c <__aeabi_ddiv>
 80059d4:	ec41 0b19 	vmov	d9, r0, r1
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	f7fa fe2a 	bl	8000638 <__aeabi_dmul>
 80059e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059f0:	2300      	movs	r3, #0
 80059f2:	9304      	str	r3, [sp, #16]
 80059f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80059f8:	46ab      	mov	fp, r5
 80059fa:	106d      	asrs	r5, r5, #1
 80059fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005a00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005a04:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4614      	mov	r4, r2
 8005a10:	461d      	mov	r5, r3
 8005a12:	f7fa fe11 	bl	8000638 <__aeabi_dmul>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	f7fa fc53 	bl	80002c8 <__aeabi_dsub>
 8005a22:	ec53 2b18 	vmov	r2, r3, d8
 8005a26:	4606      	mov	r6, r0
 8005a28:	460f      	mov	r7, r1
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	f7fa fc4b 	bl	80002c8 <__aeabi_dsub>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4650      	mov	r0, sl
 8005a38:	4659      	mov	r1, fp
 8005a3a:	f7fa fc45 	bl	80002c8 <__aeabi_dsub>
 8005a3e:	4642      	mov	r2, r8
 8005a40:	464b      	mov	r3, r9
 8005a42:	f7fa fdf9 	bl	8000638 <__aeabi_dmul>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fa fc3b 	bl	80002c8 <__aeabi_dsub>
 8005a52:	ec53 2b19 	vmov	r2, r3, d9
 8005a56:	f7fa fdef 	bl	8000638 <__aeabi_dmul>
 8005a5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a5e:	ec41 0b18 	vmov	d8, r0, r1
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	f7fa fde7 	bl	8000638 <__aeabi_dmul>
 8005a6a:	a37d      	add	r3, pc, #500	; (adr r3, 8005c60 <__ieee754_pow+0x6f0>)
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	4604      	mov	r4, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	f7fa fde0 	bl	8000638 <__aeabi_dmul>
 8005a78:	a37b      	add	r3, pc, #492	; (adr r3, 8005c68 <__ieee754_pow+0x6f8>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fa fc25 	bl	80002cc <__adddf3>
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	f7fa fdd7 	bl	8000638 <__aeabi_dmul>
 8005a8a:	a379      	add	r3, pc, #484	; (adr r3, 8005c70 <__ieee754_pow+0x700>)
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f7fa fc1c 	bl	80002cc <__adddf3>
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	f7fa fdce 	bl	8000638 <__aeabi_dmul>
 8005a9c:	a376      	add	r3, pc, #472	; (adr r3, 8005c78 <__ieee754_pow+0x708>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f7fa fc13 	bl	80002cc <__adddf3>
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	f7fa fdc5 	bl	8000638 <__aeabi_dmul>
 8005aae:	a374      	add	r3, pc, #464	; (adr r3, 8005c80 <__ieee754_pow+0x710>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fa fc0a 	bl	80002cc <__adddf3>
 8005ab8:	4622      	mov	r2, r4
 8005aba:	462b      	mov	r3, r5
 8005abc:	f7fa fdbc 	bl	8000638 <__aeabi_dmul>
 8005ac0:	a371      	add	r3, pc, #452	; (adr r3, 8005c88 <__ieee754_pow+0x718>)
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f7fa fc01 	bl	80002cc <__adddf3>
 8005aca:	4622      	mov	r2, r4
 8005acc:	4606      	mov	r6, r0
 8005ace:	460f      	mov	r7, r1
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fa fdaf 	bl	8000638 <__aeabi_dmul>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fda9 	bl	8000638 <__aeabi_dmul>
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	4604      	mov	r4, r0
 8005aea:	460d      	mov	r5, r1
 8005aec:	464b      	mov	r3, r9
 8005aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af2:	f7fa fbeb 	bl	80002cc <__adddf3>
 8005af6:	ec53 2b18 	vmov	r2, r3, d8
 8005afa:	f7fa fd9d 	bl	8000638 <__aeabi_dmul>
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	f7fa fbe3 	bl	80002cc <__adddf3>
 8005b06:	4642      	mov	r2, r8
 8005b08:	4682      	mov	sl, r0
 8005b0a:	468b      	mov	fp, r1
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	f7fa fd91 	bl	8000638 <__aeabi_dmul>
 8005b16:	4b6c      	ldr	r3, [pc, #432]	; (8005cc8 <__ieee754_pow+0x758>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	460f      	mov	r7, r1
 8005b1e:	f7fa fbd5 	bl	80002cc <__adddf3>
 8005b22:	4652      	mov	r2, sl
 8005b24:	465b      	mov	r3, fp
 8005b26:	f7fa fbd1 	bl	80002cc <__adddf3>
 8005b2a:	9c04      	ldr	r4, [sp, #16]
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	4622      	mov	r2, r4
 8005b30:	460b      	mov	r3, r1
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f7fa fd7f 	bl	8000638 <__aeabi_dmul>
 8005b3a:	4b63      	ldr	r3, [pc, #396]	; (8005cc8 <__ieee754_pow+0x758>)
 8005b3c:	4680      	mov	r8, r0
 8005b3e:	4689      	mov	r9, r1
 8005b40:	2200      	movs	r2, #0
 8005b42:	4620      	mov	r0, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	f7fa fbbf 	bl	80002c8 <__aeabi_dsub>
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	f7fa fbbb 	bl	80002c8 <__aeabi_dsub>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4650      	mov	r0, sl
 8005b58:	4659      	mov	r1, fp
 8005b5a:	f7fa fbb5 	bl	80002c8 <__aeabi_dsub>
 8005b5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b62:	f7fa fd69 	bl	8000638 <__aeabi_dmul>
 8005b66:	4622      	mov	r2, r4
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	ec51 0b18 	vmov	r0, r1, d8
 8005b72:	f7fa fd61 	bl	8000638 <__aeabi_dmul>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	f7fa fba5 	bl	80002cc <__adddf3>
 8005b82:	4606      	mov	r6, r0
 8005b84:	460f      	mov	r7, r1
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	f7fa fb9d 	bl	80002cc <__adddf3>
 8005b92:	9c04      	ldr	r4, [sp, #16]
 8005b94:	a33e      	add	r3, pc, #248	; (adr r3, 8005c90 <__ieee754_pow+0x720>)
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	460d      	mov	r5, r1
 8005b9e:	f7fa fd4b 	bl	8000638 <__aeabi_dmul>
 8005ba2:	4642      	mov	r2, r8
 8005ba4:	ec41 0b18 	vmov	d8, r0, r1
 8005ba8:	464b      	mov	r3, r9
 8005baa:	4620      	mov	r0, r4
 8005bac:	4629      	mov	r1, r5
 8005bae:	f7fa fb8b 	bl	80002c8 <__aeabi_dsub>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	4639      	mov	r1, r7
 8005bba:	f7fa fb85 	bl	80002c8 <__aeabi_dsub>
 8005bbe:	a336      	add	r3, pc, #216	; (adr r3, 8005c98 <__ieee754_pow+0x728>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f7fa fd38 	bl	8000638 <__aeabi_dmul>
 8005bc8:	a335      	add	r3, pc, #212	; (adr r3, 8005ca0 <__ieee754_pow+0x730>)
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	4606      	mov	r6, r0
 8005bd0:	460f      	mov	r7, r1
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7fa fd2f 	bl	8000638 <__aeabi_dmul>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4630      	mov	r0, r6
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa fb73 	bl	80002cc <__adddf3>
 8005be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005be8:	4b38      	ldr	r3, [pc, #224]	; (8005ccc <__ieee754_pow+0x75c>)
 8005bea:	4413      	add	r3, r2
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	f7fa fb6c 	bl	80002cc <__adddf3>
 8005bf4:	4682      	mov	sl, r0
 8005bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bf8:	468b      	mov	fp, r1
 8005bfa:	f7fa fcb3 	bl	8000564 <__aeabi_i2d>
 8005bfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c00:	4b33      	ldr	r3, [pc, #204]	; (8005cd0 <__ieee754_pow+0x760>)
 8005c02:	4413      	add	r3, r2
 8005c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c08:	4606      	mov	r6, r0
 8005c0a:	460f      	mov	r7, r1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	465b      	mov	r3, fp
 8005c10:	ec51 0b18 	vmov	r0, r1, d8
 8005c14:	f7fa fb5a 	bl	80002cc <__adddf3>
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	f7fa fb56 	bl	80002cc <__adddf3>
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	f7fa fb52 	bl	80002cc <__adddf3>
 8005c28:	9c04      	ldr	r4, [sp, #16]
 8005c2a:	4632      	mov	r2, r6
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	4620      	mov	r0, r4
 8005c30:	460d      	mov	r5, r1
 8005c32:	f7fa fb49 	bl	80002c8 <__aeabi_dsub>
 8005c36:	4642      	mov	r2, r8
 8005c38:	464b      	mov	r3, r9
 8005c3a:	f7fa fb45 	bl	80002c8 <__aeabi_dsub>
 8005c3e:	ec53 2b18 	vmov	r2, r3, d8
 8005c42:	f7fa fb41 	bl	80002c8 <__aeabi_dsub>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	e606      	b.n	800585e <__ieee754_pow+0x2ee>
 8005c50:	2401      	movs	r4, #1
 8005c52:	e6a0      	b.n	8005996 <__ieee754_pow+0x426>
 8005c54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005ca8 <__ieee754_pow+0x738>
 8005c58:	e60d      	b.n	8005876 <__ieee754_pow+0x306>
 8005c5a:	bf00      	nop
 8005c5c:	f3af 8000 	nop.w
 8005c60:	4a454eef 	.word	0x4a454eef
 8005c64:	3fca7e28 	.word	0x3fca7e28
 8005c68:	93c9db65 	.word	0x93c9db65
 8005c6c:	3fcd864a 	.word	0x3fcd864a
 8005c70:	a91d4101 	.word	0xa91d4101
 8005c74:	3fd17460 	.word	0x3fd17460
 8005c78:	518f264d 	.word	0x518f264d
 8005c7c:	3fd55555 	.word	0x3fd55555
 8005c80:	db6fabff 	.word	0xdb6fabff
 8005c84:	3fdb6db6 	.word	0x3fdb6db6
 8005c88:	33333303 	.word	0x33333303
 8005c8c:	3fe33333 	.word	0x3fe33333
 8005c90:	e0000000 	.word	0xe0000000
 8005c94:	3feec709 	.word	0x3feec709
 8005c98:	dc3a03fd 	.word	0xdc3a03fd
 8005c9c:	3feec709 	.word	0x3feec709
 8005ca0:	145b01f5 	.word	0x145b01f5
 8005ca4:	be3e2fe0 	.word	0xbe3e2fe0
 8005ca8:	00000000 	.word	0x00000000
 8005cac:	3ff00000 	.word	0x3ff00000
 8005cb0:	7ff00000 	.word	0x7ff00000
 8005cb4:	43400000 	.word	0x43400000
 8005cb8:	0003988e 	.word	0x0003988e
 8005cbc:	000bb679 	.word	0x000bb679
 8005cc0:	0800ae48 	.word	0x0800ae48
 8005cc4:	3ff00000 	.word	0x3ff00000
 8005cc8:	40080000 	.word	0x40080000
 8005ccc:	0800ae68 	.word	0x0800ae68
 8005cd0:	0800ae58 	.word	0x0800ae58
 8005cd4:	a3b5      	add	r3, pc, #724	; (adr r3, 8005fac <__ieee754_pow+0xa3c>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	4640      	mov	r0, r8
 8005cdc:	4649      	mov	r1, r9
 8005cde:	f7fa faf5 	bl	80002cc <__adddf3>
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	ec41 0b1a 	vmov	d10, r0, r1
 8005ce8:	462b      	mov	r3, r5
 8005cea:	4630      	mov	r0, r6
 8005cec:	4639      	mov	r1, r7
 8005cee:	f7fa faeb 	bl	80002c8 <__aeabi_dsub>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	ec51 0b1a 	vmov	r0, r1, d10
 8005cfa:	f7fa ff2d 	bl	8000b58 <__aeabi_dcmpgt>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f47f adf8 	bne.w	80058f4 <__ieee754_pow+0x384>
 8005d04:	4aa4      	ldr	r2, [pc, #656]	; (8005f98 <__ieee754_pow+0xa28>)
 8005d06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f340 810b 	ble.w	8005f26 <__ieee754_pow+0x9b6>
 8005d10:	151b      	asrs	r3, r3, #20
 8005d12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005d16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005d1a:	fa4a f303 	asr.w	r3, sl, r3
 8005d1e:	445b      	add	r3, fp
 8005d20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005d24:	4e9d      	ldr	r6, [pc, #628]	; (8005f9c <__ieee754_pow+0xa2c>)
 8005d26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005d2a:	4116      	asrs	r6, r2
 8005d2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005d30:	2000      	movs	r0, #0
 8005d32:	ea23 0106 	bic.w	r1, r3, r6
 8005d36:	f1c2 0214 	rsb	r2, r2, #20
 8005d3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005d3e:	fa4a fa02 	asr.w	sl, sl, r2
 8005d42:	f1bb 0f00 	cmp.w	fp, #0
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	bfb8      	it	lt
 8005d50:	f1ca 0a00 	rsblt	sl, sl, #0
 8005d54:	f7fa fab8 	bl	80002c8 <__aeabi_dsub>
 8005d58:	ec41 0b19 	vmov	d9, r0, r1
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	ec51 0b19 	vmov	r0, r1, d9
 8005d64:	f7fa fab2 	bl	80002cc <__adddf3>
 8005d68:	2400      	movs	r4, #0
 8005d6a:	a379      	add	r3, pc, #484	; (adr r3, 8005f50 <__ieee754_pow+0x9e0>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	4620      	mov	r0, r4
 8005d72:	460d      	mov	r5, r1
 8005d74:	f7fa fc60 	bl	8000638 <__aeabi_dmul>
 8005d78:	ec53 2b19 	vmov	r2, r3, d9
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	460f      	mov	r7, r1
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fa faa0 	bl	80002c8 <__aeabi_dsub>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	4649      	mov	r1, r9
 8005d90:	f7fa fa9a 	bl	80002c8 <__aeabi_dsub>
 8005d94:	a370      	add	r3, pc, #448	; (adr r3, 8005f58 <__ieee754_pow+0x9e8>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f7fa fc4d 	bl	8000638 <__aeabi_dmul>
 8005d9e:	a370      	add	r3, pc, #448	; (adr r3, 8005f60 <__ieee754_pow+0x9f0>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	4680      	mov	r8, r0
 8005da6:	4689      	mov	r9, r1
 8005da8:	4620      	mov	r0, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	f7fa fc44 	bl	8000638 <__aeabi_dmul>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4640      	mov	r0, r8
 8005db6:	4649      	mov	r1, r9
 8005db8:	f7fa fa88 	bl	80002cc <__adddf3>
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fa80 	bl	80002cc <__adddf3>
 8005dcc:	4632      	mov	r2, r6
 8005dce:	463b      	mov	r3, r7
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	4689      	mov	r9, r1
 8005dd4:	f7fa fa78 	bl	80002c8 <__aeabi_dsub>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fa72 	bl	80002c8 <__aeabi_dsub>
 8005de4:	4642      	mov	r2, r8
 8005de6:	4606      	mov	r6, r0
 8005de8:	460f      	mov	r7, r1
 8005dea:	464b      	mov	r3, r9
 8005dec:	4640      	mov	r0, r8
 8005dee:	4649      	mov	r1, r9
 8005df0:	f7fa fc22 	bl	8000638 <__aeabi_dmul>
 8005df4:	a35c      	add	r3, pc, #368	; (adr r3, 8005f68 <__ieee754_pow+0x9f8>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	f7fa fc1b 	bl	8000638 <__aeabi_dmul>
 8005e02:	a35b      	add	r3, pc, #364	; (adr r3, 8005f70 <__ieee754_pow+0xa00>)
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f7fa fa5e 	bl	80002c8 <__aeabi_dsub>
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	462b      	mov	r3, r5
 8005e10:	f7fa fc12 	bl	8000638 <__aeabi_dmul>
 8005e14:	a358      	add	r3, pc, #352	; (adr r3, 8005f78 <__ieee754_pow+0xa08>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f7fa fa57 	bl	80002cc <__adddf3>
 8005e1e:	4622      	mov	r2, r4
 8005e20:	462b      	mov	r3, r5
 8005e22:	f7fa fc09 	bl	8000638 <__aeabi_dmul>
 8005e26:	a356      	add	r3, pc, #344	; (adr r3, 8005f80 <__ieee754_pow+0xa10>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa fa4c 	bl	80002c8 <__aeabi_dsub>
 8005e30:	4622      	mov	r2, r4
 8005e32:	462b      	mov	r3, r5
 8005e34:	f7fa fc00 	bl	8000638 <__aeabi_dmul>
 8005e38:	a353      	add	r3, pc, #332	; (adr r3, 8005f88 <__ieee754_pow+0xa18>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fa45 	bl	80002cc <__adddf3>
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	f7fa fbf7 	bl	8000638 <__aeabi_dmul>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4640      	mov	r0, r8
 8005e50:	4649      	mov	r1, r9
 8005e52:	f7fa fa39 	bl	80002c8 <__aeabi_dsub>
 8005e56:	4604      	mov	r4, r0
 8005e58:	460d      	mov	r5, r1
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4649      	mov	r1, r9
 8005e62:	f7fa fbe9 	bl	8000638 <__aeabi_dmul>
 8005e66:	2200      	movs	r2, #0
 8005e68:	ec41 0b19 	vmov	d9, r0, r1
 8005e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e70:	4620      	mov	r0, r4
 8005e72:	4629      	mov	r1, r5
 8005e74:	f7fa fa28 	bl	80002c8 <__aeabi_dsub>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	ec51 0b19 	vmov	r0, r1, d9
 8005e80:	f7fa fd04 	bl	800088c <__aeabi_ddiv>
 8005e84:	4632      	mov	r2, r6
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	4649      	mov	r1, r9
 8005e90:	f7fa fbd2 	bl	8000638 <__aeabi_dmul>
 8005e94:	4632      	mov	r2, r6
 8005e96:	463b      	mov	r3, r7
 8005e98:	f7fa fa18 	bl	80002cc <__adddf3>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa fa10 	bl	80002c8 <__aeabi_dsub>
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	f7fa fa0c 	bl	80002c8 <__aeabi_dsub>
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	493a      	ldr	r1, [pc, #232]	; (8005fa0 <__ieee754_pow+0xa30>)
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f7fa fa06 	bl	80002c8 <__aeabi_dsub>
 8005ebc:	e9cd 0100 	strd	r0, r1, [sp]
 8005ec0:	9b01      	ldr	r3, [sp, #4]
 8005ec2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eca:	da2f      	bge.n	8005f2c <__ieee754_pow+0x9bc>
 8005ecc:	4650      	mov	r0, sl
 8005ece:	ed9d 0b00 	vldr	d0, [sp]
 8005ed2:	f000 fabd 	bl	8006450 <scalbn>
 8005ed6:	ec51 0b10 	vmov	r0, r1, d0
 8005eda:	ec53 2b18 	vmov	r2, r3, d8
 8005ede:	f7ff bbe0 	b.w	80056a2 <__ieee754_pow+0x132>
 8005ee2:	4b30      	ldr	r3, [pc, #192]	; (8005fa4 <__ieee754_pow+0xa34>)
 8005ee4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005ee8:	429e      	cmp	r6, r3
 8005eea:	f77f af0b 	ble.w	8005d04 <__ieee754_pow+0x794>
 8005eee:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <__ieee754_pow+0xa38>)
 8005ef0:	440b      	add	r3, r1
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	d00b      	beq.n	8005f0e <__ieee754_pow+0x99e>
 8005ef6:	a326      	add	r3, pc, #152	; (adr r3, 8005f90 <__ieee754_pow+0xa20>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	ec51 0b18 	vmov	r0, r1, d8
 8005f00:	f7fa fb9a 	bl	8000638 <__aeabi_dmul>
 8005f04:	a322      	add	r3, pc, #136	; (adr r3, 8005f90 <__ieee754_pow+0xa20>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f7ff bbca 	b.w	80056a2 <__ieee754_pow+0x132>
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	f7fa f9d9 	bl	80002c8 <__aeabi_dsub>
 8005f16:	4642      	mov	r2, r8
 8005f18:	464b      	mov	r3, r9
 8005f1a:	f7fa fe13 	bl	8000b44 <__aeabi_dcmpge>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f43f aef0 	beq.w	8005d04 <__ieee754_pow+0x794>
 8005f24:	e7e7      	b.n	8005ef6 <__ieee754_pow+0x986>
 8005f26:	f04f 0a00 	mov.w	sl, #0
 8005f2a:	e717      	b.n	8005d5c <__ieee754_pow+0x7ec>
 8005f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f30:	4619      	mov	r1, r3
 8005f32:	e7d2      	b.n	8005eda <__ieee754_pow+0x96a>
 8005f34:	491a      	ldr	r1, [pc, #104]	; (8005fa0 <__ieee754_pow+0xa30>)
 8005f36:	2000      	movs	r0, #0
 8005f38:	f7ff bb9e 	b.w	8005678 <__ieee754_pow+0x108>
 8005f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f40:	f7ff bb9a 	b.w	8005678 <__ieee754_pow+0x108>
 8005f44:	9000      	str	r0, [sp, #0]
 8005f46:	f7ff bb76 	b.w	8005636 <__ieee754_pow+0xc6>
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f7ff bb60 	b.w	8005610 <__ieee754_pow+0xa0>
 8005f50:	00000000 	.word	0x00000000
 8005f54:	3fe62e43 	.word	0x3fe62e43
 8005f58:	fefa39ef 	.word	0xfefa39ef
 8005f5c:	3fe62e42 	.word	0x3fe62e42
 8005f60:	0ca86c39 	.word	0x0ca86c39
 8005f64:	be205c61 	.word	0xbe205c61
 8005f68:	72bea4d0 	.word	0x72bea4d0
 8005f6c:	3e663769 	.word	0x3e663769
 8005f70:	c5d26bf1 	.word	0xc5d26bf1
 8005f74:	3ebbbd41 	.word	0x3ebbbd41
 8005f78:	af25de2c 	.word	0xaf25de2c
 8005f7c:	3f11566a 	.word	0x3f11566a
 8005f80:	16bebd93 	.word	0x16bebd93
 8005f84:	3f66c16c 	.word	0x3f66c16c
 8005f88:	5555553e 	.word	0x5555553e
 8005f8c:	3fc55555 	.word	0x3fc55555
 8005f90:	c2f8f359 	.word	0xc2f8f359
 8005f94:	01a56e1f 	.word	0x01a56e1f
 8005f98:	3fe00000 	.word	0x3fe00000
 8005f9c:	000fffff 	.word	0x000fffff
 8005fa0:	3ff00000 	.word	0x3ff00000
 8005fa4:	4090cbff 	.word	0x4090cbff
 8005fa8:	3f6f3400 	.word	0x3f6f3400
 8005fac:	652b82fe 	.word	0x652b82fe
 8005fb0:	3c971547 	.word	0x3c971547

08005fb4 <__ieee754_sqrt>:
 8005fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb8:	ec55 4b10 	vmov	r4, r5, d0
 8005fbc:	4e56      	ldr	r6, [pc, #344]	; (8006118 <__ieee754_sqrt+0x164>)
 8005fbe:	43ae      	bics	r6, r5
 8005fc0:	ee10 0a10 	vmov	r0, s0
 8005fc4:	ee10 3a10 	vmov	r3, s0
 8005fc8:	4629      	mov	r1, r5
 8005fca:	462a      	mov	r2, r5
 8005fcc:	d110      	bne.n	8005ff0 <__ieee754_sqrt+0x3c>
 8005fce:	ee10 2a10 	vmov	r2, s0
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	f7fa fb30 	bl	8000638 <__aeabi_dmul>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4620      	mov	r0, r4
 8005fde:	4629      	mov	r1, r5
 8005fe0:	f7fa f974 	bl	80002cc <__adddf3>
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	ec45 4b10 	vmov	d0, r4, r5
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	2d00      	cmp	r5, #0
 8005ff2:	dc10      	bgt.n	8006016 <__ieee754_sqrt+0x62>
 8005ff4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005ff8:	4330      	orrs	r0, r6
 8005ffa:	d0f5      	beq.n	8005fe8 <__ieee754_sqrt+0x34>
 8005ffc:	b15d      	cbz	r5, 8006016 <__ieee754_sqrt+0x62>
 8005ffe:	ee10 2a10 	vmov	r2, s0
 8006002:	462b      	mov	r3, r5
 8006004:	ee10 0a10 	vmov	r0, s0
 8006008:	f7fa f95e 	bl	80002c8 <__aeabi_dsub>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	f7fa fc3c 	bl	800088c <__aeabi_ddiv>
 8006014:	e7e6      	b.n	8005fe4 <__ieee754_sqrt+0x30>
 8006016:	1509      	asrs	r1, r1, #20
 8006018:	d076      	beq.n	8006108 <__ieee754_sqrt+0x154>
 800601a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800601e:	07ce      	lsls	r6, r1, #31
 8006020:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006024:	bf5e      	ittt	pl
 8006026:	0fda      	lsrpl	r2, r3, #31
 8006028:	005b      	lslpl	r3, r3, #1
 800602a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800602e:	0fda      	lsrs	r2, r3, #31
 8006030:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006034:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006038:	2000      	movs	r0, #0
 800603a:	106d      	asrs	r5, r5, #1
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	f04f 0e16 	mov.w	lr, #22
 8006042:	4684      	mov	ip, r0
 8006044:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006048:	eb0c 0401 	add.w	r4, ip, r1
 800604c:	4294      	cmp	r4, r2
 800604e:	bfde      	ittt	le
 8006050:	1b12      	suble	r2, r2, r4
 8006052:	eb04 0c01 	addle.w	ip, r4, r1
 8006056:	1840      	addle	r0, r0, r1
 8006058:	0052      	lsls	r2, r2, #1
 800605a:	f1be 0e01 	subs.w	lr, lr, #1
 800605e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006062:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006066:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800606a:	d1ed      	bne.n	8006048 <__ieee754_sqrt+0x94>
 800606c:	4671      	mov	r1, lr
 800606e:	2720      	movs	r7, #32
 8006070:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006074:	4562      	cmp	r2, ip
 8006076:	eb04 060e 	add.w	r6, r4, lr
 800607a:	dc02      	bgt.n	8006082 <__ieee754_sqrt+0xce>
 800607c:	d113      	bne.n	80060a6 <__ieee754_sqrt+0xf2>
 800607e:	429e      	cmp	r6, r3
 8006080:	d811      	bhi.n	80060a6 <__ieee754_sqrt+0xf2>
 8006082:	2e00      	cmp	r6, #0
 8006084:	eb06 0e04 	add.w	lr, r6, r4
 8006088:	da43      	bge.n	8006112 <__ieee754_sqrt+0x15e>
 800608a:	f1be 0f00 	cmp.w	lr, #0
 800608e:	db40      	blt.n	8006112 <__ieee754_sqrt+0x15e>
 8006090:	f10c 0801 	add.w	r8, ip, #1
 8006094:	eba2 020c 	sub.w	r2, r2, ip
 8006098:	429e      	cmp	r6, r3
 800609a:	bf88      	it	hi
 800609c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80060a0:	1b9b      	subs	r3, r3, r6
 80060a2:	4421      	add	r1, r4
 80060a4:	46c4      	mov	ip, r8
 80060a6:	0052      	lsls	r2, r2, #1
 80060a8:	3f01      	subs	r7, #1
 80060aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80060ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80060b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060b6:	d1dd      	bne.n	8006074 <__ieee754_sqrt+0xc0>
 80060b8:	4313      	orrs	r3, r2
 80060ba:	d006      	beq.n	80060ca <__ieee754_sqrt+0x116>
 80060bc:	1c4c      	adds	r4, r1, #1
 80060be:	bf13      	iteet	ne
 80060c0:	3101      	addne	r1, #1
 80060c2:	3001      	addeq	r0, #1
 80060c4:	4639      	moveq	r1, r7
 80060c6:	f021 0101 	bicne.w	r1, r1, #1
 80060ca:	1043      	asrs	r3, r0, #1
 80060cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80060d0:	0849      	lsrs	r1, r1, #1
 80060d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80060d6:	07c2      	lsls	r2, r0, #31
 80060d8:	bf48      	it	mi
 80060da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80060de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80060e2:	460c      	mov	r4, r1
 80060e4:	463d      	mov	r5, r7
 80060e6:	e77f      	b.n	8005fe8 <__ieee754_sqrt+0x34>
 80060e8:	0ada      	lsrs	r2, r3, #11
 80060ea:	3815      	subs	r0, #21
 80060ec:	055b      	lsls	r3, r3, #21
 80060ee:	2a00      	cmp	r2, #0
 80060f0:	d0fa      	beq.n	80060e8 <__ieee754_sqrt+0x134>
 80060f2:	02d7      	lsls	r7, r2, #11
 80060f4:	d50a      	bpl.n	800610c <__ieee754_sqrt+0x158>
 80060f6:	f1c1 0420 	rsb	r4, r1, #32
 80060fa:	fa23 f404 	lsr.w	r4, r3, r4
 80060fe:	1e4d      	subs	r5, r1, #1
 8006100:	408b      	lsls	r3, r1
 8006102:	4322      	orrs	r2, r4
 8006104:	1b41      	subs	r1, r0, r5
 8006106:	e788      	b.n	800601a <__ieee754_sqrt+0x66>
 8006108:	4608      	mov	r0, r1
 800610a:	e7f0      	b.n	80060ee <__ieee754_sqrt+0x13a>
 800610c:	0052      	lsls	r2, r2, #1
 800610e:	3101      	adds	r1, #1
 8006110:	e7ef      	b.n	80060f2 <__ieee754_sqrt+0x13e>
 8006112:	46e0      	mov	r8, ip
 8006114:	e7be      	b.n	8006094 <__ieee754_sqrt+0xe0>
 8006116:	bf00      	nop
 8006118:	7ff00000 	.word	0x7ff00000

0800611c <__ieee754_logf>:
 800611c:	ee10 3a10 	vmov	r3, s0
 8006120:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006124:	d106      	bne.n	8006134 <__ieee754_logf+0x18>
 8006126:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80062bc <__ieee754_logf+0x1a0>
 800612a:	eddf 7a65 	vldr	s15, [pc, #404]	; 80062c0 <__ieee754_logf+0x1a4>
 800612e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006132:	4770      	bx	lr
 8006134:	2b00      	cmp	r3, #0
 8006136:	da02      	bge.n	800613e <__ieee754_logf+0x22>
 8006138:	ee30 7a40 	vsub.f32	s14, s0, s0
 800613c:	e7f5      	b.n	800612a <__ieee754_logf+0xe>
 800613e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006142:	db02      	blt.n	800614a <__ieee754_logf+0x2e>
 8006144:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006148:	4770      	bx	lr
 800614a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800614e:	bfb8      	it	lt
 8006150:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80062c4 <__ieee754_logf+0x1a8>
 8006154:	485c      	ldr	r0, [pc, #368]	; (80062c8 <__ieee754_logf+0x1ac>)
 8006156:	bfbe      	ittt	lt
 8006158:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800615c:	f06f 0118 	mvnlt.w	r1, #24
 8006160:	ee17 3a90 	vmovlt	r3, s15
 8006164:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8006168:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800616c:	4418      	add	r0, r3
 800616e:	bfa8      	it	ge
 8006170:	2100      	movge	r1, #0
 8006172:	3a7f      	subs	r2, #127	; 0x7f
 8006174:	440a      	add	r2, r1
 8006176:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800617a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800617e:	4319      	orrs	r1, r3
 8006180:	ee00 1a10 	vmov	s0, r1
 8006184:	4951      	ldr	r1, [pc, #324]	; (80062cc <__ieee754_logf+0x1b0>)
 8006186:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800618a:	f103 000f 	add.w	r0, r3, #15
 800618e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006192:	4001      	ands	r1, r0
 8006194:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006198:	bb89      	cbnz	r1, 80061fe <__ieee754_logf+0xe2>
 800619a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a2:	d10f      	bne.n	80061c4 <__ieee754_logf+0xa8>
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	f000 8085 	beq.w	80062b4 <__ieee754_logf+0x198>
 80061aa:	ee07 2a90 	vmov	s15, r2
 80061ae:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80062d0 <__ieee754_logf+0x1b4>
 80061b2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80062d4 <__ieee754_logf+0x1b8>
 80061b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80061be:	eea7 0a87 	vfma.f32	s0, s15, s14
 80061c2:	4770      	bx	lr
 80061c4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80062d8 <__ieee754_logf+0x1bc>
 80061c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80061cc:	eee0 7a66 	vfms.f32	s15, s0, s13
 80061d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80061d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061d8:	b912      	cbnz	r2, 80061e0 <__ieee754_logf+0xc4>
 80061da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061de:	4770      	bx	lr
 80061e0:	ee07 2a90 	vmov	s15, r2
 80061e4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80062d0 <__ieee754_logf+0x1b4>
 80061e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ec:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80061f0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80061f4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80062d4 <__ieee754_logf+0x1b8>
 80061f8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80061fc:	4770      	bx	lr
 80061fe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006202:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006206:	eddf 5a35 	vldr	s11, [pc, #212]	; 80062dc <__ieee754_logf+0x1c0>
 800620a:	eddf 4a35 	vldr	s9, [pc, #212]	; 80062e0 <__ieee754_logf+0x1c4>
 800620e:	4935      	ldr	r1, [pc, #212]	; (80062e4 <__ieee754_logf+0x1c8>)
 8006210:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8006214:	4419      	add	r1, r3
 8006216:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800621a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800621e:	430b      	orrs	r3, r1
 8006220:	2b00      	cmp	r3, #0
 8006222:	ee07 2a90 	vmov	s15, r2
 8006226:	ee26 5a06 	vmul.f32	s10, s12, s12
 800622a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800622e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8006232:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80062e8 <__ieee754_logf+0x1cc>
 8006236:	eee7 7a25 	vfma.f32	s15, s14, s11
 800623a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80062ec <__ieee754_logf+0x1d0>
 800623e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006242:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80062f0 <__ieee754_logf+0x1d4>
 8006246:	eee7 7a24 	vfma.f32	s15, s14, s9
 800624a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80062f4 <__ieee754_logf+0x1d8>
 800624e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8006252:	eddf 7a29 	vldr	s15, [pc, #164]	; 80062f8 <__ieee754_logf+0x1dc>
 8006256:	eee4 7a87 	vfma.f32	s15, s9, s14
 800625a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800625e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006262:	dd1c      	ble.n	800629e <__ieee754_logf+0x182>
 8006264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006268:	ee20 7a07 	vmul.f32	s14, s0, s14
 800626c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8006270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006274:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006278:	b922      	cbnz	r2, 8006284 <__ieee754_logf+0x168>
 800627a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800627e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006282:	4770      	bx	lr
 8006284:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80062d0 <__ieee754_logf+0x1b4>
 8006288:	eee6 7a86 	vfma.f32	s15, s13, s12
 800628c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006290:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006294:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80062d4 <__ieee754_logf+0x1b8>
 8006298:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800629c:	4770      	bx	lr
 800629e:	ee70 7a67 	vsub.f32	s15, s0, s15
 80062a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	d0e9      	beq.n	800627e <__ieee754_logf+0x162>
 80062aa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80062d0 <__ieee754_logf+0x1b4>
 80062ae:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80062b2:	e7ed      	b.n	8006290 <__ieee754_logf+0x174>
 80062b4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80062c0 <__ieee754_logf+0x1a4>
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	cc000000 	.word	0xcc000000
 80062c0:	00000000 	.word	0x00000000
 80062c4:	4c000000 	.word	0x4c000000
 80062c8:	004afb20 	.word	0x004afb20
 80062cc:	007ffff0 	.word	0x007ffff0
 80062d0:	3717f7d1 	.word	0x3717f7d1
 80062d4:	3f317180 	.word	0x3f317180
 80062d8:	3eaaaaab 	.word	0x3eaaaaab
 80062dc:	3e1cd04f 	.word	0x3e1cd04f
 80062e0:	3e178897 	.word	0x3e178897
 80062e4:	ffcf5c30 	.word	0xffcf5c30
 80062e8:	3e638e29 	.word	0x3e638e29
 80062ec:	3ecccccd 	.word	0x3ecccccd
 80062f0:	3e3a3325 	.word	0x3e3a3325
 80062f4:	3e924925 	.word	0x3e924925
 80062f8:	3f2aaaab 	.word	0x3f2aaaab

080062fc <fabs>:
 80062fc:	ec51 0b10 	vmov	r0, r1, d0
 8006300:	ee10 2a10 	vmov	r2, s0
 8006304:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006308:	ec43 2b10 	vmov	d0, r2, r3
 800630c:	4770      	bx	lr

0800630e <finite>:
 800630e:	b082      	sub	sp, #8
 8006310:	ed8d 0b00 	vstr	d0, [sp]
 8006314:	9801      	ldr	r0, [sp, #4]
 8006316:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800631a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800631e:	0fc0      	lsrs	r0, r0, #31
 8006320:	b002      	add	sp, #8
 8006322:	4770      	bx	lr
 8006324:	0000      	movs	r0, r0
	...

08006328 <nan>:
 8006328:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006330 <nan+0x8>
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	00000000 	.word	0x00000000
 8006334:	7ff80000 	.word	0x7ff80000

08006338 <rint>:
 8006338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800633a:	ec51 0b10 	vmov	r0, r1, d0
 800633e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006342:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006346:	2e13      	cmp	r6, #19
 8006348:	ee10 4a10 	vmov	r4, s0
 800634c:	460b      	mov	r3, r1
 800634e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006352:	dc58      	bgt.n	8006406 <rint+0xce>
 8006354:	2e00      	cmp	r6, #0
 8006356:	da2b      	bge.n	80063b0 <rint+0x78>
 8006358:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800635c:	4302      	orrs	r2, r0
 800635e:	d023      	beq.n	80063a8 <rint+0x70>
 8006360:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006364:	4302      	orrs	r2, r0
 8006366:	4254      	negs	r4, r2
 8006368:	4314      	orrs	r4, r2
 800636a:	0c4b      	lsrs	r3, r1, #17
 800636c:	0b24      	lsrs	r4, r4, #12
 800636e:	045b      	lsls	r3, r3, #17
 8006370:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006374:	ea44 0103 	orr.w	r1, r4, r3
 8006378:	4b32      	ldr	r3, [pc, #200]	; (8006444 <rint+0x10c>)
 800637a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800637e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 ff9f 	bl	80002cc <__adddf3>
 800638e:	e9cd 0100 	strd	r0, r1, [sp]
 8006392:	463b      	mov	r3, r7
 8006394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006398:	4632      	mov	r2, r6
 800639a:	f7f9 ff95 	bl	80002c8 <__aeabi_dsub>
 800639e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80063a6:	4639      	mov	r1, r7
 80063a8:	ec41 0b10 	vmov	d0, r0, r1
 80063ac:	b003      	add	sp, #12
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b0:	4a25      	ldr	r2, [pc, #148]	; (8006448 <rint+0x110>)
 80063b2:	4132      	asrs	r2, r6
 80063b4:	ea01 0702 	and.w	r7, r1, r2
 80063b8:	4307      	orrs	r7, r0
 80063ba:	d0f5      	beq.n	80063a8 <rint+0x70>
 80063bc:	0851      	lsrs	r1, r2, #1
 80063be:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80063c2:	4314      	orrs	r4, r2
 80063c4:	d00c      	beq.n	80063e0 <rint+0xa8>
 80063c6:	ea23 0201 	bic.w	r2, r3, r1
 80063ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063ce:	2e13      	cmp	r6, #19
 80063d0:	fa43 f606 	asr.w	r6, r3, r6
 80063d4:	bf0c      	ite	eq
 80063d6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80063da:	2400      	movne	r4, #0
 80063dc:	ea42 0306 	orr.w	r3, r2, r6
 80063e0:	4918      	ldr	r1, [pc, #96]	; (8006444 <rint+0x10c>)
 80063e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80063e6:	4622      	mov	r2, r4
 80063e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7f9 ff6c 	bl	80002cc <__adddf3>
 80063f4:	e9cd 0100 	strd	r0, r1, [sp]
 80063f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063fc:	4622      	mov	r2, r4
 80063fe:	462b      	mov	r3, r5
 8006400:	f7f9 ff62 	bl	80002c8 <__aeabi_dsub>
 8006404:	e7d0      	b.n	80063a8 <rint+0x70>
 8006406:	2e33      	cmp	r6, #51	; 0x33
 8006408:	dd07      	ble.n	800641a <rint+0xe2>
 800640a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800640e:	d1cb      	bne.n	80063a8 <rint+0x70>
 8006410:	ee10 2a10 	vmov	r2, s0
 8006414:	f7f9 ff5a 	bl	80002cc <__adddf3>
 8006418:	e7c6      	b.n	80063a8 <rint+0x70>
 800641a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800641e:	f04f 36ff 	mov.w	r6, #4294967295
 8006422:	40d6      	lsrs	r6, r2
 8006424:	4230      	tst	r0, r6
 8006426:	d0bf      	beq.n	80063a8 <rint+0x70>
 8006428:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800642c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006430:	bf1f      	itttt	ne
 8006432:	ea24 0101 	bicne.w	r1, r4, r1
 8006436:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800643a:	fa44 f202 	asrne.w	r2, r4, r2
 800643e:	ea41 0402 	orrne.w	r4, r1, r2
 8006442:	e7cd      	b.n	80063e0 <rint+0xa8>
 8006444:	0800ae78 	.word	0x0800ae78
 8006448:	000fffff 	.word	0x000fffff
 800644c:	00000000 	.word	0x00000000

08006450 <scalbn>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	ec55 4b10 	vmov	r4, r5, d0
 8006456:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800645a:	4606      	mov	r6, r0
 800645c:	462b      	mov	r3, r5
 800645e:	b99a      	cbnz	r2, 8006488 <scalbn+0x38>
 8006460:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006464:	4323      	orrs	r3, r4
 8006466:	d036      	beq.n	80064d6 <scalbn+0x86>
 8006468:	4b39      	ldr	r3, [pc, #228]	; (8006550 <scalbn+0x100>)
 800646a:	4629      	mov	r1, r5
 800646c:	ee10 0a10 	vmov	r0, s0
 8006470:	2200      	movs	r2, #0
 8006472:	f7fa f8e1 	bl	8000638 <__aeabi_dmul>
 8006476:	4b37      	ldr	r3, [pc, #220]	; (8006554 <scalbn+0x104>)
 8006478:	429e      	cmp	r6, r3
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	da10      	bge.n	80064a2 <scalbn+0x52>
 8006480:	a32b      	add	r3, pc, #172	; (adr r3, 8006530 <scalbn+0xe0>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	e03a      	b.n	80064fe <scalbn+0xae>
 8006488:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800648c:	428a      	cmp	r2, r1
 800648e:	d10c      	bne.n	80064aa <scalbn+0x5a>
 8006490:	ee10 2a10 	vmov	r2, s0
 8006494:	4620      	mov	r0, r4
 8006496:	4629      	mov	r1, r5
 8006498:	f7f9 ff18 	bl	80002cc <__adddf3>
 800649c:	4604      	mov	r4, r0
 800649e:	460d      	mov	r5, r1
 80064a0:	e019      	b.n	80064d6 <scalbn+0x86>
 80064a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80064a6:	460b      	mov	r3, r1
 80064a8:	3a36      	subs	r2, #54	; 0x36
 80064aa:	4432      	add	r2, r6
 80064ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064b0:	428a      	cmp	r2, r1
 80064b2:	dd08      	ble.n	80064c6 <scalbn+0x76>
 80064b4:	2d00      	cmp	r5, #0
 80064b6:	a120      	add	r1, pc, #128	; (adr r1, 8006538 <scalbn+0xe8>)
 80064b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064bc:	da1c      	bge.n	80064f8 <scalbn+0xa8>
 80064be:	a120      	add	r1, pc, #128	; (adr r1, 8006540 <scalbn+0xf0>)
 80064c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064c4:	e018      	b.n	80064f8 <scalbn+0xa8>
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	dd08      	ble.n	80064dc <scalbn+0x8c>
 80064ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064d6:	ec45 4b10 	vmov	d0, r4, r5
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80064e0:	da19      	bge.n	8006516 <scalbn+0xc6>
 80064e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80064e6:	429e      	cmp	r6, r3
 80064e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80064ec:	dd0a      	ble.n	8006504 <scalbn+0xb4>
 80064ee:	a112      	add	r1, pc, #72	; (adr r1, 8006538 <scalbn+0xe8>)
 80064f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e2      	bne.n	80064be <scalbn+0x6e>
 80064f8:	a30f      	add	r3, pc, #60	; (adr r3, 8006538 <scalbn+0xe8>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7fa f89b 	bl	8000638 <__aeabi_dmul>
 8006502:	e7cb      	b.n	800649c <scalbn+0x4c>
 8006504:	a10a      	add	r1, pc, #40	; (adr r1, 8006530 <scalbn+0xe0>)
 8006506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0b8      	beq.n	8006480 <scalbn+0x30>
 800650e:	a10e      	add	r1, pc, #56	; (adr r1, 8006548 <scalbn+0xf8>)
 8006510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006514:	e7b4      	b.n	8006480 <scalbn+0x30>
 8006516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800651a:	3236      	adds	r2, #54	; 0x36
 800651c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006524:	4620      	mov	r0, r4
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <scalbn+0x108>)
 8006528:	2200      	movs	r2, #0
 800652a:	e7e8      	b.n	80064fe <scalbn+0xae>
 800652c:	f3af 8000 	nop.w
 8006530:	c2f8f359 	.word	0xc2f8f359
 8006534:	01a56e1f 	.word	0x01a56e1f
 8006538:	8800759c 	.word	0x8800759c
 800653c:	7e37e43c 	.word	0x7e37e43c
 8006540:	8800759c 	.word	0x8800759c
 8006544:	fe37e43c 	.word	0xfe37e43c
 8006548:	c2f8f359 	.word	0xc2f8f359
 800654c:	81a56e1f 	.word	0x81a56e1f
 8006550:	43500000 	.word	0x43500000
 8006554:	ffff3cb0 	.word	0xffff3cb0
 8006558:	3c900000 	.word	0x3c900000

0800655c <nanf>:
 800655c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006564 <nanf+0x8>
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	7fc00000 	.word	0x7fc00000

08006568 <__errno>:
 8006568:	4b01      	ldr	r3, [pc, #4]	; (8006570 <__errno+0x8>)
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	2000000c 	.word	0x2000000c

08006574 <__libc_init_array>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	4d0d      	ldr	r5, [pc, #52]	; (80065ac <__libc_init_array+0x38>)
 8006578:	4c0d      	ldr	r4, [pc, #52]	; (80065b0 <__libc_init_array+0x3c>)
 800657a:	1b64      	subs	r4, r4, r5
 800657c:	10a4      	asrs	r4, r4, #2
 800657e:	2600      	movs	r6, #0
 8006580:	42a6      	cmp	r6, r4
 8006582:	d109      	bne.n	8006598 <__libc_init_array+0x24>
 8006584:	4d0b      	ldr	r5, [pc, #44]	; (80065b4 <__libc_init_array+0x40>)
 8006586:	4c0c      	ldr	r4, [pc, #48]	; (80065b8 <__libc_init_array+0x44>)
 8006588:	f004 fc36 	bl	800adf8 <_init>
 800658c:	1b64      	subs	r4, r4, r5
 800658e:	10a4      	asrs	r4, r4, #2
 8006590:	2600      	movs	r6, #0
 8006592:	42a6      	cmp	r6, r4
 8006594:	d105      	bne.n	80065a2 <__libc_init_array+0x2e>
 8006596:	bd70      	pop	{r4, r5, r6, pc}
 8006598:	f855 3b04 	ldr.w	r3, [r5], #4
 800659c:	4798      	blx	r3
 800659e:	3601      	adds	r6, #1
 80065a0:	e7ee      	b.n	8006580 <__libc_init_array+0xc>
 80065a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a6:	4798      	blx	r3
 80065a8:	3601      	adds	r6, #1
 80065aa:	e7f2      	b.n	8006592 <__libc_init_array+0x1e>
 80065ac:	0800b344 	.word	0x0800b344
 80065b0:	0800b344 	.word	0x0800b344
 80065b4:	0800b344 	.word	0x0800b344
 80065b8:	0800b34c 	.word	0x0800b34c

080065bc <memset>:
 80065bc:	4402      	add	r2, r0
 80065be:	4603      	mov	r3, r0
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d100      	bne.n	80065c6 <memset+0xa>
 80065c4:	4770      	bx	lr
 80065c6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ca:	e7f9      	b.n	80065c0 <memset+0x4>

080065cc <__cvt>:
 80065cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d0:	ec55 4b10 	vmov	r4, r5, d0
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	460e      	mov	r6, r1
 80065d8:	4619      	mov	r1, r3
 80065da:	462b      	mov	r3, r5
 80065dc:	bfbb      	ittet	lt
 80065de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065e2:	461d      	movlt	r5, r3
 80065e4:	2300      	movge	r3, #0
 80065e6:	232d      	movlt	r3, #45	; 0x2d
 80065e8:	700b      	strb	r3, [r1, #0]
 80065ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065f0:	4691      	mov	r9, r2
 80065f2:	f023 0820 	bic.w	r8, r3, #32
 80065f6:	bfbc      	itt	lt
 80065f8:	4622      	movlt	r2, r4
 80065fa:	4614      	movlt	r4, r2
 80065fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006600:	d005      	beq.n	800660e <__cvt+0x42>
 8006602:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006606:	d100      	bne.n	800660a <__cvt+0x3e>
 8006608:	3601      	adds	r6, #1
 800660a:	2102      	movs	r1, #2
 800660c:	e000      	b.n	8006610 <__cvt+0x44>
 800660e:	2103      	movs	r1, #3
 8006610:	ab03      	add	r3, sp, #12
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	ab02      	add	r3, sp, #8
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	ec45 4b10 	vmov	d0, r4, r5
 800661c:	4653      	mov	r3, sl
 800661e:	4632      	mov	r2, r6
 8006620:	f001 fdae 	bl	8008180 <_dtoa_r>
 8006624:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006628:	4607      	mov	r7, r0
 800662a:	d102      	bne.n	8006632 <__cvt+0x66>
 800662c:	f019 0f01 	tst.w	r9, #1
 8006630:	d022      	beq.n	8006678 <__cvt+0xac>
 8006632:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006636:	eb07 0906 	add.w	r9, r7, r6
 800663a:	d110      	bne.n	800665e <__cvt+0x92>
 800663c:	783b      	ldrb	r3, [r7, #0]
 800663e:	2b30      	cmp	r3, #48	; 0x30
 8006640:	d10a      	bne.n	8006658 <__cvt+0x8c>
 8006642:	2200      	movs	r2, #0
 8006644:	2300      	movs	r3, #0
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7fa fa5d 	bl	8000b08 <__aeabi_dcmpeq>
 800664e:	b918      	cbnz	r0, 8006658 <__cvt+0x8c>
 8006650:	f1c6 0601 	rsb	r6, r6, #1
 8006654:	f8ca 6000 	str.w	r6, [sl]
 8006658:	f8da 3000 	ldr.w	r3, [sl]
 800665c:	4499      	add	r9, r3
 800665e:	2200      	movs	r2, #0
 8006660:	2300      	movs	r3, #0
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	f7fa fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 800666a:	b108      	cbz	r0, 8006670 <__cvt+0xa4>
 800666c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006670:	2230      	movs	r2, #48	; 0x30
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	454b      	cmp	r3, r9
 8006676:	d307      	bcc.n	8006688 <__cvt+0xbc>
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800667c:	1bdb      	subs	r3, r3, r7
 800667e:	4638      	mov	r0, r7
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	b004      	add	sp, #16
 8006684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006688:	1c59      	adds	r1, r3, #1
 800668a:	9103      	str	r1, [sp, #12]
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e7f0      	b.n	8006672 <__cvt+0xa6>

08006690 <__exponent>:
 8006690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006692:	4603      	mov	r3, r0
 8006694:	2900      	cmp	r1, #0
 8006696:	bfb8      	it	lt
 8006698:	4249      	neglt	r1, r1
 800669a:	f803 2b02 	strb.w	r2, [r3], #2
 800669e:	bfb4      	ite	lt
 80066a0:	222d      	movlt	r2, #45	; 0x2d
 80066a2:	222b      	movge	r2, #43	; 0x2b
 80066a4:	2909      	cmp	r1, #9
 80066a6:	7042      	strb	r2, [r0, #1]
 80066a8:	dd2a      	ble.n	8006700 <__exponent+0x70>
 80066aa:	f10d 0407 	add.w	r4, sp, #7
 80066ae:	46a4      	mov	ip, r4
 80066b0:	270a      	movs	r7, #10
 80066b2:	46a6      	mov	lr, r4
 80066b4:	460a      	mov	r2, r1
 80066b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80066ba:	fb07 1516 	mls	r5, r7, r6, r1
 80066be:	3530      	adds	r5, #48	; 0x30
 80066c0:	2a63      	cmp	r2, #99	; 0x63
 80066c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80066c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066ca:	4631      	mov	r1, r6
 80066cc:	dcf1      	bgt.n	80066b2 <__exponent+0x22>
 80066ce:	3130      	adds	r1, #48	; 0x30
 80066d0:	f1ae 0502 	sub.w	r5, lr, #2
 80066d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80066d8:	1c44      	adds	r4, r0, #1
 80066da:	4629      	mov	r1, r5
 80066dc:	4561      	cmp	r1, ip
 80066de:	d30a      	bcc.n	80066f6 <__exponent+0x66>
 80066e0:	f10d 0209 	add.w	r2, sp, #9
 80066e4:	eba2 020e 	sub.w	r2, r2, lr
 80066e8:	4565      	cmp	r5, ip
 80066ea:	bf88      	it	hi
 80066ec:	2200      	movhi	r2, #0
 80066ee:	4413      	add	r3, r2
 80066f0:	1a18      	subs	r0, r3, r0
 80066f2:	b003      	add	sp, #12
 80066f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066fe:	e7ed      	b.n	80066dc <__exponent+0x4c>
 8006700:	2330      	movs	r3, #48	; 0x30
 8006702:	3130      	adds	r1, #48	; 0x30
 8006704:	7083      	strb	r3, [r0, #2]
 8006706:	70c1      	strb	r1, [r0, #3]
 8006708:	1d03      	adds	r3, r0, #4
 800670a:	e7f1      	b.n	80066f0 <__exponent+0x60>

0800670c <_printf_float>:
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	ed2d 8b02 	vpush	{d8}
 8006714:	b08d      	sub	sp, #52	; 0x34
 8006716:	460c      	mov	r4, r1
 8006718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800671c:	4616      	mov	r6, r2
 800671e:	461f      	mov	r7, r3
 8006720:	4605      	mov	r5, r0
 8006722:	f002 fe89 	bl	8009438 <_localeconv_r>
 8006726:	f8d0 a000 	ldr.w	sl, [r0]
 800672a:	4650      	mov	r0, sl
 800672c:	f7f9 fd70 	bl	8000210 <strlen>
 8006730:	2300      	movs	r3, #0
 8006732:	930a      	str	r3, [sp, #40]	; 0x28
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	9305      	str	r3, [sp, #20]
 8006738:	f8d8 3000 	ldr.w	r3, [r8]
 800673c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006740:	3307      	adds	r3, #7
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	f103 0208 	add.w	r2, r3, #8
 800674a:	f8c8 2000 	str.w	r2, [r8]
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006756:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800675a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	f8cd 8018 	str.w	r8, [sp, #24]
 8006764:	ee08 0a10 	vmov	s16, r0
 8006768:	4b9f      	ldr	r3, [pc, #636]	; (80069e8 <_printf_float+0x2dc>)
 800676a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800676e:	f04f 32ff 	mov.w	r2, #4294967295
 8006772:	f7fa f9fb 	bl	8000b6c <__aeabi_dcmpun>
 8006776:	bb88      	cbnz	r0, 80067dc <_printf_float+0xd0>
 8006778:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677c:	4b9a      	ldr	r3, [pc, #616]	; (80069e8 <_printf_float+0x2dc>)
 800677e:	f04f 32ff 	mov.w	r2, #4294967295
 8006782:	f7fa f9d5 	bl	8000b30 <__aeabi_dcmple>
 8006786:	bb48      	cbnz	r0, 80067dc <_printf_float+0xd0>
 8006788:	2200      	movs	r2, #0
 800678a:	2300      	movs	r3, #0
 800678c:	4640      	mov	r0, r8
 800678e:	4649      	mov	r1, r9
 8006790:	f7fa f9c4 	bl	8000b1c <__aeabi_dcmplt>
 8006794:	b110      	cbz	r0, 800679c <_printf_float+0x90>
 8006796:	232d      	movs	r3, #45	; 0x2d
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679c:	4b93      	ldr	r3, [pc, #588]	; (80069ec <_printf_float+0x2e0>)
 800679e:	4894      	ldr	r0, [pc, #592]	; (80069f0 <_printf_float+0x2e4>)
 80067a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067a4:	bf94      	ite	ls
 80067a6:	4698      	movls	r8, r3
 80067a8:	4680      	movhi	r8, r0
 80067aa:	2303      	movs	r3, #3
 80067ac:	6123      	str	r3, [r4, #16]
 80067ae:	9b05      	ldr	r3, [sp, #20]
 80067b0:	f023 0204 	bic.w	r2, r3, #4
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	f04f 0900 	mov.w	r9, #0
 80067ba:	9700      	str	r7, [sp, #0]
 80067bc:	4633      	mov	r3, r6
 80067be:	aa0b      	add	r2, sp, #44	; 0x2c
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f9d8 	bl	8006b78 <_printf_common>
 80067c8:	3001      	adds	r0, #1
 80067ca:	f040 8090 	bne.w	80068ee <_printf_float+0x1e2>
 80067ce:	f04f 30ff 	mov.w	r0, #4294967295
 80067d2:	b00d      	add	sp, #52	; 0x34
 80067d4:	ecbd 8b02 	vpop	{d8}
 80067d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067dc:	4642      	mov	r2, r8
 80067de:	464b      	mov	r3, r9
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7fa f9c2 	bl	8000b6c <__aeabi_dcmpun>
 80067e8:	b140      	cbz	r0, 80067fc <_printf_float+0xf0>
 80067ea:	464b      	mov	r3, r9
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bfbc      	itt	lt
 80067f0:	232d      	movlt	r3, #45	; 0x2d
 80067f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067f6:	487f      	ldr	r0, [pc, #508]	; (80069f4 <_printf_float+0x2e8>)
 80067f8:	4b7f      	ldr	r3, [pc, #508]	; (80069f8 <_printf_float+0x2ec>)
 80067fa:	e7d1      	b.n	80067a0 <_printf_float+0x94>
 80067fc:	6863      	ldr	r3, [r4, #4]
 80067fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006802:	9206      	str	r2, [sp, #24]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	d13f      	bne.n	8006888 <_printf_float+0x17c>
 8006808:	2306      	movs	r3, #6
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	9b05      	ldr	r3, [sp, #20]
 800680e:	6861      	ldr	r1, [r4, #4]
 8006810:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006814:	2300      	movs	r3, #0
 8006816:	9303      	str	r3, [sp, #12]
 8006818:	ab0a      	add	r3, sp, #40	; 0x28
 800681a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800681e:	ab09      	add	r3, sp, #36	; 0x24
 8006820:	ec49 8b10 	vmov	d0, r8, r9
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800682c:	4628      	mov	r0, r5
 800682e:	f7ff fecd 	bl	80065cc <__cvt>
 8006832:	9b06      	ldr	r3, [sp, #24]
 8006834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006836:	2b47      	cmp	r3, #71	; 0x47
 8006838:	4680      	mov	r8, r0
 800683a:	d108      	bne.n	800684e <_printf_float+0x142>
 800683c:	1cc8      	adds	r0, r1, #3
 800683e:	db02      	blt.n	8006846 <_printf_float+0x13a>
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	4299      	cmp	r1, r3
 8006844:	dd41      	ble.n	80068ca <_printf_float+0x1be>
 8006846:	f1ab 0b02 	sub.w	fp, fp, #2
 800684a:	fa5f fb8b 	uxtb.w	fp, fp
 800684e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006852:	d820      	bhi.n	8006896 <_printf_float+0x18a>
 8006854:	3901      	subs	r1, #1
 8006856:	465a      	mov	r2, fp
 8006858:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800685c:	9109      	str	r1, [sp, #36]	; 0x24
 800685e:	f7ff ff17 	bl	8006690 <__exponent>
 8006862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006864:	1813      	adds	r3, r2, r0
 8006866:	2a01      	cmp	r2, #1
 8006868:	4681      	mov	r9, r0
 800686a:	6123      	str	r3, [r4, #16]
 800686c:	dc02      	bgt.n	8006874 <_printf_float+0x168>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	07d2      	lsls	r2, r2, #31
 8006872:	d501      	bpl.n	8006878 <_printf_float+0x16c>
 8006874:	3301      	adds	r3, #1
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800687c:	2b00      	cmp	r3, #0
 800687e:	d09c      	beq.n	80067ba <_printf_float+0xae>
 8006880:	232d      	movs	r3, #45	; 0x2d
 8006882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006886:	e798      	b.n	80067ba <_printf_float+0xae>
 8006888:	9a06      	ldr	r2, [sp, #24]
 800688a:	2a47      	cmp	r2, #71	; 0x47
 800688c:	d1be      	bne.n	800680c <_printf_float+0x100>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1bc      	bne.n	800680c <_printf_float+0x100>
 8006892:	2301      	movs	r3, #1
 8006894:	e7b9      	b.n	800680a <_printf_float+0xfe>
 8006896:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800689a:	d118      	bne.n	80068ce <_printf_float+0x1c2>
 800689c:	2900      	cmp	r1, #0
 800689e:	6863      	ldr	r3, [r4, #4]
 80068a0:	dd0b      	ble.n	80068ba <_printf_float+0x1ae>
 80068a2:	6121      	str	r1, [r4, #16]
 80068a4:	b913      	cbnz	r3, 80068ac <_printf_float+0x1a0>
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	07d0      	lsls	r0, r2, #31
 80068aa:	d502      	bpl.n	80068b2 <_printf_float+0x1a6>
 80068ac:	3301      	adds	r3, #1
 80068ae:	440b      	add	r3, r1
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80068b4:	f04f 0900 	mov.w	r9, #0
 80068b8:	e7de      	b.n	8006878 <_printf_float+0x16c>
 80068ba:	b913      	cbnz	r3, 80068c2 <_printf_float+0x1b6>
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	07d2      	lsls	r2, r2, #31
 80068c0:	d501      	bpl.n	80068c6 <_printf_float+0x1ba>
 80068c2:	3302      	adds	r3, #2
 80068c4:	e7f4      	b.n	80068b0 <_printf_float+0x1a4>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e7f2      	b.n	80068b0 <_printf_float+0x1a4>
 80068ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	4299      	cmp	r1, r3
 80068d2:	db05      	blt.n	80068e0 <_printf_float+0x1d4>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	6121      	str	r1, [r4, #16]
 80068d8:	07d8      	lsls	r0, r3, #31
 80068da:	d5ea      	bpl.n	80068b2 <_printf_float+0x1a6>
 80068dc:	1c4b      	adds	r3, r1, #1
 80068de:	e7e7      	b.n	80068b0 <_printf_float+0x1a4>
 80068e0:	2900      	cmp	r1, #0
 80068e2:	bfd4      	ite	le
 80068e4:	f1c1 0202 	rsble	r2, r1, #2
 80068e8:	2201      	movgt	r2, #1
 80068ea:	4413      	add	r3, r2
 80068ec:	e7e0      	b.n	80068b0 <_printf_float+0x1a4>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	055a      	lsls	r2, r3, #21
 80068f2:	d407      	bmi.n	8006904 <_printf_float+0x1f8>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	4642      	mov	r2, r8
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	d12c      	bne.n	800695c <_printf_float+0x250>
 8006902:	e764      	b.n	80067ce <_printf_float+0xc2>
 8006904:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006908:	f240 80e0 	bls.w	8006acc <_printf_float+0x3c0>
 800690c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	f7fa f8f8 	bl	8000b08 <__aeabi_dcmpeq>
 8006918:	2800      	cmp	r0, #0
 800691a:	d034      	beq.n	8006986 <_printf_float+0x27a>
 800691c:	4a37      	ldr	r2, [pc, #220]	; (80069fc <_printf_float+0x2f0>)
 800691e:	2301      	movs	r3, #1
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f af51 	beq.w	80067ce <_printf_float+0xc2>
 800692c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006930:	429a      	cmp	r2, r3
 8006932:	db02      	blt.n	800693a <_printf_float+0x22e>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	07d8      	lsls	r0, r3, #31
 8006938:	d510      	bpl.n	800695c <_printf_float+0x250>
 800693a:	ee18 3a10 	vmov	r3, s16
 800693e:	4652      	mov	r2, sl
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f af41 	beq.w	80067ce <_printf_float+0xc2>
 800694c:	f04f 0800 	mov.w	r8, #0
 8006950:	f104 091a 	add.w	r9, r4, #26
 8006954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006956:	3b01      	subs	r3, #1
 8006958:	4543      	cmp	r3, r8
 800695a:	dc09      	bgt.n	8006970 <_printf_float+0x264>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	079b      	lsls	r3, r3, #30
 8006960:	f100 8105 	bmi.w	8006b6e <_printf_float+0x462>
 8006964:	68e0      	ldr	r0, [r4, #12]
 8006966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006968:	4298      	cmp	r0, r3
 800696a:	bfb8      	it	lt
 800696c:	4618      	movlt	r0, r3
 800696e:	e730      	b.n	80067d2 <_printf_float+0xc6>
 8006970:	2301      	movs	r3, #1
 8006972:	464a      	mov	r2, r9
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	f43f af27 	beq.w	80067ce <_printf_float+0xc2>
 8006980:	f108 0801 	add.w	r8, r8, #1
 8006984:	e7e6      	b.n	8006954 <_printf_float+0x248>
 8006986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	dc39      	bgt.n	8006a00 <_printf_float+0x2f4>
 800698c:	4a1b      	ldr	r2, [pc, #108]	; (80069fc <_printf_float+0x2f0>)
 800698e:	2301      	movs	r3, #1
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	f43f af19 	beq.w	80067ce <_printf_float+0xc2>
 800699c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a0:	4313      	orrs	r3, r2
 80069a2:	d102      	bne.n	80069aa <_printf_float+0x29e>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	07d9      	lsls	r1, r3, #31
 80069a8:	d5d8      	bpl.n	800695c <_printf_float+0x250>
 80069aa:	ee18 3a10 	vmov	r3, s16
 80069ae:	4652      	mov	r2, sl
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	f43f af09 	beq.w	80067ce <_printf_float+0xc2>
 80069bc:	f04f 0900 	mov.w	r9, #0
 80069c0:	f104 0a1a 	add.w	sl, r4, #26
 80069c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c6:	425b      	negs	r3, r3
 80069c8:	454b      	cmp	r3, r9
 80069ca:	dc01      	bgt.n	80069d0 <_printf_float+0x2c4>
 80069cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ce:	e792      	b.n	80068f6 <_printf_float+0x1ea>
 80069d0:	2301      	movs	r3, #1
 80069d2:	4652      	mov	r2, sl
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f aef7 	beq.w	80067ce <_printf_float+0xc2>
 80069e0:	f109 0901 	add.w	r9, r9, #1
 80069e4:	e7ee      	b.n	80069c4 <_printf_float+0x2b8>
 80069e6:	bf00      	nop
 80069e8:	7fefffff 	.word	0x7fefffff
 80069ec:	0800ae8c 	.word	0x0800ae8c
 80069f0:	0800ae90 	.word	0x0800ae90
 80069f4:	0800ae98 	.word	0x0800ae98
 80069f8:	0800ae94 	.word	0x0800ae94
 80069fc:	0800ae9c 	.word	0x0800ae9c
 8006a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a04:	429a      	cmp	r2, r3
 8006a06:	bfa8      	it	ge
 8006a08:	461a      	movge	r2, r3
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	4691      	mov	r9, r2
 8006a0e:	dc37      	bgt.n	8006a80 <_printf_float+0x374>
 8006a10:	f04f 0b00 	mov.w	fp, #0
 8006a14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a18:	f104 021a 	add.w	r2, r4, #26
 8006a1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a1e:	9305      	str	r3, [sp, #20]
 8006a20:	eba3 0309 	sub.w	r3, r3, r9
 8006a24:	455b      	cmp	r3, fp
 8006a26:	dc33      	bgt.n	8006a90 <_printf_float+0x384>
 8006a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	db3b      	blt.n	8006aa8 <_printf_float+0x39c>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	07da      	lsls	r2, r3, #31
 8006a34:	d438      	bmi.n	8006aa8 <_printf_float+0x39c>
 8006a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a38:	9b05      	ldr	r3, [sp, #20]
 8006a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	eba2 0901 	sub.w	r9, r2, r1
 8006a42:	4599      	cmp	r9, r3
 8006a44:	bfa8      	it	ge
 8006a46:	4699      	movge	r9, r3
 8006a48:	f1b9 0f00 	cmp.w	r9, #0
 8006a4c:	dc35      	bgt.n	8006aba <_printf_float+0x3ae>
 8006a4e:	f04f 0800 	mov.w	r8, #0
 8006a52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a56:	f104 0a1a 	add.w	sl, r4, #26
 8006a5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	eba3 0309 	sub.w	r3, r3, r9
 8006a64:	4543      	cmp	r3, r8
 8006a66:	f77f af79 	ble.w	800695c <_printf_float+0x250>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4652      	mov	r2, sl
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f aeaa 	beq.w	80067ce <_printf_float+0xc2>
 8006a7a:	f108 0801 	add.w	r8, r8, #1
 8006a7e:	e7ec      	b.n	8006a5a <_printf_float+0x34e>
 8006a80:	4613      	mov	r3, r2
 8006a82:	4631      	mov	r1, r6
 8006a84:	4642      	mov	r2, r8
 8006a86:	4628      	mov	r0, r5
 8006a88:	47b8      	blx	r7
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d1c0      	bne.n	8006a10 <_printf_float+0x304>
 8006a8e:	e69e      	b.n	80067ce <_printf_float+0xc2>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	9205      	str	r2, [sp, #20]
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f43f ae97 	beq.w	80067ce <_printf_float+0xc2>
 8006aa0:	9a05      	ldr	r2, [sp, #20]
 8006aa2:	f10b 0b01 	add.w	fp, fp, #1
 8006aa6:	e7b9      	b.n	8006a1c <_printf_float+0x310>
 8006aa8:	ee18 3a10 	vmov	r3, s16
 8006aac:	4652      	mov	r2, sl
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d1be      	bne.n	8006a36 <_printf_float+0x32a>
 8006ab8:	e689      	b.n	80067ce <_printf_float+0xc2>
 8006aba:	9a05      	ldr	r2, [sp, #20]
 8006abc:	464b      	mov	r3, r9
 8006abe:	4442      	add	r2, r8
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b8      	blx	r7
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d1c1      	bne.n	8006a4e <_printf_float+0x342>
 8006aca:	e680      	b.n	80067ce <_printf_float+0xc2>
 8006acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ace:	2a01      	cmp	r2, #1
 8006ad0:	dc01      	bgt.n	8006ad6 <_printf_float+0x3ca>
 8006ad2:	07db      	lsls	r3, r3, #31
 8006ad4:	d538      	bpl.n	8006b48 <_printf_float+0x43c>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4642      	mov	r2, r8
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f ae74 	beq.w	80067ce <_printf_float+0xc2>
 8006ae6:	ee18 3a10 	vmov	r3, s16
 8006aea:	4652      	mov	r2, sl
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f ae6b 	beq.w	80067ce <_printf_float+0xc2>
 8006af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	f7fa f802 	bl	8000b08 <__aeabi_dcmpeq>
 8006b04:	b9d8      	cbnz	r0, 8006b3e <_printf_float+0x432>
 8006b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b08:	f108 0201 	add.w	r2, r8, #1
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	d10e      	bne.n	8006b36 <_printf_float+0x42a>
 8006b18:	e659      	b.n	80067ce <_printf_float+0xc2>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4652      	mov	r2, sl
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae52 	beq.w	80067ce <_printf_float+0xc2>
 8006b2a:	f108 0801 	add.w	r8, r8, #1
 8006b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b30:	3b01      	subs	r3, #1
 8006b32:	4543      	cmp	r3, r8
 8006b34:	dcf1      	bgt.n	8006b1a <_printf_float+0x40e>
 8006b36:	464b      	mov	r3, r9
 8006b38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b3c:	e6dc      	b.n	80068f8 <_printf_float+0x1ec>
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	f104 0a1a 	add.w	sl, r4, #26
 8006b46:	e7f2      	b.n	8006b2e <_printf_float+0x422>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4642      	mov	r2, r8
 8006b4c:	e7df      	b.n	8006b0e <_printf_float+0x402>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	464a      	mov	r2, r9
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae38 	beq.w	80067ce <_printf_float+0xc2>
 8006b5e:	f108 0801 	add.w	r8, r8, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b66:	1a5b      	subs	r3, r3, r1
 8006b68:	4543      	cmp	r3, r8
 8006b6a:	dcf0      	bgt.n	8006b4e <_printf_float+0x442>
 8006b6c:	e6fa      	b.n	8006964 <_printf_float+0x258>
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	f104 0919 	add.w	r9, r4, #25
 8006b76:	e7f4      	b.n	8006b62 <_printf_float+0x456>

08006b78 <_printf_common>:
 8006b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b7c:	4616      	mov	r6, r2
 8006b7e:	4699      	mov	r9, r3
 8006b80:	688a      	ldr	r2, [r1, #8]
 8006b82:	690b      	ldr	r3, [r1, #16]
 8006b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	bfb8      	it	lt
 8006b8c:	4613      	movlt	r3, r2
 8006b8e:	6033      	str	r3, [r6, #0]
 8006b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b94:	4607      	mov	r7, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	b10a      	cbz	r2, 8006b9e <_printf_common+0x26>
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	6033      	str	r3, [r6, #0]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	0699      	lsls	r1, r3, #26
 8006ba2:	bf42      	ittt	mi
 8006ba4:	6833      	ldrmi	r3, [r6, #0]
 8006ba6:	3302      	addmi	r3, #2
 8006ba8:	6033      	strmi	r3, [r6, #0]
 8006baa:	6825      	ldr	r5, [r4, #0]
 8006bac:	f015 0506 	ands.w	r5, r5, #6
 8006bb0:	d106      	bne.n	8006bc0 <_printf_common+0x48>
 8006bb2:	f104 0a19 	add.w	sl, r4, #25
 8006bb6:	68e3      	ldr	r3, [r4, #12]
 8006bb8:	6832      	ldr	r2, [r6, #0]
 8006bba:	1a9b      	subs	r3, r3, r2
 8006bbc:	42ab      	cmp	r3, r5
 8006bbe:	dc26      	bgt.n	8006c0e <_printf_common+0x96>
 8006bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bc4:	1e13      	subs	r3, r2, #0
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	bf18      	it	ne
 8006bca:	2301      	movne	r3, #1
 8006bcc:	0692      	lsls	r2, r2, #26
 8006bce:	d42b      	bmi.n	8006c28 <_printf_common+0xb0>
 8006bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	47c0      	blx	r8
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d01e      	beq.n	8006c1c <_printf_common+0xa4>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	68e5      	ldr	r5, [r4, #12]
 8006be2:	6832      	ldr	r2, [r6, #0]
 8006be4:	f003 0306 	and.w	r3, r3, #6
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	bf08      	it	eq
 8006bec:	1aad      	subeq	r5, r5, r2
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	6922      	ldr	r2, [r4, #16]
 8006bf2:	bf0c      	ite	eq
 8006bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bf8:	2500      	movne	r5, #0
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bfc4      	itt	gt
 8006bfe:	1a9b      	subgt	r3, r3, r2
 8006c00:	18ed      	addgt	r5, r5, r3
 8006c02:	2600      	movs	r6, #0
 8006c04:	341a      	adds	r4, #26
 8006c06:	42b5      	cmp	r5, r6
 8006c08:	d11a      	bne.n	8006c40 <_printf_common+0xc8>
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	e008      	b.n	8006c20 <_printf_common+0xa8>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4652      	mov	r2, sl
 8006c12:	4649      	mov	r1, r9
 8006c14:	4638      	mov	r0, r7
 8006c16:	47c0      	blx	r8
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d103      	bne.n	8006c24 <_printf_common+0xac>
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c24:	3501      	adds	r5, #1
 8006c26:	e7c6      	b.n	8006bb6 <_printf_common+0x3e>
 8006c28:	18e1      	adds	r1, r4, r3
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	2030      	movs	r0, #48	; 0x30
 8006c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c32:	4422      	add	r2, r4
 8006c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c3c:	3302      	adds	r3, #2
 8006c3e:	e7c7      	b.n	8006bd0 <_printf_common+0x58>
 8006c40:	2301      	movs	r3, #1
 8006c42:	4622      	mov	r2, r4
 8006c44:	4649      	mov	r1, r9
 8006c46:	4638      	mov	r0, r7
 8006c48:	47c0      	blx	r8
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d0e6      	beq.n	8006c1c <_printf_common+0xa4>
 8006c4e:	3601      	adds	r6, #1
 8006c50:	e7d9      	b.n	8006c06 <_printf_common+0x8e>
	...

08006c54 <_printf_i>:
 8006c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	460c      	mov	r4, r1
 8006c5a:	4691      	mov	r9, r2
 8006c5c:	7e27      	ldrb	r7, [r4, #24]
 8006c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c60:	2f78      	cmp	r7, #120	; 0x78
 8006c62:	4680      	mov	r8, r0
 8006c64:	469a      	mov	sl, r3
 8006c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c6a:	d807      	bhi.n	8006c7c <_printf_i+0x28>
 8006c6c:	2f62      	cmp	r7, #98	; 0x62
 8006c6e:	d80a      	bhi.n	8006c86 <_printf_i+0x32>
 8006c70:	2f00      	cmp	r7, #0
 8006c72:	f000 80d8 	beq.w	8006e26 <_printf_i+0x1d2>
 8006c76:	2f58      	cmp	r7, #88	; 0x58
 8006c78:	f000 80a3 	beq.w	8006dc2 <_printf_i+0x16e>
 8006c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c84:	e03a      	b.n	8006cfc <_printf_i+0xa8>
 8006c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c8a:	2b15      	cmp	r3, #21
 8006c8c:	d8f6      	bhi.n	8006c7c <_printf_i+0x28>
 8006c8e:	a001      	add	r0, pc, #4	; (adr r0, 8006c94 <_printf_i+0x40>)
 8006c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c94:	08006ced 	.word	0x08006ced
 8006c98:	08006d01 	.word	0x08006d01
 8006c9c:	08006c7d 	.word	0x08006c7d
 8006ca0:	08006c7d 	.word	0x08006c7d
 8006ca4:	08006c7d 	.word	0x08006c7d
 8006ca8:	08006c7d 	.word	0x08006c7d
 8006cac:	08006d01 	.word	0x08006d01
 8006cb0:	08006c7d 	.word	0x08006c7d
 8006cb4:	08006c7d 	.word	0x08006c7d
 8006cb8:	08006c7d 	.word	0x08006c7d
 8006cbc:	08006c7d 	.word	0x08006c7d
 8006cc0:	08006e0d 	.word	0x08006e0d
 8006cc4:	08006d31 	.word	0x08006d31
 8006cc8:	08006def 	.word	0x08006def
 8006ccc:	08006c7d 	.word	0x08006c7d
 8006cd0:	08006c7d 	.word	0x08006c7d
 8006cd4:	08006e2f 	.word	0x08006e2f
 8006cd8:	08006c7d 	.word	0x08006c7d
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006c7d 	.word	0x08006c7d
 8006ce4:	08006c7d 	.word	0x08006c7d
 8006ce8:	08006df7 	.word	0x08006df7
 8006cec:	680b      	ldr	r3, [r1, #0]
 8006cee:	1d1a      	adds	r2, r3, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	600a      	str	r2, [r1, #0]
 8006cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0a3      	b.n	8006e48 <_printf_i+0x1f4>
 8006d00:	6825      	ldr	r5, [r4, #0]
 8006d02:	6808      	ldr	r0, [r1, #0]
 8006d04:	062e      	lsls	r6, r5, #24
 8006d06:	f100 0304 	add.w	r3, r0, #4
 8006d0a:	d50a      	bpl.n	8006d22 <_printf_i+0xce>
 8006d0c:	6805      	ldr	r5, [r0, #0]
 8006d0e:	600b      	str	r3, [r1, #0]
 8006d10:	2d00      	cmp	r5, #0
 8006d12:	da03      	bge.n	8006d1c <_printf_i+0xc8>
 8006d14:	232d      	movs	r3, #45	; 0x2d
 8006d16:	426d      	negs	r5, r5
 8006d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1c:	485e      	ldr	r0, [pc, #376]	; (8006e98 <_printf_i+0x244>)
 8006d1e:	230a      	movs	r3, #10
 8006d20:	e019      	b.n	8006d56 <_printf_i+0x102>
 8006d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d26:	6805      	ldr	r5, [r0, #0]
 8006d28:	600b      	str	r3, [r1, #0]
 8006d2a:	bf18      	it	ne
 8006d2c:	b22d      	sxthne	r5, r5
 8006d2e:	e7ef      	b.n	8006d10 <_printf_i+0xbc>
 8006d30:	680b      	ldr	r3, [r1, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	1d18      	adds	r0, r3, #4
 8006d36:	6008      	str	r0, [r1, #0]
 8006d38:	0628      	lsls	r0, r5, #24
 8006d3a:	d501      	bpl.n	8006d40 <_printf_i+0xec>
 8006d3c:	681d      	ldr	r5, [r3, #0]
 8006d3e:	e002      	b.n	8006d46 <_printf_i+0xf2>
 8006d40:	0669      	lsls	r1, r5, #25
 8006d42:	d5fb      	bpl.n	8006d3c <_printf_i+0xe8>
 8006d44:	881d      	ldrh	r5, [r3, #0]
 8006d46:	4854      	ldr	r0, [pc, #336]	; (8006e98 <_printf_i+0x244>)
 8006d48:	2f6f      	cmp	r7, #111	; 0x6f
 8006d4a:	bf0c      	ite	eq
 8006d4c:	2308      	moveq	r3, #8
 8006d4e:	230a      	movne	r3, #10
 8006d50:	2100      	movs	r1, #0
 8006d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d56:	6866      	ldr	r6, [r4, #4]
 8006d58:	60a6      	str	r6, [r4, #8]
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	bfa2      	ittt	ge
 8006d5e:	6821      	ldrge	r1, [r4, #0]
 8006d60:	f021 0104 	bicge.w	r1, r1, #4
 8006d64:	6021      	strge	r1, [r4, #0]
 8006d66:	b90d      	cbnz	r5, 8006d6c <_printf_i+0x118>
 8006d68:	2e00      	cmp	r6, #0
 8006d6a:	d04d      	beq.n	8006e08 <_printf_i+0x1b4>
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d72:	fb03 5711 	mls	r7, r3, r1, r5
 8006d76:	5dc7      	ldrb	r7, [r0, r7]
 8006d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d7c:	462f      	mov	r7, r5
 8006d7e:	42bb      	cmp	r3, r7
 8006d80:	460d      	mov	r5, r1
 8006d82:	d9f4      	bls.n	8006d6e <_printf_i+0x11a>
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d10b      	bne.n	8006da0 <_printf_i+0x14c>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	07df      	lsls	r7, r3, #31
 8006d8c:	d508      	bpl.n	8006da0 <_printf_i+0x14c>
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	6861      	ldr	r1, [r4, #4]
 8006d92:	4299      	cmp	r1, r3
 8006d94:	bfde      	ittt	le
 8006d96:	2330      	movle	r3, #48	; 0x30
 8006d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006da0:	1b92      	subs	r2, r2, r6
 8006da2:	6122      	str	r2, [r4, #16]
 8006da4:	f8cd a000 	str.w	sl, [sp]
 8006da8:	464b      	mov	r3, r9
 8006daa:	aa03      	add	r2, sp, #12
 8006dac:	4621      	mov	r1, r4
 8006dae:	4640      	mov	r0, r8
 8006db0:	f7ff fee2 	bl	8006b78 <_printf_common>
 8006db4:	3001      	adds	r0, #1
 8006db6:	d14c      	bne.n	8006e52 <_printf_i+0x1fe>
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	b004      	add	sp, #16
 8006dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc2:	4835      	ldr	r0, [pc, #212]	; (8006e98 <_printf_i+0x244>)
 8006dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	680e      	ldr	r6, [r1, #0]
 8006dcc:	061f      	lsls	r7, r3, #24
 8006dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8006dd2:	600e      	str	r6, [r1, #0]
 8006dd4:	d514      	bpl.n	8006e00 <_printf_i+0x1ac>
 8006dd6:	07d9      	lsls	r1, r3, #31
 8006dd8:	bf44      	itt	mi
 8006dda:	f043 0320 	orrmi.w	r3, r3, #32
 8006dde:	6023      	strmi	r3, [r4, #0]
 8006de0:	b91d      	cbnz	r5, 8006dea <_printf_i+0x196>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f023 0320 	bic.w	r3, r3, #32
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	2310      	movs	r3, #16
 8006dec:	e7b0      	b.n	8006d50 <_printf_i+0xfc>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	f043 0320 	orr.w	r3, r3, #32
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	2378      	movs	r3, #120	; 0x78
 8006df8:	4828      	ldr	r0, [pc, #160]	; (8006e9c <_printf_i+0x248>)
 8006dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dfe:	e7e3      	b.n	8006dc8 <_printf_i+0x174>
 8006e00:	065e      	lsls	r6, r3, #25
 8006e02:	bf48      	it	mi
 8006e04:	b2ad      	uxthmi	r5, r5
 8006e06:	e7e6      	b.n	8006dd6 <_printf_i+0x182>
 8006e08:	4616      	mov	r6, r2
 8006e0a:	e7bb      	b.n	8006d84 <_printf_i+0x130>
 8006e0c:	680b      	ldr	r3, [r1, #0]
 8006e0e:	6826      	ldr	r6, [r4, #0]
 8006e10:	6960      	ldr	r0, [r4, #20]
 8006e12:	1d1d      	adds	r5, r3, #4
 8006e14:	600d      	str	r5, [r1, #0]
 8006e16:	0635      	lsls	r5, r6, #24
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	d501      	bpl.n	8006e20 <_printf_i+0x1cc>
 8006e1c:	6018      	str	r0, [r3, #0]
 8006e1e:	e002      	b.n	8006e26 <_printf_i+0x1d2>
 8006e20:	0671      	lsls	r1, r6, #25
 8006e22:	d5fb      	bpl.n	8006e1c <_printf_i+0x1c8>
 8006e24:	8018      	strh	r0, [r3, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	6123      	str	r3, [r4, #16]
 8006e2a:	4616      	mov	r6, r2
 8006e2c:	e7ba      	b.n	8006da4 <_printf_i+0x150>
 8006e2e:	680b      	ldr	r3, [r1, #0]
 8006e30:	1d1a      	adds	r2, r3, #4
 8006e32:	600a      	str	r2, [r1, #0]
 8006e34:	681e      	ldr	r6, [r3, #0]
 8006e36:	6862      	ldr	r2, [r4, #4]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f7f9 f9f0 	bl	8000220 <memchr>
 8006e40:	b108      	cbz	r0, 8006e46 <_printf_i+0x1f2>
 8006e42:	1b80      	subs	r0, r0, r6
 8006e44:	6060      	str	r0, [r4, #4]
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e50:	e7a8      	b.n	8006da4 <_printf_i+0x150>
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	4632      	mov	r2, r6
 8006e56:	4649      	mov	r1, r9
 8006e58:	4640      	mov	r0, r8
 8006e5a:	47d0      	blx	sl
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d0ab      	beq.n	8006db8 <_printf_i+0x164>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	079b      	lsls	r3, r3, #30
 8006e64:	d413      	bmi.n	8006e8e <_printf_i+0x23a>
 8006e66:	68e0      	ldr	r0, [r4, #12]
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	4298      	cmp	r0, r3
 8006e6c:	bfb8      	it	lt
 8006e6e:	4618      	movlt	r0, r3
 8006e70:	e7a4      	b.n	8006dbc <_printf_i+0x168>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4632      	mov	r2, r6
 8006e76:	4649      	mov	r1, r9
 8006e78:	4640      	mov	r0, r8
 8006e7a:	47d0      	blx	sl
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d09b      	beq.n	8006db8 <_printf_i+0x164>
 8006e80:	3501      	adds	r5, #1
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	9903      	ldr	r1, [sp, #12]
 8006e86:	1a5b      	subs	r3, r3, r1
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dcf2      	bgt.n	8006e72 <_printf_i+0x21e>
 8006e8c:	e7eb      	b.n	8006e66 <_printf_i+0x212>
 8006e8e:	2500      	movs	r5, #0
 8006e90:	f104 0619 	add.w	r6, r4, #25
 8006e94:	e7f5      	b.n	8006e82 <_printf_i+0x22e>
 8006e96:	bf00      	nop
 8006e98:	0800ae9e 	.word	0x0800ae9e
 8006e9c:	0800aeaf 	.word	0x0800aeaf

08006ea0 <_scanf_float>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	4617      	mov	r7, r2
 8006ea8:	9303      	str	r3, [sp, #12]
 8006eaa:	688b      	ldr	r3, [r1, #8]
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006eb2:	bf83      	ittte	hi
 8006eb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006eb8:	195b      	addhi	r3, r3, r5
 8006eba:	9302      	strhi	r3, [sp, #8]
 8006ebc:	2300      	movls	r3, #0
 8006ebe:	bf86      	itte	hi
 8006ec0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ec4:	608b      	strhi	r3, [r1, #8]
 8006ec6:	9302      	strls	r3, [sp, #8]
 8006ec8:	680b      	ldr	r3, [r1, #0]
 8006eca:	468b      	mov	fp, r1
 8006ecc:	2500      	movs	r5, #0
 8006ece:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ed2:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ed6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006eda:	4680      	mov	r8, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	465e      	mov	r6, fp
 8006ee0:	46aa      	mov	sl, r5
 8006ee2:	46a9      	mov	r9, r5
 8006ee4:	9501      	str	r5, [sp, #4]
 8006ee6:	68a2      	ldr	r2, [r4, #8]
 8006ee8:	b152      	cbz	r2, 8006f00 <_scanf_float+0x60>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b4e      	cmp	r3, #78	; 0x4e
 8006ef0:	d864      	bhi.n	8006fbc <_scanf_float+0x11c>
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d83c      	bhi.n	8006f70 <_scanf_float+0xd0>
 8006ef6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006efa:	b2c8      	uxtb	r0, r1
 8006efc:	280e      	cmp	r0, #14
 8006efe:	d93a      	bls.n	8006f76 <_scanf_float+0xd6>
 8006f00:	f1b9 0f00 	cmp.w	r9, #0
 8006f04:	d003      	beq.n	8006f0e <_scanf_float+0x6e>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f12:	f1ba 0f01 	cmp.w	sl, #1
 8006f16:	f200 8113 	bhi.w	8007140 <_scanf_float+0x2a0>
 8006f1a:	455e      	cmp	r6, fp
 8006f1c:	f200 8105 	bhi.w	800712a <_scanf_float+0x28a>
 8006f20:	2501      	movs	r5, #1
 8006f22:	4628      	mov	r0, r5
 8006f24:	b007      	add	sp, #28
 8006f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f2e:	2a0d      	cmp	r2, #13
 8006f30:	d8e6      	bhi.n	8006f00 <_scanf_float+0x60>
 8006f32:	a101      	add	r1, pc, #4	; (adr r1, 8006f38 <_scanf_float+0x98>)
 8006f34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f38:	08007077 	.word	0x08007077
 8006f3c:	08006f01 	.word	0x08006f01
 8006f40:	08006f01 	.word	0x08006f01
 8006f44:	08006f01 	.word	0x08006f01
 8006f48:	080070d7 	.word	0x080070d7
 8006f4c:	080070af 	.word	0x080070af
 8006f50:	08006f01 	.word	0x08006f01
 8006f54:	08006f01 	.word	0x08006f01
 8006f58:	08007085 	.word	0x08007085
 8006f5c:	08006f01 	.word	0x08006f01
 8006f60:	08006f01 	.word	0x08006f01
 8006f64:	08006f01 	.word	0x08006f01
 8006f68:	08006f01 	.word	0x08006f01
 8006f6c:	0800703d 	.word	0x0800703d
 8006f70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f74:	e7db      	b.n	8006f2e <_scanf_float+0x8e>
 8006f76:	290e      	cmp	r1, #14
 8006f78:	d8c2      	bhi.n	8006f00 <_scanf_float+0x60>
 8006f7a:	a001      	add	r0, pc, #4	; (adr r0, 8006f80 <_scanf_float+0xe0>)
 8006f7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f80:	0800702f 	.word	0x0800702f
 8006f84:	08006f01 	.word	0x08006f01
 8006f88:	0800702f 	.word	0x0800702f
 8006f8c:	080070c3 	.word	0x080070c3
 8006f90:	08006f01 	.word	0x08006f01
 8006f94:	08006fdd 	.word	0x08006fdd
 8006f98:	08007019 	.word	0x08007019
 8006f9c:	08007019 	.word	0x08007019
 8006fa0:	08007019 	.word	0x08007019
 8006fa4:	08007019 	.word	0x08007019
 8006fa8:	08007019 	.word	0x08007019
 8006fac:	08007019 	.word	0x08007019
 8006fb0:	08007019 	.word	0x08007019
 8006fb4:	08007019 	.word	0x08007019
 8006fb8:	08007019 	.word	0x08007019
 8006fbc:	2b6e      	cmp	r3, #110	; 0x6e
 8006fbe:	d809      	bhi.n	8006fd4 <_scanf_float+0x134>
 8006fc0:	2b60      	cmp	r3, #96	; 0x60
 8006fc2:	d8b2      	bhi.n	8006f2a <_scanf_float+0x8a>
 8006fc4:	2b54      	cmp	r3, #84	; 0x54
 8006fc6:	d077      	beq.n	80070b8 <_scanf_float+0x218>
 8006fc8:	2b59      	cmp	r3, #89	; 0x59
 8006fca:	d199      	bne.n	8006f00 <_scanf_float+0x60>
 8006fcc:	2d07      	cmp	r5, #7
 8006fce:	d197      	bne.n	8006f00 <_scanf_float+0x60>
 8006fd0:	2508      	movs	r5, #8
 8006fd2:	e029      	b.n	8007028 <_scanf_float+0x188>
 8006fd4:	2b74      	cmp	r3, #116	; 0x74
 8006fd6:	d06f      	beq.n	80070b8 <_scanf_float+0x218>
 8006fd8:	2b79      	cmp	r3, #121	; 0x79
 8006fda:	e7f6      	b.n	8006fca <_scanf_float+0x12a>
 8006fdc:	6821      	ldr	r1, [r4, #0]
 8006fde:	05c8      	lsls	r0, r1, #23
 8006fe0:	d51a      	bpl.n	8007018 <_scanf_float+0x178>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fe8:	6021      	str	r1, [r4, #0]
 8006fea:	f109 0901 	add.w	r9, r9, #1
 8006fee:	b11b      	cbz	r3, 8006ff8 <_scanf_float+0x158>
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	3201      	adds	r2, #1
 8006ff4:	9302      	str	r3, [sp, #8]
 8006ff6:	60a2      	str	r2, [r4, #8]
 8006ff8:	68a3      	ldr	r3, [r4, #8]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	60a3      	str	r3, [r4, #8]
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	3301      	adds	r3, #1
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3b01      	subs	r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	607b      	str	r3, [r7, #4]
 800700c:	f340 8084 	ble.w	8007118 <_scanf_float+0x278>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	e766      	b.n	8006ee6 <_scanf_float+0x46>
 8007018:	eb1a 0f05 	cmn.w	sl, r5
 800701c:	f47f af70 	bne.w	8006f00 <_scanf_float+0x60>
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	f806 3b01 	strb.w	r3, [r6], #1
 800702c:	e7e4      	b.n	8006ff8 <_scanf_float+0x158>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	0610      	lsls	r0, r2, #24
 8007032:	f57f af65 	bpl.w	8006f00 <_scanf_float+0x60>
 8007036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800703a:	e7f4      	b.n	8007026 <_scanf_float+0x186>
 800703c:	f1ba 0f00 	cmp.w	sl, #0
 8007040:	d10e      	bne.n	8007060 <_scanf_float+0x1c0>
 8007042:	f1b9 0f00 	cmp.w	r9, #0
 8007046:	d10e      	bne.n	8007066 <_scanf_float+0x1c6>
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800704e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007052:	d108      	bne.n	8007066 <_scanf_float+0x1c6>
 8007054:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007058:	6022      	str	r2, [r4, #0]
 800705a:	f04f 0a01 	mov.w	sl, #1
 800705e:	e7e3      	b.n	8007028 <_scanf_float+0x188>
 8007060:	f1ba 0f02 	cmp.w	sl, #2
 8007064:	d055      	beq.n	8007112 <_scanf_float+0x272>
 8007066:	2d01      	cmp	r5, #1
 8007068:	d002      	beq.n	8007070 <_scanf_float+0x1d0>
 800706a:	2d04      	cmp	r5, #4
 800706c:	f47f af48 	bne.w	8006f00 <_scanf_float+0x60>
 8007070:	3501      	adds	r5, #1
 8007072:	b2ed      	uxtb	r5, r5
 8007074:	e7d8      	b.n	8007028 <_scanf_float+0x188>
 8007076:	f1ba 0f01 	cmp.w	sl, #1
 800707a:	f47f af41 	bne.w	8006f00 <_scanf_float+0x60>
 800707e:	f04f 0a02 	mov.w	sl, #2
 8007082:	e7d1      	b.n	8007028 <_scanf_float+0x188>
 8007084:	b97d      	cbnz	r5, 80070a6 <_scanf_float+0x206>
 8007086:	f1b9 0f00 	cmp.w	r9, #0
 800708a:	f47f af3c 	bne.w	8006f06 <_scanf_float+0x66>
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007094:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007098:	f47f af39 	bne.w	8006f0e <_scanf_float+0x6e>
 800709c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070a0:	6022      	str	r2, [r4, #0]
 80070a2:	2501      	movs	r5, #1
 80070a4:	e7c0      	b.n	8007028 <_scanf_float+0x188>
 80070a6:	2d03      	cmp	r5, #3
 80070a8:	d0e2      	beq.n	8007070 <_scanf_float+0x1d0>
 80070aa:	2d05      	cmp	r5, #5
 80070ac:	e7de      	b.n	800706c <_scanf_float+0x1cc>
 80070ae:	2d02      	cmp	r5, #2
 80070b0:	f47f af26 	bne.w	8006f00 <_scanf_float+0x60>
 80070b4:	2503      	movs	r5, #3
 80070b6:	e7b7      	b.n	8007028 <_scanf_float+0x188>
 80070b8:	2d06      	cmp	r5, #6
 80070ba:	f47f af21 	bne.w	8006f00 <_scanf_float+0x60>
 80070be:	2507      	movs	r5, #7
 80070c0:	e7b2      	b.n	8007028 <_scanf_float+0x188>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	0591      	lsls	r1, r2, #22
 80070c6:	f57f af1b 	bpl.w	8006f00 <_scanf_float+0x60>
 80070ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070ce:	6022      	str	r2, [r4, #0]
 80070d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80070d4:	e7a8      	b.n	8007028 <_scanf_float+0x188>
 80070d6:	6822      	ldr	r2, [r4, #0]
 80070d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070e0:	d006      	beq.n	80070f0 <_scanf_float+0x250>
 80070e2:	0550      	lsls	r0, r2, #21
 80070e4:	f57f af0c 	bpl.w	8006f00 <_scanf_float+0x60>
 80070e8:	f1b9 0f00 	cmp.w	r9, #0
 80070ec:	f43f af0f 	beq.w	8006f0e <_scanf_float+0x6e>
 80070f0:	0591      	lsls	r1, r2, #22
 80070f2:	bf58      	it	pl
 80070f4:	9901      	ldrpl	r1, [sp, #4]
 80070f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070fa:	bf58      	it	pl
 80070fc:	eba9 0101 	subpl.w	r1, r9, r1
 8007100:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007104:	bf58      	it	pl
 8007106:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800710a:	6022      	str	r2, [r4, #0]
 800710c:	f04f 0900 	mov.w	r9, #0
 8007110:	e78a      	b.n	8007028 <_scanf_float+0x188>
 8007112:	f04f 0a03 	mov.w	sl, #3
 8007116:	e787      	b.n	8007028 <_scanf_float+0x188>
 8007118:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800711c:	4639      	mov	r1, r7
 800711e:	4640      	mov	r0, r8
 8007120:	4798      	blx	r3
 8007122:	2800      	cmp	r0, #0
 8007124:	f43f aedf 	beq.w	8006ee6 <_scanf_float+0x46>
 8007128:	e6ea      	b.n	8006f00 <_scanf_float+0x60>
 800712a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800712e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007132:	463a      	mov	r2, r7
 8007134:	4640      	mov	r0, r8
 8007136:	4798      	blx	r3
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	3b01      	subs	r3, #1
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	e6ec      	b.n	8006f1a <_scanf_float+0x7a>
 8007140:	1e6b      	subs	r3, r5, #1
 8007142:	2b06      	cmp	r3, #6
 8007144:	d825      	bhi.n	8007192 <_scanf_float+0x2f2>
 8007146:	2d02      	cmp	r5, #2
 8007148:	d836      	bhi.n	80071b8 <_scanf_float+0x318>
 800714a:	455e      	cmp	r6, fp
 800714c:	f67f aee8 	bls.w	8006f20 <_scanf_float+0x80>
 8007150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007154:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007158:	463a      	mov	r2, r7
 800715a:	4640      	mov	r0, r8
 800715c:	4798      	blx	r3
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	3b01      	subs	r3, #1
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	e7f1      	b.n	800714a <_scanf_float+0x2aa>
 8007166:	9802      	ldr	r0, [sp, #8]
 8007168:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800716c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007170:	9002      	str	r0, [sp, #8]
 8007172:	463a      	mov	r2, r7
 8007174:	4640      	mov	r0, r8
 8007176:	4798      	blx	r3
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	3b01      	subs	r3, #1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007182:	fa5f fa8a 	uxtb.w	sl, sl
 8007186:	f1ba 0f02 	cmp.w	sl, #2
 800718a:	d1ec      	bne.n	8007166 <_scanf_float+0x2c6>
 800718c:	3d03      	subs	r5, #3
 800718e:	b2ed      	uxtb	r5, r5
 8007190:	1b76      	subs	r6, r6, r5
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	05da      	lsls	r2, r3, #23
 8007196:	d52f      	bpl.n	80071f8 <_scanf_float+0x358>
 8007198:	055b      	lsls	r3, r3, #21
 800719a:	d510      	bpl.n	80071be <_scanf_float+0x31e>
 800719c:	455e      	cmp	r6, fp
 800719e:	f67f aebf 	bls.w	8006f20 <_scanf_float+0x80>
 80071a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071aa:	463a      	mov	r2, r7
 80071ac:	4640      	mov	r0, r8
 80071ae:	4798      	blx	r3
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	e7f1      	b.n	800719c <_scanf_float+0x2fc>
 80071b8:	46aa      	mov	sl, r5
 80071ba:	9602      	str	r6, [sp, #8]
 80071bc:	e7df      	b.n	800717e <_scanf_float+0x2de>
 80071be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	2965      	cmp	r1, #101	; 0x65
 80071c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80071ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80071ce:	6123      	str	r3, [r4, #16]
 80071d0:	d00c      	beq.n	80071ec <_scanf_float+0x34c>
 80071d2:	2945      	cmp	r1, #69	; 0x45
 80071d4:	d00a      	beq.n	80071ec <_scanf_float+0x34c>
 80071d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071da:	463a      	mov	r2, r7
 80071dc:	4640      	mov	r0, r8
 80071de:	4798      	blx	r3
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	1eb5      	subs	r5, r6, #2
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071f0:	463a      	mov	r2, r7
 80071f2:	4640      	mov	r0, r8
 80071f4:	4798      	blx	r3
 80071f6:	462e      	mov	r6, r5
 80071f8:	6825      	ldr	r5, [r4, #0]
 80071fa:	f015 0510 	ands.w	r5, r5, #16
 80071fe:	d158      	bne.n	80072b2 <_scanf_float+0x412>
 8007200:	7035      	strb	r5, [r6, #0]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720c:	d11c      	bne.n	8007248 <_scanf_float+0x3a8>
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	454b      	cmp	r3, r9
 8007212:	eba3 0209 	sub.w	r2, r3, r9
 8007216:	d124      	bne.n	8007262 <_scanf_float+0x3c2>
 8007218:	2200      	movs	r2, #0
 800721a:	4659      	mov	r1, fp
 800721c:	4640      	mov	r0, r8
 800721e:	f000 fe95 	bl	8007f4c <_strtod_r>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f011 0f02 	tst.w	r1, #2
 800722c:	ec57 6b10 	vmov	r6, r7, d0
 8007230:	f103 0204 	add.w	r2, r3, #4
 8007234:	d020      	beq.n	8007278 <_scanf_float+0x3d8>
 8007236:	9903      	ldr	r1, [sp, #12]
 8007238:	600a      	str	r2, [r1, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	e9c3 6700 	strd	r6, r7, [r3]
 8007240:	68e3      	ldr	r3, [r4, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60e3      	str	r3, [r4, #12]
 8007246:	e66c      	b.n	8006f22 <_scanf_float+0x82>
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0e4      	beq.n	8007218 <_scanf_float+0x378>
 800724e:	9905      	ldr	r1, [sp, #20]
 8007250:	230a      	movs	r3, #10
 8007252:	462a      	mov	r2, r5
 8007254:	3101      	adds	r1, #1
 8007256:	4640      	mov	r0, r8
 8007258:	f000 ff02 	bl	8008060 <_strtol_r>
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	9e05      	ldr	r6, [sp, #20]
 8007260:	1ac2      	subs	r2, r0, r3
 8007262:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007266:	429e      	cmp	r6, r3
 8007268:	bf28      	it	cs
 800726a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800726e:	4912      	ldr	r1, [pc, #72]	; (80072b8 <_scanf_float+0x418>)
 8007270:	4630      	mov	r0, r6
 8007272:	f000 f825 	bl	80072c0 <siprintf>
 8007276:	e7cf      	b.n	8007218 <_scanf_float+0x378>
 8007278:	f011 0f04 	tst.w	r1, #4
 800727c:	9903      	ldr	r1, [sp, #12]
 800727e:	600a      	str	r2, [r1, #0]
 8007280:	d1db      	bne.n	800723a <_scanf_float+0x39a>
 8007282:	f8d3 8000 	ldr.w	r8, [r3]
 8007286:	ee10 2a10 	vmov	r2, s0
 800728a:	ee10 0a10 	vmov	r0, s0
 800728e:	463b      	mov	r3, r7
 8007290:	4639      	mov	r1, r7
 8007292:	f7f9 fc6b 	bl	8000b6c <__aeabi_dcmpun>
 8007296:	b128      	cbz	r0, 80072a4 <_scanf_float+0x404>
 8007298:	4808      	ldr	r0, [pc, #32]	; (80072bc <_scanf_float+0x41c>)
 800729a:	f7ff f95f 	bl	800655c <nanf>
 800729e:	ed88 0a00 	vstr	s0, [r8]
 80072a2:	e7cd      	b.n	8007240 <_scanf_float+0x3a0>
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f9 fcbe 	bl	8000c28 <__aeabi_d2f>
 80072ac:	f8c8 0000 	str.w	r0, [r8]
 80072b0:	e7c6      	b.n	8007240 <_scanf_float+0x3a0>
 80072b2:	2500      	movs	r5, #0
 80072b4:	e635      	b.n	8006f22 <_scanf_float+0x82>
 80072b6:	bf00      	nop
 80072b8:	0800aec0 	.word	0x0800aec0
 80072bc:	0800b2d8 	.word	0x0800b2d8

080072c0 <siprintf>:
 80072c0:	b40e      	push	{r1, r2, r3}
 80072c2:	b500      	push	{lr}
 80072c4:	b09c      	sub	sp, #112	; 0x70
 80072c6:	ab1d      	add	r3, sp, #116	; 0x74
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	9006      	str	r0, [sp, #24]
 80072cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072d0:	4809      	ldr	r0, [pc, #36]	; (80072f8 <siprintf+0x38>)
 80072d2:	9107      	str	r1, [sp, #28]
 80072d4:	9104      	str	r1, [sp, #16]
 80072d6:	4909      	ldr	r1, [pc, #36]	; (80072fc <siprintf+0x3c>)
 80072d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072dc:	9105      	str	r1, [sp, #20]
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	a902      	add	r1, sp, #8
 80072e4:	f002 fea4 	bl	800a030 <_svfiprintf_r>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	b01c      	add	sp, #112	; 0x70
 80072f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f4:	b003      	add	sp, #12
 80072f6:	4770      	bx	lr
 80072f8:	2000000c 	.word	0x2000000c
 80072fc:	ffff0208 	.word	0xffff0208

08007300 <sulp>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	4604      	mov	r4, r0
 8007304:	460d      	mov	r5, r1
 8007306:	ec45 4b10 	vmov	d0, r4, r5
 800730a:	4616      	mov	r6, r2
 800730c:	f002 fc2c 	bl	8009b68 <__ulp>
 8007310:	ec51 0b10 	vmov	r0, r1, d0
 8007314:	b17e      	cbz	r6, 8007336 <sulp+0x36>
 8007316:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800731a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd09      	ble.n	8007336 <sulp+0x36>
 8007322:	051b      	lsls	r3, r3, #20
 8007324:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007328:	2400      	movs	r4, #0
 800732a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800732e:	4622      	mov	r2, r4
 8007330:	462b      	mov	r3, r5
 8007332:	f7f9 f981 	bl	8000638 <__aeabi_dmul>
 8007336:	bd70      	pop	{r4, r5, r6, pc}

08007338 <_strtod_l>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	b0a3      	sub	sp, #140	; 0x8c
 800733e:	461f      	mov	r7, r3
 8007340:	2300      	movs	r3, #0
 8007342:	931e      	str	r3, [sp, #120]	; 0x78
 8007344:	4ba4      	ldr	r3, [pc, #656]	; (80075d8 <_strtod_l+0x2a0>)
 8007346:	9219      	str	r2, [sp, #100]	; 0x64
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	9307      	str	r3, [sp, #28]
 800734c:	4604      	mov	r4, r0
 800734e:	4618      	mov	r0, r3
 8007350:	4688      	mov	r8, r1
 8007352:	f7f8 ff5d 	bl	8000210 <strlen>
 8007356:	f04f 0a00 	mov.w	sl, #0
 800735a:	4605      	mov	r5, r0
 800735c:	f04f 0b00 	mov.w	fp, #0
 8007360:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007366:	781a      	ldrb	r2, [r3, #0]
 8007368:	2a2b      	cmp	r2, #43	; 0x2b
 800736a:	d04c      	beq.n	8007406 <_strtod_l+0xce>
 800736c:	d839      	bhi.n	80073e2 <_strtod_l+0xaa>
 800736e:	2a0d      	cmp	r2, #13
 8007370:	d832      	bhi.n	80073d8 <_strtod_l+0xa0>
 8007372:	2a08      	cmp	r2, #8
 8007374:	d832      	bhi.n	80073dc <_strtod_l+0xa4>
 8007376:	2a00      	cmp	r2, #0
 8007378:	d03c      	beq.n	80073f4 <_strtod_l+0xbc>
 800737a:	2300      	movs	r3, #0
 800737c:	930e      	str	r3, [sp, #56]	; 0x38
 800737e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007380:	7833      	ldrb	r3, [r6, #0]
 8007382:	2b30      	cmp	r3, #48	; 0x30
 8007384:	f040 80b4 	bne.w	80074f0 <_strtod_l+0x1b8>
 8007388:	7873      	ldrb	r3, [r6, #1]
 800738a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800738e:	2b58      	cmp	r3, #88	; 0x58
 8007390:	d16c      	bne.n	800746c <_strtod_l+0x134>
 8007392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	ab1e      	add	r3, sp, #120	; 0x78
 8007398:	9702      	str	r7, [sp, #8]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4a8f      	ldr	r2, [pc, #572]	; (80075dc <_strtod_l+0x2a4>)
 800739e:	ab1f      	add	r3, sp, #124	; 0x7c
 80073a0:	a91d      	add	r1, sp, #116	; 0x74
 80073a2:	4620      	mov	r0, r4
 80073a4:	f001 fd40 	bl	8008e28 <__gethex>
 80073a8:	f010 0707 	ands.w	r7, r0, #7
 80073ac:	4605      	mov	r5, r0
 80073ae:	d005      	beq.n	80073bc <_strtod_l+0x84>
 80073b0:	2f06      	cmp	r7, #6
 80073b2:	d12a      	bne.n	800740a <_strtod_l+0xd2>
 80073b4:	3601      	adds	r6, #1
 80073b6:	2300      	movs	r3, #0
 80073b8:	961d      	str	r6, [sp, #116]	; 0x74
 80073ba:	930e      	str	r3, [sp, #56]	; 0x38
 80073bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f040 8596 	bne.w	8007ef0 <_strtod_l+0xbb8>
 80073c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073c6:	b1db      	cbz	r3, 8007400 <_strtod_l+0xc8>
 80073c8:	4652      	mov	r2, sl
 80073ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073ce:	ec43 2b10 	vmov	d0, r2, r3
 80073d2:	b023      	add	sp, #140	; 0x8c
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	2a20      	cmp	r2, #32
 80073da:	d1ce      	bne.n	800737a <_strtod_l+0x42>
 80073dc:	3301      	adds	r3, #1
 80073de:	931d      	str	r3, [sp, #116]	; 0x74
 80073e0:	e7c0      	b.n	8007364 <_strtod_l+0x2c>
 80073e2:	2a2d      	cmp	r2, #45	; 0x2d
 80073e4:	d1c9      	bne.n	800737a <_strtod_l+0x42>
 80073e6:	2201      	movs	r2, #1
 80073e8:	920e      	str	r2, [sp, #56]	; 0x38
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	921d      	str	r2, [sp, #116]	; 0x74
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1c4      	bne.n	800737e <_strtod_l+0x46>
 80073f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 8576 	bne.w	8007eec <_strtod_l+0xbb4>
 8007400:	4652      	mov	r2, sl
 8007402:	465b      	mov	r3, fp
 8007404:	e7e3      	b.n	80073ce <_strtod_l+0x96>
 8007406:	2200      	movs	r2, #0
 8007408:	e7ee      	b.n	80073e8 <_strtod_l+0xb0>
 800740a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800740c:	b13a      	cbz	r2, 800741e <_strtod_l+0xe6>
 800740e:	2135      	movs	r1, #53	; 0x35
 8007410:	a820      	add	r0, sp, #128	; 0x80
 8007412:	f002 fcb4 	bl	8009d7e <__copybits>
 8007416:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007418:	4620      	mov	r0, r4
 800741a:	f002 f879 	bl	8009510 <_Bfree>
 800741e:	3f01      	subs	r7, #1
 8007420:	2f05      	cmp	r7, #5
 8007422:	d807      	bhi.n	8007434 <_strtod_l+0xfc>
 8007424:	e8df f007 	tbb	[pc, r7]
 8007428:	1d180b0e 	.word	0x1d180b0e
 800742c:	030e      	.short	0x030e
 800742e:	f04f 0b00 	mov.w	fp, #0
 8007432:	46da      	mov	sl, fp
 8007434:	0728      	lsls	r0, r5, #28
 8007436:	d5c1      	bpl.n	80073bc <_strtod_l+0x84>
 8007438:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800743c:	e7be      	b.n	80073bc <_strtod_l+0x84>
 800743e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007442:	e7f7      	b.n	8007434 <_strtod_l+0xfc>
 8007444:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007448:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800744a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800744e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007452:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007456:	e7ed      	b.n	8007434 <_strtod_l+0xfc>
 8007458:	f8df b184 	ldr.w	fp, [pc, #388]	; 80075e0 <_strtod_l+0x2a8>
 800745c:	f04f 0a00 	mov.w	sl, #0
 8007460:	e7e8      	b.n	8007434 <_strtod_l+0xfc>
 8007462:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007466:	f04f 3aff 	mov.w	sl, #4294967295
 800746a:	e7e3      	b.n	8007434 <_strtod_l+0xfc>
 800746c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	921d      	str	r2, [sp, #116]	; 0x74
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b30      	cmp	r3, #48	; 0x30
 8007476:	d0f9      	beq.n	800746c <_strtod_l+0x134>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d09f      	beq.n	80073bc <_strtod_l+0x84>
 800747c:	2301      	movs	r3, #1
 800747e:	f04f 0900 	mov.w	r9, #0
 8007482:	9304      	str	r3, [sp, #16]
 8007484:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007486:	930a      	str	r3, [sp, #40]	; 0x28
 8007488:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800748c:	464f      	mov	r7, r9
 800748e:	220a      	movs	r2, #10
 8007490:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007492:	7806      	ldrb	r6, [r0, #0]
 8007494:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007498:	b2d9      	uxtb	r1, r3
 800749a:	2909      	cmp	r1, #9
 800749c:	d92a      	bls.n	80074f4 <_strtod_l+0x1bc>
 800749e:	9907      	ldr	r1, [sp, #28]
 80074a0:	462a      	mov	r2, r5
 80074a2:	f002 fed5 	bl	800a250 <strncmp>
 80074a6:	b398      	cbz	r0, 8007510 <_strtod_l+0x1d8>
 80074a8:	2000      	movs	r0, #0
 80074aa:	4633      	mov	r3, r6
 80074ac:	463d      	mov	r5, r7
 80074ae:	9007      	str	r0, [sp, #28]
 80074b0:	4602      	mov	r2, r0
 80074b2:	2b65      	cmp	r3, #101	; 0x65
 80074b4:	d001      	beq.n	80074ba <_strtod_l+0x182>
 80074b6:	2b45      	cmp	r3, #69	; 0x45
 80074b8:	d118      	bne.n	80074ec <_strtod_l+0x1b4>
 80074ba:	b91d      	cbnz	r5, 80074c4 <_strtod_l+0x18c>
 80074bc:	9b04      	ldr	r3, [sp, #16]
 80074be:	4303      	orrs	r3, r0
 80074c0:	d098      	beq.n	80073f4 <_strtod_l+0xbc>
 80074c2:	2500      	movs	r5, #0
 80074c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80074c8:	f108 0301 	add.w	r3, r8, #1
 80074cc:	931d      	str	r3, [sp, #116]	; 0x74
 80074ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074d2:	2b2b      	cmp	r3, #43	; 0x2b
 80074d4:	d075      	beq.n	80075c2 <_strtod_l+0x28a>
 80074d6:	2b2d      	cmp	r3, #45	; 0x2d
 80074d8:	d07b      	beq.n	80075d2 <_strtod_l+0x29a>
 80074da:	f04f 0c00 	mov.w	ip, #0
 80074de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80074e2:	2909      	cmp	r1, #9
 80074e4:	f240 8082 	bls.w	80075ec <_strtod_l+0x2b4>
 80074e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80074ec:	2600      	movs	r6, #0
 80074ee:	e09d      	b.n	800762c <_strtod_l+0x2f4>
 80074f0:	2300      	movs	r3, #0
 80074f2:	e7c4      	b.n	800747e <_strtod_l+0x146>
 80074f4:	2f08      	cmp	r7, #8
 80074f6:	bfd8      	it	le
 80074f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80074fa:	f100 0001 	add.w	r0, r0, #1
 80074fe:	bfda      	itte	le
 8007500:	fb02 3301 	mlale	r3, r2, r1, r3
 8007504:	9309      	strle	r3, [sp, #36]	; 0x24
 8007506:	fb02 3909 	mlagt	r9, r2, r9, r3
 800750a:	3701      	adds	r7, #1
 800750c:	901d      	str	r0, [sp, #116]	; 0x74
 800750e:	e7bf      	b.n	8007490 <_strtod_l+0x158>
 8007510:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007512:	195a      	adds	r2, r3, r5
 8007514:	921d      	str	r2, [sp, #116]	; 0x74
 8007516:	5d5b      	ldrb	r3, [r3, r5]
 8007518:	2f00      	cmp	r7, #0
 800751a:	d037      	beq.n	800758c <_strtod_l+0x254>
 800751c:	9007      	str	r0, [sp, #28]
 800751e:	463d      	mov	r5, r7
 8007520:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007524:	2a09      	cmp	r2, #9
 8007526:	d912      	bls.n	800754e <_strtod_l+0x216>
 8007528:	2201      	movs	r2, #1
 800752a:	e7c2      	b.n	80074b2 <_strtod_l+0x17a>
 800752c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	921d      	str	r2, [sp, #116]	; 0x74
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	3001      	adds	r0, #1
 8007536:	2b30      	cmp	r3, #48	; 0x30
 8007538:	d0f8      	beq.n	800752c <_strtod_l+0x1f4>
 800753a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800753e:	2a08      	cmp	r2, #8
 8007540:	f200 84db 	bhi.w	8007efa <_strtod_l+0xbc2>
 8007544:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007546:	9007      	str	r0, [sp, #28]
 8007548:	2000      	movs	r0, #0
 800754a:	920a      	str	r2, [sp, #40]	; 0x28
 800754c:	4605      	mov	r5, r0
 800754e:	3b30      	subs	r3, #48	; 0x30
 8007550:	f100 0201 	add.w	r2, r0, #1
 8007554:	d014      	beq.n	8007580 <_strtod_l+0x248>
 8007556:	9907      	ldr	r1, [sp, #28]
 8007558:	4411      	add	r1, r2
 800755a:	9107      	str	r1, [sp, #28]
 800755c:	462a      	mov	r2, r5
 800755e:	eb00 0e05 	add.w	lr, r0, r5
 8007562:	210a      	movs	r1, #10
 8007564:	4572      	cmp	r2, lr
 8007566:	d113      	bne.n	8007590 <_strtod_l+0x258>
 8007568:	182a      	adds	r2, r5, r0
 800756a:	2a08      	cmp	r2, #8
 800756c:	f105 0501 	add.w	r5, r5, #1
 8007570:	4405      	add	r5, r0
 8007572:	dc1c      	bgt.n	80075ae <_strtod_l+0x276>
 8007574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007576:	220a      	movs	r2, #10
 8007578:	fb02 3301 	mla	r3, r2, r1, r3
 800757c:	9309      	str	r3, [sp, #36]	; 0x24
 800757e:	2200      	movs	r2, #0
 8007580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007582:	1c59      	adds	r1, r3, #1
 8007584:	911d      	str	r1, [sp, #116]	; 0x74
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	4610      	mov	r0, r2
 800758a:	e7c9      	b.n	8007520 <_strtod_l+0x1e8>
 800758c:	4638      	mov	r0, r7
 800758e:	e7d2      	b.n	8007536 <_strtod_l+0x1fe>
 8007590:	2a08      	cmp	r2, #8
 8007592:	dc04      	bgt.n	800759e <_strtod_l+0x266>
 8007594:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007596:	434e      	muls	r6, r1
 8007598:	9609      	str	r6, [sp, #36]	; 0x24
 800759a:	3201      	adds	r2, #1
 800759c:	e7e2      	b.n	8007564 <_strtod_l+0x22c>
 800759e:	f102 0c01 	add.w	ip, r2, #1
 80075a2:	f1bc 0f10 	cmp.w	ip, #16
 80075a6:	bfd8      	it	le
 80075a8:	fb01 f909 	mulle.w	r9, r1, r9
 80075ac:	e7f5      	b.n	800759a <_strtod_l+0x262>
 80075ae:	2d10      	cmp	r5, #16
 80075b0:	bfdc      	itt	le
 80075b2:	220a      	movle	r2, #10
 80075b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80075b8:	e7e1      	b.n	800757e <_strtod_l+0x246>
 80075ba:	2300      	movs	r3, #0
 80075bc:	9307      	str	r3, [sp, #28]
 80075be:	2201      	movs	r2, #1
 80075c0:	e77c      	b.n	80074bc <_strtod_l+0x184>
 80075c2:	f04f 0c00 	mov.w	ip, #0
 80075c6:	f108 0302 	add.w	r3, r8, #2
 80075ca:	931d      	str	r3, [sp, #116]	; 0x74
 80075cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80075d0:	e785      	b.n	80074de <_strtod_l+0x1a6>
 80075d2:	f04f 0c01 	mov.w	ip, #1
 80075d6:	e7f6      	b.n	80075c6 <_strtod_l+0x28e>
 80075d8:	0800b118 	.word	0x0800b118
 80075dc:	0800aec8 	.word	0x0800aec8
 80075e0:	7ff00000 	.word	0x7ff00000
 80075e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075e6:	1c59      	adds	r1, r3, #1
 80075e8:	911d      	str	r1, [sp, #116]	; 0x74
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d0f9      	beq.n	80075e4 <_strtod_l+0x2ac>
 80075f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80075f4:	2908      	cmp	r1, #8
 80075f6:	f63f af79 	bhi.w	80074ec <_strtod_l+0x1b4>
 80075fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80075fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007600:	9308      	str	r3, [sp, #32]
 8007602:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007604:	1c59      	adds	r1, r3, #1
 8007606:	911d      	str	r1, [sp, #116]	; 0x74
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800760e:	2e09      	cmp	r6, #9
 8007610:	d937      	bls.n	8007682 <_strtod_l+0x34a>
 8007612:	9e08      	ldr	r6, [sp, #32]
 8007614:	1b89      	subs	r1, r1, r6
 8007616:	2908      	cmp	r1, #8
 8007618:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800761c:	dc02      	bgt.n	8007624 <_strtod_l+0x2ec>
 800761e:	4576      	cmp	r6, lr
 8007620:	bfa8      	it	ge
 8007622:	4676      	movge	r6, lr
 8007624:	f1bc 0f00 	cmp.w	ip, #0
 8007628:	d000      	beq.n	800762c <_strtod_l+0x2f4>
 800762a:	4276      	negs	r6, r6
 800762c:	2d00      	cmp	r5, #0
 800762e:	d14f      	bne.n	80076d0 <_strtod_l+0x398>
 8007630:	9904      	ldr	r1, [sp, #16]
 8007632:	4301      	orrs	r1, r0
 8007634:	f47f aec2 	bne.w	80073bc <_strtod_l+0x84>
 8007638:	2a00      	cmp	r2, #0
 800763a:	f47f aedb 	bne.w	80073f4 <_strtod_l+0xbc>
 800763e:	2b69      	cmp	r3, #105	; 0x69
 8007640:	d027      	beq.n	8007692 <_strtod_l+0x35a>
 8007642:	dc24      	bgt.n	800768e <_strtod_l+0x356>
 8007644:	2b49      	cmp	r3, #73	; 0x49
 8007646:	d024      	beq.n	8007692 <_strtod_l+0x35a>
 8007648:	2b4e      	cmp	r3, #78	; 0x4e
 800764a:	f47f aed3 	bne.w	80073f4 <_strtod_l+0xbc>
 800764e:	499e      	ldr	r1, [pc, #632]	; (80078c8 <_strtod_l+0x590>)
 8007650:	a81d      	add	r0, sp, #116	; 0x74
 8007652:	f001 fe41 	bl	80092d8 <__match>
 8007656:	2800      	cmp	r0, #0
 8007658:	f43f aecc 	beq.w	80073f4 <_strtod_l+0xbc>
 800765c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b28      	cmp	r3, #40	; 0x28
 8007662:	d12d      	bne.n	80076c0 <_strtod_l+0x388>
 8007664:	4999      	ldr	r1, [pc, #612]	; (80078cc <_strtod_l+0x594>)
 8007666:	aa20      	add	r2, sp, #128	; 0x80
 8007668:	a81d      	add	r0, sp, #116	; 0x74
 800766a:	f001 fe49 	bl	8009300 <__hexnan>
 800766e:	2805      	cmp	r0, #5
 8007670:	d126      	bne.n	80076c0 <_strtod_l+0x388>
 8007672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007674:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007678:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800767c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007680:	e69c      	b.n	80073bc <_strtod_l+0x84>
 8007682:	210a      	movs	r1, #10
 8007684:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007688:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800768c:	e7b9      	b.n	8007602 <_strtod_l+0x2ca>
 800768e:	2b6e      	cmp	r3, #110	; 0x6e
 8007690:	e7db      	b.n	800764a <_strtod_l+0x312>
 8007692:	498f      	ldr	r1, [pc, #572]	; (80078d0 <_strtod_l+0x598>)
 8007694:	a81d      	add	r0, sp, #116	; 0x74
 8007696:	f001 fe1f 	bl	80092d8 <__match>
 800769a:	2800      	cmp	r0, #0
 800769c:	f43f aeaa 	beq.w	80073f4 <_strtod_l+0xbc>
 80076a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076a2:	498c      	ldr	r1, [pc, #560]	; (80078d4 <_strtod_l+0x59c>)
 80076a4:	3b01      	subs	r3, #1
 80076a6:	a81d      	add	r0, sp, #116	; 0x74
 80076a8:	931d      	str	r3, [sp, #116]	; 0x74
 80076aa:	f001 fe15 	bl	80092d8 <__match>
 80076ae:	b910      	cbnz	r0, 80076b6 <_strtod_l+0x37e>
 80076b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076b2:	3301      	adds	r3, #1
 80076b4:	931d      	str	r3, [sp, #116]	; 0x74
 80076b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80078e4 <_strtod_l+0x5ac>
 80076ba:	f04f 0a00 	mov.w	sl, #0
 80076be:	e67d      	b.n	80073bc <_strtod_l+0x84>
 80076c0:	4885      	ldr	r0, [pc, #532]	; (80078d8 <_strtod_l+0x5a0>)
 80076c2:	f7fe fe31 	bl	8006328 <nan>
 80076c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80076ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80076ce:	e675      	b.n	80073bc <_strtod_l+0x84>
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d4:	1af3      	subs	r3, r6, r3
 80076d6:	2f00      	cmp	r7, #0
 80076d8:	bf08      	it	eq
 80076da:	462f      	moveq	r7, r5
 80076dc:	2d10      	cmp	r5, #16
 80076de:	9308      	str	r3, [sp, #32]
 80076e0:	46a8      	mov	r8, r5
 80076e2:	bfa8      	it	ge
 80076e4:	f04f 0810 	movge.w	r8, #16
 80076e8:	f7f8 ff2c 	bl	8000544 <__aeabi_ui2d>
 80076ec:	2d09      	cmp	r5, #9
 80076ee:	4682      	mov	sl, r0
 80076f0:	468b      	mov	fp, r1
 80076f2:	dd13      	ble.n	800771c <_strtod_l+0x3e4>
 80076f4:	4b79      	ldr	r3, [pc, #484]	; (80078dc <_strtod_l+0x5a4>)
 80076f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80076fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80076fe:	f7f8 ff9b 	bl	8000638 <__aeabi_dmul>
 8007702:	4682      	mov	sl, r0
 8007704:	4648      	mov	r0, r9
 8007706:	468b      	mov	fp, r1
 8007708:	f7f8 ff1c 	bl	8000544 <__aeabi_ui2d>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4650      	mov	r0, sl
 8007712:	4659      	mov	r1, fp
 8007714:	f7f8 fdda 	bl	80002cc <__adddf3>
 8007718:	4682      	mov	sl, r0
 800771a:	468b      	mov	fp, r1
 800771c:	2d0f      	cmp	r5, #15
 800771e:	dc38      	bgt.n	8007792 <_strtod_l+0x45a>
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f43f ae4a 	beq.w	80073bc <_strtod_l+0x84>
 8007728:	dd24      	ble.n	8007774 <_strtod_l+0x43c>
 800772a:	2b16      	cmp	r3, #22
 800772c:	dc0b      	bgt.n	8007746 <_strtod_l+0x40e>
 800772e:	4d6b      	ldr	r5, [pc, #428]	; (80078dc <_strtod_l+0x5a4>)
 8007730:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007734:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007738:	4652      	mov	r2, sl
 800773a:	465b      	mov	r3, fp
 800773c:	f7f8 ff7c 	bl	8000638 <__aeabi_dmul>
 8007740:	4682      	mov	sl, r0
 8007742:	468b      	mov	fp, r1
 8007744:	e63a      	b.n	80073bc <_strtod_l+0x84>
 8007746:	9a08      	ldr	r2, [sp, #32]
 8007748:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800774c:	4293      	cmp	r3, r2
 800774e:	db20      	blt.n	8007792 <_strtod_l+0x45a>
 8007750:	4c62      	ldr	r4, [pc, #392]	; (80078dc <_strtod_l+0x5a4>)
 8007752:	f1c5 050f 	rsb	r5, r5, #15
 8007756:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800775a:	4652      	mov	r2, sl
 800775c:	465b      	mov	r3, fp
 800775e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007762:	f7f8 ff69 	bl	8000638 <__aeabi_dmul>
 8007766:	9b08      	ldr	r3, [sp, #32]
 8007768:	1b5d      	subs	r5, r3, r5
 800776a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800776e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007772:	e7e3      	b.n	800773c <_strtod_l+0x404>
 8007774:	9b08      	ldr	r3, [sp, #32]
 8007776:	3316      	adds	r3, #22
 8007778:	db0b      	blt.n	8007792 <_strtod_l+0x45a>
 800777a:	9b07      	ldr	r3, [sp, #28]
 800777c:	4a57      	ldr	r2, [pc, #348]	; (80078dc <_strtod_l+0x5a4>)
 800777e:	1b9e      	subs	r6, r3, r6
 8007780:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007784:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007788:	4650      	mov	r0, sl
 800778a:	4659      	mov	r1, fp
 800778c:	f7f9 f87e 	bl	800088c <__aeabi_ddiv>
 8007790:	e7d6      	b.n	8007740 <_strtod_l+0x408>
 8007792:	9b08      	ldr	r3, [sp, #32]
 8007794:	eba5 0808 	sub.w	r8, r5, r8
 8007798:	4498      	add	r8, r3
 800779a:	f1b8 0f00 	cmp.w	r8, #0
 800779e:	dd71      	ble.n	8007884 <_strtod_l+0x54c>
 80077a0:	f018 030f 	ands.w	r3, r8, #15
 80077a4:	d00a      	beq.n	80077bc <_strtod_l+0x484>
 80077a6:	494d      	ldr	r1, [pc, #308]	; (80078dc <_strtod_l+0x5a4>)
 80077a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077ac:	4652      	mov	r2, sl
 80077ae:	465b      	mov	r3, fp
 80077b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b4:	f7f8 ff40 	bl	8000638 <__aeabi_dmul>
 80077b8:	4682      	mov	sl, r0
 80077ba:	468b      	mov	fp, r1
 80077bc:	f038 080f 	bics.w	r8, r8, #15
 80077c0:	d04d      	beq.n	800785e <_strtod_l+0x526>
 80077c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80077c6:	dd22      	ble.n	800780e <_strtod_l+0x4d6>
 80077c8:	2500      	movs	r5, #0
 80077ca:	462e      	mov	r6, r5
 80077cc:	9509      	str	r5, [sp, #36]	; 0x24
 80077ce:	9507      	str	r5, [sp, #28]
 80077d0:	2322      	movs	r3, #34	; 0x22
 80077d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80078e4 <_strtod_l+0x5ac>
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	f04f 0a00 	mov.w	sl, #0
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f43f adec 	beq.w	80073bc <_strtod_l+0x84>
 80077e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 fe92 	bl	8009510 <_Bfree>
 80077ec:	9907      	ldr	r1, [sp, #28]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f001 fe8e 	bl	8009510 <_Bfree>
 80077f4:	4631      	mov	r1, r6
 80077f6:	4620      	mov	r0, r4
 80077f8:	f001 fe8a 	bl	8009510 <_Bfree>
 80077fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077fe:	4620      	mov	r0, r4
 8007800:	f001 fe86 	bl	8009510 <_Bfree>
 8007804:	4629      	mov	r1, r5
 8007806:	4620      	mov	r0, r4
 8007808:	f001 fe82 	bl	8009510 <_Bfree>
 800780c:	e5d6      	b.n	80073bc <_strtod_l+0x84>
 800780e:	2300      	movs	r3, #0
 8007810:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007814:	4650      	mov	r0, sl
 8007816:	4659      	mov	r1, fp
 8007818:	4699      	mov	r9, r3
 800781a:	f1b8 0f01 	cmp.w	r8, #1
 800781e:	dc21      	bgt.n	8007864 <_strtod_l+0x52c>
 8007820:	b10b      	cbz	r3, 8007826 <_strtod_l+0x4ee>
 8007822:	4682      	mov	sl, r0
 8007824:	468b      	mov	fp, r1
 8007826:	4b2e      	ldr	r3, [pc, #184]	; (80078e0 <_strtod_l+0x5a8>)
 8007828:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800782c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007830:	4652      	mov	r2, sl
 8007832:	465b      	mov	r3, fp
 8007834:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007838:	f7f8 fefe 	bl	8000638 <__aeabi_dmul>
 800783c:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <_strtod_l+0x5ac>)
 800783e:	460a      	mov	r2, r1
 8007840:	400b      	ands	r3, r1
 8007842:	4929      	ldr	r1, [pc, #164]	; (80078e8 <_strtod_l+0x5b0>)
 8007844:	428b      	cmp	r3, r1
 8007846:	4682      	mov	sl, r0
 8007848:	d8be      	bhi.n	80077c8 <_strtod_l+0x490>
 800784a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800784e:	428b      	cmp	r3, r1
 8007850:	bf86      	itte	hi
 8007852:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80078ec <_strtod_l+0x5b4>
 8007856:	f04f 3aff 	movhi.w	sl, #4294967295
 800785a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800785e:	2300      	movs	r3, #0
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	e081      	b.n	8007968 <_strtod_l+0x630>
 8007864:	f018 0f01 	tst.w	r8, #1
 8007868:	d007      	beq.n	800787a <_strtod_l+0x542>
 800786a:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <_strtod_l+0x5a8>)
 800786c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fee0 	bl	8000638 <__aeabi_dmul>
 8007878:	2301      	movs	r3, #1
 800787a:	f109 0901 	add.w	r9, r9, #1
 800787e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007882:	e7ca      	b.n	800781a <_strtod_l+0x4e2>
 8007884:	d0eb      	beq.n	800785e <_strtod_l+0x526>
 8007886:	f1c8 0800 	rsb	r8, r8, #0
 800788a:	f018 020f 	ands.w	r2, r8, #15
 800788e:	d00a      	beq.n	80078a6 <_strtod_l+0x56e>
 8007890:	4b12      	ldr	r3, [pc, #72]	; (80078dc <_strtod_l+0x5a4>)
 8007892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007896:	4650      	mov	r0, sl
 8007898:	4659      	mov	r1, fp
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 fff5 	bl	800088c <__aeabi_ddiv>
 80078a2:	4682      	mov	sl, r0
 80078a4:	468b      	mov	fp, r1
 80078a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80078aa:	d0d8      	beq.n	800785e <_strtod_l+0x526>
 80078ac:	f1b8 0f1f 	cmp.w	r8, #31
 80078b0:	dd1e      	ble.n	80078f0 <_strtod_l+0x5b8>
 80078b2:	2500      	movs	r5, #0
 80078b4:	462e      	mov	r6, r5
 80078b6:	9509      	str	r5, [sp, #36]	; 0x24
 80078b8:	9507      	str	r5, [sp, #28]
 80078ba:	2322      	movs	r3, #34	; 0x22
 80078bc:	f04f 0a00 	mov.w	sl, #0
 80078c0:	f04f 0b00 	mov.w	fp, #0
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	e789      	b.n	80077dc <_strtod_l+0x4a4>
 80078c8:	0800ae99 	.word	0x0800ae99
 80078cc:	0800aedc 	.word	0x0800aedc
 80078d0:	0800ae91 	.word	0x0800ae91
 80078d4:	0800b01c 	.word	0x0800b01c
 80078d8:	0800b2d8 	.word	0x0800b2d8
 80078dc:	0800b1b8 	.word	0x0800b1b8
 80078e0:	0800b190 	.word	0x0800b190
 80078e4:	7ff00000 	.word	0x7ff00000
 80078e8:	7ca00000 	.word	0x7ca00000
 80078ec:	7fefffff 	.word	0x7fefffff
 80078f0:	f018 0310 	ands.w	r3, r8, #16
 80078f4:	bf18      	it	ne
 80078f6:	236a      	movne	r3, #106	; 0x6a
 80078f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007cb0 <_strtod_l+0x978>
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	4650      	mov	r0, sl
 8007900:	4659      	mov	r1, fp
 8007902:	2300      	movs	r3, #0
 8007904:	f018 0f01 	tst.w	r8, #1
 8007908:	d004      	beq.n	8007914 <_strtod_l+0x5dc>
 800790a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800790e:	f7f8 fe93 	bl	8000638 <__aeabi_dmul>
 8007912:	2301      	movs	r3, #1
 8007914:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007918:	f109 0908 	add.w	r9, r9, #8
 800791c:	d1f2      	bne.n	8007904 <_strtod_l+0x5cc>
 800791e:	b10b      	cbz	r3, 8007924 <_strtod_l+0x5ec>
 8007920:	4682      	mov	sl, r0
 8007922:	468b      	mov	fp, r1
 8007924:	9b04      	ldr	r3, [sp, #16]
 8007926:	b1bb      	cbz	r3, 8007958 <_strtod_l+0x620>
 8007928:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800792c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007930:	2b00      	cmp	r3, #0
 8007932:	4659      	mov	r1, fp
 8007934:	dd10      	ble.n	8007958 <_strtod_l+0x620>
 8007936:	2b1f      	cmp	r3, #31
 8007938:	f340 8128 	ble.w	8007b8c <_strtod_l+0x854>
 800793c:	2b34      	cmp	r3, #52	; 0x34
 800793e:	bfde      	ittt	le
 8007940:	3b20      	suble	r3, #32
 8007942:	f04f 32ff 	movle.w	r2, #4294967295
 8007946:	fa02 f303 	lslle.w	r3, r2, r3
 800794a:	f04f 0a00 	mov.w	sl, #0
 800794e:	bfcc      	ite	gt
 8007950:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007954:	ea03 0b01 	andle.w	fp, r3, r1
 8007958:	2200      	movs	r2, #0
 800795a:	2300      	movs	r3, #0
 800795c:	4650      	mov	r0, sl
 800795e:	4659      	mov	r1, fp
 8007960:	f7f9 f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 8007964:	2800      	cmp	r0, #0
 8007966:	d1a4      	bne.n	80078b2 <_strtod_l+0x57a>
 8007968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800796e:	462b      	mov	r3, r5
 8007970:	463a      	mov	r2, r7
 8007972:	4620      	mov	r0, r4
 8007974:	f001 fe38 	bl	80095e8 <__s2b>
 8007978:	9009      	str	r0, [sp, #36]	; 0x24
 800797a:	2800      	cmp	r0, #0
 800797c:	f43f af24 	beq.w	80077c8 <_strtod_l+0x490>
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	1b9e      	subs	r6, r3, r6
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	2b00      	cmp	r3, #0
 8007988:	bfb4      	ite	lt
 800798a:	4633      	movlt	r3, r6
 800798c:	2300      	movge	r3, #0
 800798e:	9310      	str	r3, [sp, #64]	; 0x40
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	2500      	movs	r5, #0
 8007994:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007998:	9318      	str	r3, [sp, #96]	; 0x60
 800799a:	462e      	mov	r6, r5
 800799c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799e:	4620      	mov	r0, r4
 80079a0:	6859      	ldr	r1, [r3, #4]
 80079a2:	f001 fd75 	bl	8009490 <_Balloc>
 80079a6:	9007      	str	r0, [sp, #28]
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f43f af11 	beq.w	80077d0 <_strtod_l+0x498>
 80079ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	3202      	adds	r2, #2
 80079b4:	f103 010c 	add.w	r1, r3, #12
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	300c      	adds	r0, #12
 80079bc:	f001 fd5a 	bl	8009474 <memcpy>
 80079c0:	ec4b ab10 	vmov	d0, sl, fp
 80079c4:	aa20      	add	r2, sp, #128	; 0x80
 80079c6:	a91f      	add	r1, sp, #124	; 0x7c
 80079c8:	4620      	mov	r0, r4
 80079ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80079ce:	f002 f947 	bl	8009c60 <__d2b>
 80079d2:	901e      	str	r0, [sp, #120]	; 0x78
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f43f aefb 	beq.w	80077d0 <_strtod_l+0x498>
 80079da:	2101      	movs	r1, #1
 80079dc:	4620      	mov	r0, r4
 80079de:	f001 fe9d 	bl	800971c <__i2b>
 80079e2:	4606      	mov	r6, r0
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f43f aef3 	beq.w	80077d0 <_strtod_l+0x498>
 80079ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079ec:	9904      	ldr	r1, [sp, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfab      	itete	ge
 80079f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80079f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80079f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80079f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80079fc:	bfac      	ite	ge
 80079fe:	eb03 0902 	addge.w	r9, r3, r2
 8007a02:	1ad7      	sublt	r7, r2, r3
 8007a04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a06:	eba3 0801 	sub.w	r8, r3, r1
 8007a0a:	4490      	add	r8, r2
 8007a0c:	4ba3      	ldr	r3, [pc, #652]	; (8007c9c <_strtod_l+0x964>)
 8007a0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a12:	4598      	cmp	r8, r3
 8007a14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a18:	f280 80cc 	bge.w	8007bb4 <_strtod_l+0x87c>
 8007a1c:	eba3 0308 	sub.w	r3, r3, r8
 8007a20:	2b1f      	cmp	r3, #31
 8007a22:	eba2 0203 	sub.w	r2, r2, r3
 8007a26:	f04f 0101 	mov.w	r1, #1
 8007a2a:	f300 80b6 	bgt.w	8007b9a <_strtod_l+0x862>
 8007a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a32:	9311      	str	r3, [sp, #68]	; 0x44
 8007a34:	2300      	movs	r3, #0
 8007a36:	930c      	str	r3, [sp, #48]	; 0x30
 8007a38:	eb09 0802 	add.w	r8, r9, r2
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	45c1      	cmp	r9, r8
 8007a40:	4417      	add	r7, r2
 8007a42:	441f      	add	r7, r3
 8007a44:	464b      	mov	r3, r9
 8007a46:	bfa8      	it	ge
 8007a48:	4643      	movge	r3, r8
 8007a4a:	42bb      	cmp	r3, r7
 8007a4c:	bfa8      	it	ge
 8007a4e:	463b      	movge	r3, r7
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bfc2      	ittt	gt
 8007a54:	eba8 0803 	subgt.w	r8, r8, r3
 8007a58:	1aff      	subgt	r7, r7, r3
 8007a5a:	eba9 0903 	subgt.w	r9, r9, r3
 8007a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dd17      	ble.n	8007a94 <_strtod_l+0x75c>
 8007a64:	4631      	mov	r1, r6
 8007a66:	461a      	mov	r2, r3
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f001 ff13 	bl	8009894 <__pow5mult>
 8007a6e:	4606      	mov	r6, r0
 8007a70:	2800      	cmp	r0, #0
 8007a72:	f43f aead 	beq.w	80077d0 <_strtod_l+0x498>
 8007a76:	4601      	mov	r1, r0
 8007a78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f001 fe64 	bl	8009748 <__multiply>
 8007a80:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f43f aea4 	beq.w	80077d0 <_strtod_l+0x498>
 8007a88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f001 fd40 	bl	8009510 <_Bfree>
 8007a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a92:	931e      	str	r3, [sp, #120]	; 0x78
 8007a94:	f1b8 0f00 	cmp.w	r8, #0
 8007a98:	f300 8091 	bgt.w	8007bbe <_strtod_l+0x886>
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dd08      	ble.n	8007ab4 <_strtod_l+0x77c>
 8007aa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007aa4:	9907      	ldr	r1, [sp, #28]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f001 fef4 	bl	8009894 <__pow5mult>
 8007aac:	9007      	str	r0, [sp, #28]
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f43f ae8e 	beq.w	80077d0 <_strtod_l+0x498>
 8007ab4:	2f00      	cmp	r7, #0
 8007ab6:	dd08      	ble.n	8007aca <_strtod_l+0x792>
 8007ab8:	9907      	ldr	r1, [sp, #28]
 8007aba:	463a      	mov	r2, r7
 8007abc:	4620      	mov	r0, r4
 8007abe:	f001 ff43 	bl	8009948 <__lshift>
 8007ac2:	9007      	str	r0, [sp, #28]
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f43f ae83 	beq.w	80077d0 <_strtod_l+0x498>
 8007aca:	f1b9 0f00 	cmp.w	r9, #0
 8007ace:	dd08      	ble.n	8007ae2 <_strtod_l+0x7aa>
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	464a      	mov	r2, r9
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f001 ff37 	bl	8009948 <__lshift>
 8007ada:	4606      	mov	r6, r0
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f43f ae77 	beq.w	80077d0 <_strtod_l+0x498>
 8007ae2:	9a07      	ldr	r2, [sp, #28]
 8007ae4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f001 ffb6 	bl	8009a58 <__mdiff>
 8007aec:	4605      	mov	r5, r0
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f43f ae6e 	beq.w	80077d0 <_strtod_l+0x498>
 8007af4:	68c3      	ldr	r3, [r0, #12]
 8007af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007af8:	2300      	movs	r3, #0
 8007afa:	60c3      	str	r3, [r0, #12]
 8007afc:	4631      	mov	r1, r6
 8007afe:	f001 ff8f 	bl	8009a20 <__mcmp>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	da65      	bge.n	8007bd2 <_strtod_l+0x89a>
 8007b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b08:	ea53 030a 	orrs.w	r3, r3, sl
 8007b0c:	f040 8087 	bne.w	8007c1e <_strtod_l+0x8e6>
 8007b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 8082 	bne.w	8007c1e <_strtod_l+0x8e6>
 8007b1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b1e:	0d1b      	lsrs	r3, r3, #20
 8007b20:	051b      	lsls	r3, r3, #20
 8007b22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b26:	d97a      	bls.n	8007c1e <_strtod_l+0x8e6>
 8007b28:	696b      	ldr	r3, [r5, #20]
 8007b2a:	b913      	cbnz	r3, 8007b32 <_strtod_l+0x7fa>
 8007b2c:	692b      	ldr	r3, [r5, #16]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	dd75      	ble.n	8007c1e <_strtod_l+0x8e6>
 8007b32:	4629      	mov	r1, r5
 8007b34:	2201      	movs	r2, #1
 8007b36:	4620      	mov	r0, r4
 8007b38:	f001 ff06 	bl	8009948 <__lshift>
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4605      	mov	r5, r0
 8007b40:	f001 ff6e 	bl	8009a20 <__mcmp>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dd6a      	ble.n	8007c1e <_strtod_l+0x8e6>
 8007b48:	9904      	ldr	r1, [sp, #16]
 8007b4a:	4a55      	ldr	r2, [pc, #340]	; (8007ca0 <_strtod_l+0x968>)
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	f000 8085 	beq.w	8007c5e <_strtod_l+0x926>
 8007b54:	ea02 010b 	and.w	r1, r2, fp
 8007b58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b5c:	dc7f      	bgt.n	8007c5e <_strtod_l+0x926>
 8007b5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b62:	f77f aeaa 	ble.w	80078ba <_strtod_l+0x582>
 8007b66:	4a4f      	ldr	r2, [pc, #316]	; (8007ca4 <_strtod_l+0x96c>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007b6e:	4650      	mov	r0, sl
 8007b70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007b74:	4659      	mov	r1, fp
 8007b76:	f7f8 fd5f 	bl	8000638 <__aeabi_dmul>
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4303      	orrs	r3, r0
 8007b7e:	bf08      	it	eq
 8007b80:	2322      	moveq	r3, #34	; 0x22
 8007b82:	4682      	mov	sl, r0
 8007b84:	468b      	mov	fp, r1
 8007b86:	bf08      	it	eq
 8007b88:	6023      	streq	r3, [r4, #0]
 8007b8a:	e62b      	b.n	80077e4 <_strtod_l+0x4ac>
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	fa02 f303 	lsl.w	r3, r2, r3
 8007b94:	ea03 0a0a 	and.w	sl, r3, sl
 8007b98:	e6de      	b.n	8007958 <_strtod_l+0x620>
 8007b9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007ba2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ba6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007baa:	fa01 f308 	lsl.w	r3, r1, r8
 8007bae:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb0:	9111      	str	r1, [sp, #68]	; 0x44
 8007bb2:	e741      	b.n	8007a38 <_strtod_l+0x700>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb8:	2301      	movs	r3, #1
 8007bba:	9311      	str	r3, [sp, #68]	; 0x44
 8007bbc:	e73c      	b.n	8007a38 <_strtod_l+0x700>
 8007bbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f001 fec0 	bl	8009948 <__lshift>
 8007bc8:	901e      	str	r0, [sp, #120]	; 0x78
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f47f af66 	bne.w	8007a9c <_strtod_l+0x764>
 8007bd0:	e5fe      	b.n	80077d0 <_strtod_l+0x498>
 8007bd2:	465f      	mov	r7, fp
 8007bd4:	d16e      	bne.n	8007cb4 <_strtod_l+0x97c>
 8007bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bdc:	b342      	cbz	r2, 8007c30 <_strtod_l+0x8f8>
 8007bde:	4a32      	ldr	r2, [pc, #200]	; (8007ca8 <_strtod_l+0x970>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d128      	bne.n	8007c36 <_strtod_l+0x8fe>
 8007be4:	9b04      	ldr	r3, [sp, #16]
 8007be6:	4650      	mov	r0, sl
 8007be8:	b1eb      	cbz	r3, 8007c26 <_strtod_l+0x8ee>
 8007bea:	4a2d      	ldr	r2, [pc, #180]	; (8007ca0 <_strtod_l+0x968>)
 8007bec:	403a      	ands	r2, r7
 8007bee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8007bf6:	d819      	bhi.n	8007c2c <_strtod_l+0x8f4>
 8007bf8:	0d12      	lsrs	r2, r2, #20
 8007bfa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007c02:	4298      	cmp	r0, r3
 8007c04:	d117      	bne.n	8007c36 <_strtod_l+0x8fe>
 8007c06:	4b29      	ldr	r3, [pc, #164]	; (8007cac <_strtod_l+0x974>)
 8007c08:	429f      	cmp	r7, r3
 8007c0a:	d102      	bne.n	8007c12 <_strtod_l+0x8da>
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f addf 	beq.w	80077d0 <_strtod_l+0x498>
 8007c12:	4b23      	ldr	r3, [pc, #140]	; (8007ca0 <_strtod_l+0x968>)
 8007c14:	403b      	ands	r3, r7
 8007c16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c1a:	f04f 0a00 	mov.w	sl, #0
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1a0      	bne.n	8007b66 <_strtod_l+0x82e>
 8007c24:	e5de      	b.n	80077e4 <_strtod_l+0x4ac>
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2a:	e7ea      	b.n	8007c02 <_strtod_l+0x8ca>
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	e7e8      	b.n	8007c02 <_strtod_l+0x8ca>
 8007c30:	ea53 030a 	orrs.w	r3, r3, sl
 8007c34:	d088      	beq.n	8007b48 <_strtod_l+0x810>
 8007c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c38:	b1db      	cbz	r3, 8007c72 <_strtod_l+0x93a>
 8007c3a:	423b      	tst	r3, r7
 8007c3c:	d0ef      	beq.n	8007c1e <_strtod_l+0x8e6>
 8007c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c40:	9a04      	ldr	r2, [sp, #16]
 8007c42:	4650      	mov	r0, sl
 8007c44:	4659      	mov	r1, fp
 8007c46:	b1c3      	cbz	r3, 8007c7a <_strtod_l+0x942>
 8007c48:	f7ff fb5a 	bl	8007300 <sulp>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c54:	f7f8 fb3a 	bl	80002cc <__adddf3>
 8007c58:	4682      	mov	sl, r0
 8007c5a:	468b      	mov	fp, r1
 8007c5c:	e7df      	b.n	8007c1e <_strtod_l+0x8e6>
 8007c5e:	4013      	ands	r3, r2
 8007c60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c6c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c70:	e7d5      	b.n	8007c1e <_strtod_l+0x8e6>
 8007c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c74:	ea13 0f0a 	tst.w	r3, sl
 8007c78:	e7e0      	b.n	8007c3c <_strtod_l+0x904>
 8007c7a:	f7ff fb41 	bl	8007300 <sulp>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c86:	f7f8 fb1f 	bl	80002c8 <__aeabi_dsub>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4682      	mov	sl, r0
 8007c90:	468b      	mov	fp, r1
 8007c92:	f7f8 ff39 	bl	8000b08 <__aeabi_dcmpeq>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d0c1      	beq.n	8007c1e <_strtod_l+0x8e6>
 8007c9a:	e60e      	b.n	80078ba <_strtod_l+0x582>
 8007c9c:	fffffc02 	.word	0xfffffc02
 8007ca0:	7ff00000 	.word	0x7ff00000
 8007ca4:	39500000 	.word	0x39500000
 8007ca8:	000fffff 	.word	0x000fffff
 8007cac:	7fefffff 	.word	0x7fefffff
 8007cb0:	0800aef0 	.word	0x0800aef0
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f002 f82e 	bl	8009d18 <__ratio>
 8007cbc:	ec59 8b10 	vmov	r8, r9, d0
 8007cc0:	ee10 0a10 	vmov	r0, s0
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 ff30 	bl	8000b30 <__aeabi_dcmple>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d07c      	beq.n	8007dce <_strtod_l+0xa96>
 8007cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d04c      	beq.n	8007d74 <_strtod_l+0xa3c>
 8007cda:	4b95      	ldr	r3, [pc, #596]	; (8007f30 <_strtod_l+0xbf8>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007ce2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007f30 <_strtod_l+0xbf8>
 8007ce6:	f04f 0800 	mov.w	r8, #0
 8007cea:	4b92      	ldr	r3, [pc, #584]	; (8007f34 <_strtod_l+0xbfc>)
 8007cec:	403b      	ands	r3, r7
 8007cee:	9311      	str	r3, [sp, #68]	; 0x44
 8007cf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007cf2:	4b91      	ldr	r3, [pc, #580]	; (8007f38 <_strtod_l+0xc00>)
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	f040 80b2 	bne.w	8007e5e <_strtod_l+0xb26>
 8007cfa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d02:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007d06:	ec4b ab10 	vmov	d0, sl, fp
 8007d0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007d0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d12:	f001 ff29 	bl	8009b68 <__ulp>
 8007d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d1a:	ec53 2b10 	vmov	r2, r3, d0
 8007d1e:	f7f8 fc8b 	bl	8000638 <__aeabi_dmul>
 8007d22:	4652      	mov	r2, sl
 8007d24:	465b      	mov	r3, fp
 8007d26:	f7f8 fad1 	bl	80002cc <__adddf3>
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4981      	ldr	r1, [pc, #516]	; (8007f34 <_strtod_l+0xbfc>)
 8007d2e:	4a83      	ldr	r2, [pc, #524]	; (8007f3c <_strtod_l+0xc04>)
 8007d30:	4019      	ands	r1, r3
 8007d32:	4291      	cmp	r1, r2
 8007d34:	4682      	mov	sl, r0
 8007d36:	d95e      	bls.n	8007df6 <_strtod_l+0xabe>
 8007d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d103      	bne.n	8007d4a <_strtod_l+0xa12>
 8007d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d44:	3301      	adds	r3, #1
 8007d46:	f43f ad43 	beq.w	80077d0 <_strtod_l+0x498>
 8007d4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007f48 <_strtod_l+0xc10>
 8007d4e:	f04f 3aff 	mov.w	sl, #4294967295
 8007d52:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d54:	4620      	mov	r0, r4
 8007d56:	f001 fbdb 	bl	8009510 <_Bfree>
 8007d5a:	9907      	ldr	r1, [sp, #28]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f001 fbd7 	bl	8009510 <_Bfree>
 8007d62:	4631      	mov	r1, r6
 8007d64:	4620      	mov	r0, r4
 8007d66:	f001 fbd3 	bl	8009510 <_Bfree>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f001 fbcf 	bl	8009510 <_Bfree>
 8007d72:	e613      	b.n	800799c <_strtod_l+0x664>
 8007d74:	f1ba 0f00 	cmp.w	sl, #0
 8007d78:	d11b      	bne.n	8007db2 <_strtod_l+0xa7a>
 8007d7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d7e:	b9f3      	cbnz	r3, 8007dbe <_strtod_l+0xa86>
 8007d80:	4b6b      	ldr	r3, [pc, #428]	; (8007f30 <_strtod_l+0xbf8>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	4640      	mov	r0, r8
 8007d86:	4649      	mov	r1, r9
 8007d88:	f7f8 fec8 	bl	8000b1c <__aeabi_dcmplt>
 8007d8c:	b9d0      	cbnz	r0, 8007dc4 <_strtod_l+0xa8c>
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	4b6b      	ldr	r3, [pc, #428]	; (8007f40 <_strtod_l+0xc08>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	f7f8 fc4f 	bl	8000638 <__aeabi_dmul>
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	4689      	mov	r9, r1
 8007d9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007da2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007da6:	931b      	str	r3, [sp, #108]	; 0x6c
 8007da8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007dac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007db0:	e79b      	b.n	8007cea <_strtod_l+0x9b2>
 8007db2:	f1ba 0f01 	cmp.w	sl, #1
 8007db6:	d102      	bne.n	8007dbe <_strtod_l+0xa86>
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	f43f ad7e 	beq.w	80078ba <_strtod_l+0x582>
 8007dbe:	4b61      	ldr	r3, [pc, #388]	; (8007f44 <_strtod_l+0xc0c>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	e78c      	b.n	8007cde <_strtod_l+0x9a6>
 8007dc4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007f40 <_strtod_l+0xc08>
 8007dc8:	f04f 0800 	mov.w	r8, #0
 8007dcc:	e7e7      	b.n	8007d9e <_strtod_l+0xa66>
 8007dce:	4b5c      	ldr	r3, [pc, #368]	; (8007f40 <_strtod_l+0xc08>)
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f7f8 fc2f 	bl	8000638 <__aeabi_dmul>
 8007dda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ddc:	4680      	mov	r8, r0
 8007dde:	4689      	mov	r9, r1
 8007de0:	b933      	cbnz	r3, 8007df0 <_strtod_l+0xab8>
 8007de2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007de6:	9012      	str	r0, [sp, #72]	; 0x48
 8007de8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007dea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007dee:	e7dd      	b.n	8007dac <_strtod_l+0xa74>
 8007df0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007df4:	e7f9      	b.n	8007dea <_strtod_l+0xab2>
 8007df6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1a8      	bne.n	8007d52 <_strtod_l+0xa1a>
 8007e00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e06:	0d1b      	lsrs	r3, r3, #20
 8007e08:	051b      	lsls	r3, r3, #20
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d1a1      	bne.n	8007d52 <_strtod_l+0xa1a>
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7f8 ff71 	bl	8000cf8 <__aeabi_d2lz>
 8007e16:	f7f8 fbe1 	bl	80005dc <__aeabi_l2d>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4649      	mov	r1, r9
 8007e22:	f7f8 fa51 	bl	80002c8 <__aeabi_dsub>
 8007e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e2c:	ea43 030a 	orr.w	r3, r3, sl
 8007e30:	4313      	orrs	r3, r2
 8007e32:	4680      	mov	r8, r0
 8007e34:	4689      	mov	r9, r1
 8007e36:	d053      	beq.n	8007ee0 <_strtod_l+0xba8>
 8007e38:	a335      	add	r3, pc, #212	; (adr r3, 8007f10 <_strtod_l+0xbd8>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fe6d 	bl	8000b1c <__aeabi_dcmplt>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	f47f acce 	bne.w	80077e4 <_strtod_l+0x4ac>
 8007e48:	a333      	add	r3, pc, #204	; (adr r3, 8007f18 <_strtod_l+0xbe0>)
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 fe81 	bl	8000b58 <__aeabi_dcmpgt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f43f af7b 	beq.w	8007d52 <_strtod_l+0xa1a>
 8007e5c:	e4c2      	b.n	80077e4 <_strtod_l+0x4ac>
 8007e5e:	9b04      	ldr	r3, [sp, #16]
 8007e60:	b333      	cbz	r3, 8007eb0 <_strtod_l+0xb78>
 8007e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e68:	d822      	bhi.n	8007eb0 <_strtod_l+0xb78>
 8007e6a:	a32d      	add	r3, pc, #180	; (adr r3, 8007f20 <_strtod_l+0xbe8>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 fe5c 	bl	8000b30 <__aeabi_dcmple>
 8007e78:	b1a0      	cbz	r0, 8007ea4 <_strtod_l+0xb6c>
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	f7f8 feb3 	bl	8000be8 <__aeabi_d2uiz>
 8007e82:	2801      	cmp	r0, #1
 8007e84:	bf38      	it	cc
 8007e86:	2001      	movcc	r0, #1
 8007e88:	f7f8 fb5c 	bl	8000544 <__aeabi_ui2d>
 8007e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e8e:	4680      	mov	r8, r0
 8007e90:	4689      	mov	r9, r1
 8007e92:	bb13      	cbnz	r3, 8007eda <_strtod_l+0xba2>
 8007e94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e98:	9014      	str	r0, [sp, #80]	; 0x50
 8007e9a:	9315      	str	r3, [sp, #84]	; 0x54
 8007e9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ea0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ea8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	930d      	str	r3, [sp, #52]	; 0x34
 8007eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eb4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007eb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ebc:	f001 fe54 	bl	8009b68 <__ulp>
 8007ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ec4:	ec53 2b10 	vmov	r2, r3, d0
 8007ec8:	f7f8 fbb6 	bl	8000638 <__aeabi_dmul>
 8007ecc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ed0:	f7f8 f9fc 	bl	80002cc <__adddf3>
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	468b      	mov	fp, r1
 8007ed8:	e78f      	b.n	8007dfa <_strtod_l+0xac2>
 8007eda:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007ede:	e7dd      	b.n	8007e9c <_strtod_l+0xb64>
 8007ee0:	a311      	add	r3, pc, #68	; (adr r3, 8007f28 <_strtod_l+0xbf0>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 fe19 	bl	8000b1c <__aeabi_dcmplt>
 8007eea:	e7b4      	b.n	8007e56 <_strtod_l+0xb1e>
 8007eec:	2300      	movs	r3, #0
 8007eee:	930e      	str	r3, [sp, #56]	; 0x38
 8007ef0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ef2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	f7ff ba65 	b.w	80073c4 <_strtod_l+0x8c>
 8007efa:	2b65      	cmp	r3, #101	; 0x65
 8007efc:	f43f ab5d 	beq.w	80075ba <_strtod_l+0x282>
 8007f00:	2b45      	cmp	r3, #69	; 0x45
 8007f02:	f43f ab5a 	beq.w	80075ba <_strtod_l+0x282>
 8007f06:	2201      	movs	r2, #1
 8007f08:	f7ff bb92 	b.w	8007630 <_strtod_l+0x2f8>
 8007f0c:	f3af 8000 	nop.w
 8007f10:	94a03595 	.word	0x94a03595
 8007f14:	3fdfffff 	.word	0x3fdfffff
 8007f18:	35afe535 	.word	0x35afe535
 8007f1c:	3fe00000 	.word	0x3fe00000
 8007f20:	ffc00000 	.word	0xffc00000
 8007f24:	41dfffff 	.word	0x41dfffff
 8007f28:	94a03595 	.word	0x94a03595
 8007f2c:	3fcfffff 	.word	0x3fcfffff
 8007f30:	3ff00000 	.word	0x3ff00000
 8007f34:	7ff00000 	.word	0x7ff00000
 8007f38:	7fe00000 	.word	0x7fe00000
 8007f3c:	7c9fffff 	.word	0x7c9fffff
 8007f40:	3fe00000 	.word	0x3fe00000
 8007f44:	bff00000 	.word	0xbff00000
 8007f48:	7fefffff 	.word	0x7fefffff

08007f4c <_strtod_r>:
 8007f4c:	4b01      	ldr	r3, [pc, #4]	; (8007f54 <_strtod_r+0x8>)
 8007f4e:	f7ff b9f3 	b.w	8007338 <_strtod_l>
 8007f52:	bf00      	nop
 8007f54:	20000074 	.word	0x20000074

08007f58 <_strtol_l.isra.0>:
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5e:	d001      	beq.n	8007f64 <_strtol_l.isra.0+0xc>
 8007f60:	2b24      	cmp	r3, #36	; 0x24
 8007f62:	d906      	bls.n	8007f72 <_strtol_l.isra.0+0x1a>
 8007f64:	f7fe fb00 	bl	8006568 <__errno>
 8007f68:	2316      	movs	r3, #22
 8007f6a:	6003      	str	r3, [r0, #0]
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	4f3a      	ldr	r7, [pc, #232]	; (800805c <_strtol_l.isra.0+0x104>)
 8007f74:	468e      	mov	lr, r1
 8007f76:	4676      	mov	r6, lr
 8007f78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f7c:	5de5      	ldrb	r5, [r4, r7]
 8007f7e:	f015 0508 	ands.w	r5, r5, #8
 8007f82:	d1f8      	bne.n	8007f76 <_strtol_l.isra.0+0x1e>
 8007f84:	2c2d      	cmp	r4, #45	; 0x2d
 8007f86:	d134      	bne.n	8007ff2 <_strtol_l.isra.0+0x9a>
 8007f88:	f89e 4000 	ldrb.w	r4, [lr]
 8007f8c:	f04f 0801 	mov.w	r8, #1
 8007f90:	f106 0e02 	add.w	lr, r6, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d05c      	beq.n	8008052 <_strtol_l.isra.0+0xfa>
 8007f98:	2b10      	cmp	r3, #16
 8007f9a:	d10c      	bne.n	8007fb6 <_strtol_l.isra.0+0x5e>
 8007f9c:	2c30      	cmp	r4, #48	; 0x30
 8007f9e:	d10a      	bne.n	8007fb6 <_strtol_l.isra.0+0x5e>
 8007fa0:	f89e 4000 	ldrb.w	r4, [lr]
 8007fa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fa8:	2c58      	cmp	r4, #88	; 0x58
 8007faa:	d14d      	bne.n	8008048 <_strtol_l.isra.0+0xf0>
 8007fac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	f10e 0e02 	add.w	lr, lr, #2
 8007fb6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007fba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	fbbc f9f3 	udiv	r9, ip, r3
 8007fc4:	4635      	mov	r5, r6
 8007fc6:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007fce:	2f09      	cmp	r7, #9
 8007fd0:	d818      	bhi.n	8008004 <_strtol_l.isra.0+0xac>
 8007fd2:	463c      	mov	r4, r7
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	dd24      	ble.n	8008022 <_strtol_l.isra.0+0xca>
 8007fd8:	2e00      	cmp	r6, #0
 8007fda:	db1f      	blt.n	800801c <_strtol_l.isra.0+0xc4>
 8007fdc:	45a9      	cmp	r9, r5
 8007fde:	d31d      	bcc.n	800801c <_strtol_l.isra.0+0xc4>
 8007fe0:	d101      	bne.n	8007fe6 <_strtol_l.isra.0+0x8e>
 8007fe2:	45a2      	cmp	sl, r4
 8007fe4:	db1a      	blt.n	800801c <_strtol_l.isra.0+0xc4>
 8007fe6:	fb05 4503 	mla	r5, r5, r3, r4
 8007fea:	2601      	movs	r6, #1
 8007fec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ff0:	e7eb      	b.n	8007fca <_strtol_l.isra.0+0x72>
 8007ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ff4:	bf08      	it	eq
 8007ff6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007ffa:	46a8      	mov	r8, r5
 8007ffc:	bf08      	it	eq
 8007ffe:	f106 0e02 	addeq.w	lr, r6, #2
 8008002:	e7c7      	b.n	8007f94 <_strtol_l.isra.0+0x3c>
 8008004:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008008:	2f19      	cmp	r7, #25
 800800a:	d801      	bhi.n	8008010 <_strtol_l.isra.0+0xb8>
 800800c:	3c37      	subs	r4, #55	; 0x37
 800800e:	e7e1      	b.n	8007fd4 <_strtol_l.isra.0+0x7c>
 8008010:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008014:	2f19      	cmp	r7, #25
 8008016:	d804      	bhi.n	8008022 <_strtol_l.isra.0+0xca>
 8008018:	3c57      	subs	r4, #87	; 0x57
 800801a:	e7db      	b.n	8007fd4 <_strtol_l.isra.0+0x7c>
 800801c:	f04f 36ff 	mov.w	r6, #4294967295
 8008020:	e7e4      	b.n	8007fec <_strtol_l.isra.0+0x94>
 8008022:	2e00      	cmp	r6, #0
 8008024:	da05      	bge.n	8008032 <_strtol_l.isra.0+0xda>
 8008026:	2322      	movs	r3, #34	; 0x22
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	4665      	mov	r5, ip
 800802c:	b942      	cbnz	r2, 8008040 <_strtol_l.isra.0+0xe8>
 800802e:	4628      	mov	r0, r5
 8008030:	e79d      	b.n	8007f6e <_strtol_l.isra.0+0x16>
 8008032:	f1b8 0f00 	cmp.w	r8, #0
 8008036:	d000      	beq.n	800803a <_strtol_l.isra.0+0xe2>
 8008038:	426d      	negs	r5, r5
 800803a:	2a00      	cmp	r2, #0
 800803c:	d0f7      	beq.n	800802e <_strtol_l.isra.0+0xd6>
 800803e:	b10e      	cbz	r6, 8008044 <_strtol_l.isra.0+0xec>
 8008040:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008044:	6011      	str	r1, [r2, #0]
 8008046:	e7f2      	b.n	800802e <_strtol_l.isra.0+0xd6>
 8008048:	2430      	movs	r4, #48	; 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1b3      	bne.n	8007fb6 <_strtol_l.isra.0+0x5e>
 800804e:	2308      	movs	r3, #8
 8008050:	e7b1      	b.n	8007fb6 <_strtol_l.isra.0+0x5e>
 8008052:	2c30      	cmp	r4, #48	; 0x30
 8008054:	d0a4      	beq.n	8007fa0 <_strtol_l.isra.0+0x48>
 8008056:	230a      	movs	r3, #10
 8008058:	e7ad      	b.n	8007fb6 <_strtol_l.isra.0+0x5e>
 800805a:	bf00      	nop
 800805c:	0800af19 	.word	0x0800af19

08008060 <_strtol_r>:
 8008060:	f7ff bf7a 	b.w	8007f58 <_strtol_l.isra.0>

08008064 <quorem>:
 8008064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	6903      	ldr	r3, [r0, #16]
 800806a:	690c      	ldr	r4, [r1, #16]
 800806c:	42a3      	cmp	r3, r4
 800806e:	4607      	mov	r7, r0
 8008070:	f2c0 8081 	blt.w	8008176 <quorem+0x112>
 8008074:	3c01      	subs	r4, #1
 8008076:	f101 0814 	add.w	r8, r1, #20
 800807a:	f100 0514 	add.w	r5, r0, #20
 800807e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800808c:	3301      	adds	r3, #1
 800808e:	429a      	cmp	r2, r3
 8008090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008094:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008098:	fbb2 f6f3 	udiv	r6, r2, r3
 800809c:	d331      	bcc.n	8008102 <quorem+0x9e>
 800809e:	f04f 0e00 	mov.w	lr, #0
 80080a2:	4640      	mov	r0, r8
 80080a4:	46ac      	mov	ip, r5
 80080a6:	46f2      	mov	sl, lr
 80080a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80080ac:	b293      	uxth	r3, r2
 80080ae:	fb06 e303 	mla	r3, r6, r3, lr
 80080b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	ebaa 0303 	sub.w	r3, sl, r3
 80080bc:	0c12      	lsrs	r2, r2, #16
 80080be:	f8dc a000 	ldr.w	sl, [ip]
 80080c2:	fb06 e202 	mla	r2, r6, r2, lr
 80080c6:	fa13 f38a 	uxtah	r3, r3, sl
 80080ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080ce:	fa1f fa82 	uxth.w	sl, r2
 80080d2:	f8dc 2000 	ldr.w	r2, [ip]
 80080d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80080da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080de:	b29b      	uxth	r3, r3
 80080e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080e4:	4581      	cmp	r9, r0
 80080e6:	f84c 3b04 	str.w	r3, [ip], #4
 80080ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080ee:	d2db      	bcs.n	80080a8 <quorem+0x44>
 80080f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80080f4:	b92b      	cbnz	r3, 8008102 <quorem+0x9e>
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	3b04      	subs	r3, #4
 80080fa:	429d      	cmp	r5, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	d32e      	bcc.n	800815e <quorem+0xfa>
 8008100:	613c      	str	r4, [r7, #16]
 8008102:	4638      	mov	r0, r7
 8008104:	f001 fc8c 	bl	8009a20 <__mcmp>
 8008108:	2800      	cmp	r0, #0
 800810a:	db24      	blt.n	8008156 <quorem+0xf2>
 800810c:	3601      	adds	r6, #1
 800810e:	4628      	mov	r0, r5
 8008110:	f04f 0c00 	mov.w	ip, #0
 8008114:	f858 2b04 	ldr.w	r2, [r8], #4
 8008118:	f8d0 e000 	ldr.w	lr, [r0]
 800811c:	b293      	uxth	r3, r2
 800811e:	ebac 0303 	sub.w	r3, ip, r3
 8008122:	0c12      	lsrs	r2, r2, #16
 8008124:	fa13 f38e 	uxtah	r3, r3, lr
 8008128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800812c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008130:	b29b      	uxth	r3, r3
 8008132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008136:	45c1      	cmp	r9, r8
 8008138:	f840 3b04 	str.w	r3, [r0], #4
 800813c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008140:	d2e8      	bcs.n	8008114 <quorem+0xb0>
 8008142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800814a:	b922      	cbnz	r2, 8008156 <quorem+0xf2>
 800814c:	3b04      	subs	r3, #4
 800814e:	429d      	cmp	r5, r3
 8008150:	461a      	mov	r2, r3
 8008152:	d30a      	bcc.n	800816a <quorem+0x106>
 8008154:	613c      	str	r4, [r7, #16]
 8008156:	4630      	mov	r0, r6
 8008158:	b003      	add	sp, #12
 800815a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	3b04      	subs	r3, #4
 8008162:	2a00      	cmp	r2, #0
 8008164:	d1cc      	bne.n	8008100 <quorem+0x9c>
 8008166:	3c01      	subs	r4, #1
 8008168:	e7c7      	b.n	80080fa <quorem+0x96>
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	3b04      	subs	r3, #4
 800816e:	2a00      	cmp	r2, #0
 8008170:	d1f0      	bne.n	8008154 <quorem+0xf0>
 8008172:	3c01      	subs	r4, #1
 8008174:	e7eb      	b.n	800814e <quorem+0xea>
 8008176:	2000      	movs	r0, #0
 8008178:	e7ee      	b.n	8008158 <quorem+0xf4>
 800817a:	0000      	movs	r0, r0
 800817c:	0000      	movs	r0, r0
	...

08008180 <_dtoa_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	ed2d 8b02 	vpush	{d8}
 8008188:	ec57 6b10 	vmov	r6, r7, d0
 800818c:	b095      	sub	sp, #84	; 0x54
 800818e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008190:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008194:	9105      	str	r1, [sp, #20]
 8008196:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800819a:	4604      	mov	r4, r0
 800819c:	9209      	str	r2, [sp, #36]	; 0x24
 800819e:	930f      	str	r3, [sp, #60]	; 0x3c
 80081a0:	b975      	cbnz	r5, 80081c0 <_dtoa_r+0x40>
 80081a2:	2010      	movs	r0, #16
 80081a4:	f001 f94c 	bl	8009440 <malloc>
 80081a8:	4602      	mov	r2, r0
 80081aa:	6260      	str	r0, [r4, #36]	; 0x24
 80081ac:	b920      	cbnz	r0, 80081b8 <_dtoa_r+0x38>
 80081ae:	4bb2      	ldr	r3, [pc, #712]	; (8008478 <_dtoa_r+0x2f8>)
 80081b0:	21ea      	movs	r1, #234	; 0xea
 80081b2:	48b2      	ldr	r0, [pc, #712]	; (800847c <_dtoa_r+0x2fc>)
 80081b4:	f002 f86c 	bl	800a290 <__assert_func>
 80081b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081bc:	6005      	str	r5, [r0, #0]
 80081be:	60c5      	str	r5, [r0, #12]
 80081c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	b151      	cbz	r1, 80081dc <_dtoa_r+0x5c>
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	604a      	str	r2, [r1, #4]
 80081ca:	2301      	movs	r3, #1
 80081cc:	4093      	lsls	r3, r2
 80081ce:	608b      	str	r3, [r1, #8]
 80081d0:	4620      	mov	r0, r4
 80081d2:	f001 f99d 	bl	8009510 <_Bfree>
 80081d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	1e3b      	subs	r3, r7, #0
 80081de:	bfb9      	ittee	lt
 80081e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081e4:	9303      	strlt	r3, [sp, #12]
 80081e6:	2300      	movge	r3, #0
 80081e8:	f8c8 3000 	strge.w	r3, [r8]
 80081ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80081f0:	4ba3      	ldr	r3, [pc, #652]	; (8008480 <_dtoa_r+0x300>)
 80081f2:	bfbc      	itt	lt
 80081f4:	2201      	movlt	r2, #1
 80081f6:	f8c8 2000 	strlt.w	r2, [r8]
 80081fa:	ea33 0309 	bics.w	r3, r3, r9
 80081fe:	d11b      	bne.n	8008238 <_dtoa_r+0xb8>
 8008200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008202:	f242 730f 	movw	r3, #9999	; 0x270f
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800820c:	4333      	orrs	r3, r6
 800820e:	f000 857a 	beq.w	8008d06 <_dtoa_r+0xb86>
 8008212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008214:	b963      	cbnz	r3, 8008230 <_dtoa_r+0xb0>
 8008216:	4b9b      	ldr	r3, [pc, #620]	; (8008484 <_dtoa_r+0x304>)
 8008218:	e024      	b.n	8008264 <_dtoa_r+0xe4>
 800821a:	4b9b      	ldr	r3, [pc, #620]	; (8008488 <_dtoa_r+0x308>)
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	9800      	ldr	r0, [sp, #0]
 8008226:	b015      	add	sp, #84	; 0x54
 8008228:	ecbd 8b02 	vpop	{d8}
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008230:	4b94      	ldr	r3, [pc, #592]	; (8008484 <_dtoa_r+0x304>)
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	3303      	adds	r3, #3
 8008236:	e7f3      	b.n	8008220 <_dtoa_r+0xa0>
 8008238:	ed9d 7b02 	vldr	d7, [sp, #8]
 800823c:	2200      	movs	r2, #0
 800823e:	ec51 0b17 	vmov	r0, r1, d7
 8008242:	2300      	movs	r3, #0
 8008244:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008248:	f7f8 fc5e 	bl	8000b08 <__aeabi_dcmpeq>
 800824c:	4680      	mov	r8, r0
 800824e:	b158      	cbz	r0, 8008268 <_dtoa_r+0xe8>
 8008250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008252:	2301      	movs	r3, #1
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8551 	beq.w	8008d00 <_dtoa_r+0xb80>
 800825e:	488b      	ldr	r0, [pc, #556]	; (800848c <_dtoa_r+0x30c>)
 8008260:	6018      	str	r0, [r3, #0]
 8008262:	1e43      	subs	r3, r0, #1
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	e7dd      	b.n	8008224 <_dtoa_r+0xa4>
 8008268:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800826c:	aa12      	add	r2, sp, #72	; 0x48
 800826e:	a913      	add	r1, sp, #76	; 0x4c
 8008270:	4620      	mov	r0, r4
 8008272:	f001 fcf5 	bl	8009c60 <__d2b>
 8008276:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800827a:	4683      	mov	fp, r0
 800827c:	2d00      	cmp	r5, #0
 800827e:	d07c      	beq.n	800837a <_dtoa_r+0x1fa>
 8008280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008282:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800828a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800828e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008292:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008296:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800829a:	4b7d      	ldr	r3, [pc, #500]	; (8008490 <_dtoa_r+0x310>)
 800829c:	2200      	movs	r2, #0
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 f811 	bl	80002c8 <__aeabi_dsub>
 80082a6:	a36e      	add	r3, pc, #440	; (adr r3, 8008460 <_dtoa_r+0x2e0>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f7f8 f9c4 	bl	8000638 <__aeabi_dmul>
 80082b0:	a36d      	add	r3, pc, #436	; (adr r3, 8008468 <_dtoa_r+0x2e8>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f8 f809 	bl	80002cc <__adddf3>
 80082ba:	4606      	mov	r6, r0
 80082bc:	4628      	mov	r0, r5
 80082be:	460f      	mov	r7, r1
 80082c0:	f7f8 f950 	bl	8000564 <__aeabi_i2d>
 80082c4:	a36a      	add	r3, pc, #424	; (adr r3, 8008470 <_dtoa_r+0x2f0>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f8 f9b5 	bl	8000638 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4630      	mov	r0, r6
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f7 fff9 	bl	80002cc <__adddf3>
 80082da:	4606      	mov	r6, r0
 80082dc:	460f      	mov	r7, r1
 80082de:	f7f8 fc5b 	bl	8000b98 <__aeabi_d2iz>
 80082e2:	2200      	movs	r2, #0
 80082e4:	4682      	mov	sl, r0
 80082e6:	2300      	movs	r3, #0
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 fc16 	bl	8000b1c <__aeabi_dcmplt>
 80082f0:	b148      	cbz	r0, 8008306 <_dtoa_r+0x186>
 80082f2:	4650      	mov	r0, sl
 80082f4:	f7f8 f936 	bl	8000564 <__aeabi_i2d>
 80082f8:	4632      	mov	r2, r6
 80082fa:	463b      	mov	r3, r7
 80082fc:	f7f8 fc04 	bl	8000b08 <__aeabi_dcmpeq>
 8008300:	b908      	cbnz	r0, 8008306 <_dtoa_r+0x186>
 8008302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008306:	f1ba 0f16 	cmp.w	sl, #22
 800830a:	d854      	bhi.n	80083b6 <_dtoa_r+0x236>
 800830c:	4b61      	ldr	r3, [pc, #388]	; (8008494 <_dtoa_r+0x314>)
 800830e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800831a:	f7f8 fbff 	bl	8000b1c <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d04b      	beq.n	80083ba <_dtoa_r+0x23a>
 8008322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008326:	2300      	movs	r3, #0
 8008328:	930e      	str	r3, [sp, #56]	; 0x38
 800832a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800832c:	1b5d      	subs	r5, r3, r5
 800832e:	1e6b      	subs	r3, r5, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	bf43      	ittte	mi
 8008334:	2300      	movmi	r3, #0
 8008336:	f1c5 0801 	rsbmi	r8, r5, #1
 800833a:	9304      	strmi	r3, [sp, #16]
 800833c:	f04f 0800 	movpl.w	r8, #0
 8008340:	f1ba 0f00 	cmp.w	sl, #0
 8008344:	db3b      	blt.n	80083be <_dtoa_r+0x23e>
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800834c:	4453      	add	r3, sl
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	2300      	movs	r3, #0
 8008352:	9306      	str	r3, [sp, #24]
 8008354:	9b05      	ldr	r3, [sp, #20]
 8008356:	2b09      	cmp	r3, #9
 8008358:	d869      	bhi.n	800842e <_dtoa_r+0x2ae>
 800835a:	2b05      	cmp	r3, #5
 800835c:	bfc4      	itt	gt
 800835e:	3b04      	subgt	r3, #4
 8008360:	9305      	strgt	r3, [sp, #20]
 8008362:	9b05      	ldr	r3, [sp, #20]
 8008364:	f1a3 0302 	sub.w	r3, r3, #2
 8008368:	bfcc      	ite	gt
 800836a:	2500      	movgt	r5, #0
 800836c:	2501      	movle	r5, #1
 800836e:	2b03      	cmp	r3, #3
 8008370:	d869      	bhi.n	8008446 <_dtoa_r+0x2c6>
 8008372:	e8df f003 	tbb	[pc, r3]
 8008376:	4e2c      	.short	0x4e2c
 8008378:	5a4c      	.short	0x5a4c
 800837a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800837e:	441d      	add	r5, r3
 8008380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008384:	2b20      	cmp	r3, #32
 8008386:	bfc1      	itttt	gt
 8008388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800838c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008390:	fa09 f303 	lslgt.w	r3, r9, r3
 8008394:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008398:	bfda      	itte	le
 800839a:	f1c3 0320 	rsble	r3, r3, #32
 800839e:	fa06 f003 	lslle.w	r0, r6, r3
 80083a2:	4318      	orrgt	r0, r3
 80083a4:	f7f8 f8ce 	bl	8000544 <__aeabi_ui2d>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4606      	mov	r6, r0
 80083ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083b0:	3d01      	subs	r5, #1
 80083b2:	9310      	str	r3, [sp, #64]	; 0x40
 80083b4:	e771      	b.n	800829a <_dtoa_r+0x11a>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7b6      	b.n	8008328 <_dtoa_r+0x1a8>
 80083ba:	900e      	str	r0, [sp, #56]	; 0x38
 80083bc:	e7b5      	b.n	800832a <_dtoa_r+0x1aa>
 80083be:	f1ca 0300 	rsb	r3, sl, #0
 80083c2:	9306      	str	r3, [sp, #24]
 80083c4:	2300      	movs	r3, #0
 80083c6:	eba8 080a 	sub.w	r8, r8, sl
 80083ca:	930d      	str	r3, [sp, #52]	; 0x34
 80083cc:	e7c2      	b.n	8008354 <_dtoa_r+0x1d4>
 80083ce:	2300      	movs	r3, #0
 80083d0:	9308      	str	r3, [sp, #32]
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc39      	bgt.n	800844c <_dtoa_r+0x2cc>
 80083d8:	f04f 0901 	mov.w	r9, #1
 80083dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80083e0:	464b      	mov	r3, r9
 80083e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80083e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083e8:	2200      	movs	r2, #0
 80083ea:	6042      	str	r2, [r0, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	f102 0614 	add.w	r6, r2, #20
 80083f2:	429e      	cmp	r6, r3
 80083f4:	6841      	ldr	r1, [r0, #4]
 80083f6:	d92f      	bls.n	8008458 <_dtoa_r+0x2d8>
 80083f8:	4620      	mov	r0, r4
 80083fa:	f001 f849 	bl	8009490 <_Balloc>
 80083fe:	9000      	str	r0, [sp, #0]
 8008400:	2800      	cmp	r0, #0
 8008402:	d14b      	bne.n	800849c <_dtoa_r+0x31c>
 8008404:	4b24      	ldr	r3, [pc, #144]	; (8008498 <_dtoa_r+0x318>)
 8008406:	4602      	mov	r2, r0
 8008408:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800840c:	e6d1      	b.n	80081b2 <_dtoa_r+0x32>
 800840e:	2301      	movs	r3, #1
 8008410:	e7de      	b.n	80083d0 <_dtoa_r+0x250>
 8008412:	2300      	movs	r3, #0
 8008414:	9308      	str	r3, [sp, #32]
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	eb0a 0903 	add.w	r9, sl, r3
 800841c:	f109 0301 	add.w	r3, r9, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	bfb8      	it	lt
 8008426:	2301      	movlt	r3, #1
 8008428:	e7dd      	b.n	80083e6 <_dtoa_r+0x266>
 800842a:	2301      	movs	r3, #1
 800842c:	e7f2      	b.n	8008414 <_dtoa_r+0x294>
 800842e:	2501      	movs	r5, #1
 8008430:	2300      	movs	r3, #0
 8008432:	9305      	str	r3, [sp, #20]
 8008434:	9508      	str	r5, [sp, #32]
 8008436:	f04f 39ff 	mov.w	r9, #4294967295
 800843a:	2200      	movs	r2, #0
 800843c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008440:	2312      	movs	r3, #18
 8008442:	9209      	str	r2, [sp, #36]	; 0x24
 8008444:	e7cf      	b.n	80083e6 <_dtoa_r+0x266>
 8008446:	2301      	movs	r3, #1
 8008448:	9308      	str	r3, [sp, #32]
 800844a:	e7f4      	b.n	8008436 <_dtoa_r+0x2b6>
 800844c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008450:	f8cd 9004 	str.w	r9, [sp, #4]
 8008454:	464b      	mov	r3, r9
 8008456:	e7c6      	b.n	80083e6 <_dtoa_r+0x266>
 8008458:	3101      	adds	r1, #1
 800845a:	6041      	str	r1, [r0, #4]
 800845c:	0052      	lsls	r2, r2, #1
 800845e:	e7c6      	b.n	80083ee <_dtoa_r+0x26e>
 8008460:	636f4361 	.word	0x636f4361
 8008464:	3fd287a7 	.word	0x3fd287a7
 8008468:	8b60c8b3 	.word	0x8b60c8b3
 800846c:	3fc68a28 	.word	0x3fc68a28
 8008470:	509f79fb 	.word	0x509f79fb
 8008474:	3fd34413 	.word	0x3fd34413
 8008478:	0800b026 	.word	0x0800b026
 800847c:	0800b03d 	.word	0x0800b03d
 8008480:	7ff00000 	.word	0x7ff00000
 8008484:	0800b022 	.word	0x0800b022
 8008488:	0800b019 	.word	0x0800b019
 800848c:	0800ae9d 	.word	0x0800ae9d
 8008490:	3ff80000 	.word	0x3ff80000
 8008494:	0800b1b8 	.word	0x0800b1b8
 8008498:	0800b09c 	.word	0x0800b09c
 800849c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800849e:	9a00      	ldr	r2, [sp, #0]
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	9b01      	ldr	r3, [sp, #4]
 80084a4:	2b0e      	cmp	r3, #14
 80084a6:	f200 80ad 	bhi.w	8008604 <_dtoa_r+0x484>
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	f000 80aa 	beq.w	8008604 <_dtoa_r+0x484>
 80084b0:	f1ba 0f00 	cmp.w	sl, #0
 80084b4:	dd36      	ble.n	8008524 <_dtoa_r+0x3a4>
 80084b6:	4ac3      	ldr	r2, [pc, #780]	; (80087c4 <_dtoa_r+0x644>)
 80084b8:	f00a 030f 	and.w	r3, sl, #15
 80084bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084c0:	ed93 7b00 	vldr	d7, [r3]
 80084c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80084c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80084cc:	eeb0 8a47 	vmov.f32	s16, s14
 80084d0:	eef0 8a67 	vmov.f32	s17, s15
 80084d4:	d016      	beq.n	8008504 <_dtoa_r+0x384>
 80084d6:	4bbc      	ldr	r3, [pc, #752]	; (80087c8 <_dtoa_r+0x648>)
 80084d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084e0:	f7f8 f9d4 	bl	800088c <__aeabi_ddiv>
 80084e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e8:	f007 070f 	and.w	r7, r7, #15
 80084ec:	2503      	movs	r5, #3
 80084ee:	4eb6      	ldr	r6, [pc, #728]	; (80087c8 <_dtoa_r+0x648>)
 80084f0:	b957      	cbnz	r7, 8008508 <_dtoa_r+0x388>
 80084f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084f6:	ec53 2b18 	vmov	r2, r3, d8
 80084fa:	f7f8 f9c7 	bl	800088c <__aeabi_ddiv>
 80084fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008502:	e029      	b.n	8008558 <_dtoa_r+0x3d8>
 8008504:	2502      	movs	r5, #2
 8008506:	e7f2      	b.n	80084ee <_dtoa_r+0x36e>
 8008508:	07f9      	lsls	r1, r7, #31
 800850a:	d508      	bpl.n	800851e <_dtoa_r+0x39e>
 800850c:	ec51 0b18 	vmov	r0, r1, d8
 8008510:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008514:	f7f8 f890 	bl	8000638 <__aeabi_dmul>
 8008518:	ec41 0b18 	vmov	d8, r0, r1
 800851c:	3501      	adds	r5, #1
 800851e:	107f      	asrs	r7, r7, #1
 8008520:	3608      	adds	r6, #8
 8008522:	e7e5      	b.n	80084f0 <_dtoa_r+0x370>
 8008524:	f000 80a6 	beq.w	8008674 <_dtoa_r+0x4f4>
 8008528:	f1ca 0600 	rsb	r6, sl, #0
 800852c:	4ba5      	ldr	r3, [pc, #660]	; (80087c4 <_dtoa_r+0x644>)
 800852e:	4fa6      	ldr	r7, [pc, #664]	; (80087c8 <_dtoa_r+0x648>)
 8008530:	f006 020f 	and.w	r2, r6, #15
 8008534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008540:	f7f8 f87a 	bl	8000638 <__aeabi_dmul>
 8008544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008548:	1136      	asrs	r6, r6, #4
 800854a:	2300      	movs	r3, #0
 800854c:	2502      	movs	r5, #2
 800854e:	2e00      	cmp	r6, #0
 8008550:	f040 8085 	bne.w	800865e <_dtoa_r+0x4de>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1d2      	bne.n	80084fe <_dtoa_r+0x37e>
 8008558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 808c 	beq.w	8008678 <_dtoa_r+0x4f8>
 8008560:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008564:	4b99      	ldr	r3, [pc, #612]	; (80087cc <_dtoa_r+0x64c>)
 8008566:	2200      	movs	r2, #0
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f8 fad6 	bl	8000b1c <__aeabi_dcmplt>
 8008570:	2800      	cmp	r0, #0
 8008572:	f000 8081 	beq.w	8008678 <_dtoa_r+0x4f8>
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d07d      	beq.n	8008678 <_dtoa_r+0x4f8>
 800857c:	f1b9 0f00 	cmp.w	r9, #0
 8008580:	dd3c      	ble.n	80085fc <_dtoa_r+0x47c>
 8008582:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008586:	9307      	str	r3, [sp, #28]
 8008588:	2200      	movs	r2, #0
 800858a:	4b91      	ldr	r3, [pc, #580]	; (80087d0 <_dtoa_r+0x650>)
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f8 f852 	bl	8000638 <__aeabi_dmul>
 8008594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008598:	3501      	adds	r5, #1
 800859a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800859e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085a2:	4628      	mov	r0, r5
 80085a4:	f7f7 ffde 	bl	8000564 <__aeabi_i2d>
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	f7f8 f844 	bl	8000638 <__aeabi_dmul>
 80085b0:	4b88      	ldr	r3, [pc, #544]	; (80087d4 <_dtoa_r+0x654>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	f7f7 fe8a 	bl	80002cc <__adddf3>
 80085b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d15c      	bne.n	8008682 <_dtoa_r+0x502>
 80085c8:	4b83      	ldr	r3, [pc, #524]	; (80087d8 <_dtoa_r+0x658>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f7 fe7a 	bl	80002c8 <__aeabi_dsub>
 80085d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d8:	4606      	mov	r6, r0
 80085da:	460f      	mov	r7, r1
 80085dc:	f7f8 fabc 	bl	8000b58 <__aeabi_dcmpgt>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f040 8296 	bne.w	8008b12 <_dtoa_r+0x992>
 80085e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80085ea:	4630      	mov	r0, r6
 80085ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085f0:	4639      	mov	r1, r7
 80085f2:	f7f8 fa93 	bl	8000b1c <__aeabi_dcmplt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f040 8288 	bne.w	8008b0c <_dtoa_r+0x98c>
 80085fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008606:	2b00      	cmp	r3, #0
 8008608:	f2c0 8158 	blt.w	80088bc <_dtoa_r+0x73c>
 800860c:	f1ba 0f0e 	cmp.w	sl, #14
 8008610:	f300 8154 	bgt.w	80088bc <_dtoa_r+0x73c>
 8008614:	4b6b      	ldr	r3, [pc, #428]	; (80087c4 <_dtoa_r+0x644>)
 8008616:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800861a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800861e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	f280 80e3 	bge.w	80087ec <_dtoa_r+0x66c>
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f300 80df 	bgt.w	80087ec <_dtoa_r+0x66c>
 800862e:	f040 826d 	bne.w	8008b0c <_dtoa_r+0x98c>
 8008632:	4b69      	ldr	r3, [pc, #420]	; (80087d8 <_dtoa_r+0x658>)
 8008634:	2200      	movs	r2, #0
 8008636:	4640      	mov	r0, r8
 8008638:	4649      	mov	r1, r9
 800863a:	f7f7 fffd 	bl	8000638 <__aeabi_dmul>
 800863e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008642:	f7f8 fa7f 	bl	8000b44 <__aeabi_dcmpge>
 8008646:	9e01      	ldr	r6, [sp, #4]
 8008648:	4637      	mov	r7, r6
 800864a:	2800      	cmp	r0, #0
 800864c:	f040 8243 	bne.w	8008ad6 <_dtoa_r+0x956>
 8008650:	9d00      	ldr	r5, [sp, #0]
 8008652:	2331      	movs	r3, #49	; 0x31
 8008654:	f805 3b01 	strb.w	r3, [r5], #1
 8008658:	f10a 0a01 	add.w	sl, sl, #1
 800865c:	e23f      	b.n	8008ade <_dtoa_r+0x95e>
 800865e:	07f2      	lsls	r2, r6, #31
 8008660:	d505      	bpl.n	800866e <_dtoa_r+0x4ee>
 8008662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008666:	f7f7 ffe7 	bl	8000638 <__aeabi_dmul>
 800866a:	3501      	adds	r5, #1
 800866c:	2301      	movs	r3, #1
 800866e:	1076      	asrs	r6, r6, #1
 8008670:	3708      	adds	r7, #8
 8008672:	e76c      	b.n	800854e <_dtoa_r+0x3ce>
 8008674:	2502      	movs	r5, #2
 8008676:	e76f      	b.n	8008558 <_dtoa_r+0x3d8>
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	f8cd a01c 	str.w	sl, [sp, #28]
 800867e:	930c      	str	r3, [sp, #48]	; 0x30
 8008680:	e78d      	b.n	800859e <_dtoa_r+0x41e>
 8008682:	9900      	ldr	r1, [sp, #0]
 8008684:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008688:	4b4e      	ldr	r3, [pc, #312]	; (80087c4 <_dtoa_r+0x644>)
 800868a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800868e:	4401      	add	r1, r0
 8008690:	9102      	str	r1, [sp, #8]
 8008692:	9908      	ldr	r1, [sp, #32]
 8008694:	eeb0 8a47 	vmov.f32	s16, s14
 8008698:	eef0 8a67 	vmov.f32	s17, s15
 800869c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086a4:	2900      	cmp	r1, #0
 80086a6:	d045      	beq.n	8008734 <_dtoa_r+0x5b4>
 80086a8:	494c      	ldr	r1, [pc, #304]	; (80087dc <_dtoa_r+0x65c>)
 80086aa:	2000      	movs	r0, #0
 80086ac:	f7f8 f8ee 	bl	800088c <__aeabi_ddiv>
 80086b0:	ec53 2b18 	vmov	r2, r3, d8
 80086b4:	f7f7 fe08 	bl	80002c8 <__aeabi_dsub>
 80086b8:	9d00      	ldr	r5, [sp, #0]
 80086ba:	ec41 0b18 	vmov	d8, r0, r1
 80086be:	4639      	mov	r1, r7
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7f8 fa69 	bl	8000b98 <__aeabi_d2iz>
 80086c6:	900c      	str	r0, [sp, #48]	; 0x30
 80086c8:	f7f7 ff4c 	bl	8000564 <__aeabi_i2d>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f7 fdf8 	bl	80002c8 <__aeabi_dsub>
 80086d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086da:	3330      	adds	r3, #48	; 0x30
 80086dc:	f805 3b01 	strb.w	r3, [r5], #1
 80086e0:	ec53 2b18 	vmov	r2, r3, d8
 80086e4:	4606      	mov	r6, r0
 80086e6:	460f      	mov	r7, r1
 80086e8:	f7f8 fa18 	bl	8000b1c <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d165      	bne.n	80087bc <_dtoa_r+0x63c>
 80086f0:	4632      	mov	r2, r6
 80086f2:	463b      	mov	r3, r7
 80086f4:	4935      	ldr	r1, [pc, #212]	; (80087cc <_dtoa_r+0x64c>)
 80086f6:	2000      	movs	r0, #0
 80086f8:	f7f7 fde6 	bl	80002c8 <__aeabi_dsub>
 80086fc:	ec53 2b18 	vmov	r2, r3, d8
 8008700:	f7f8 fa0c 	bl	8000b1c <__aeabi_dcmplt>
 8008704:	2800      	cmp	r0, #0
 8008706:	f040 80b9 	bne.w	800887c <_dtoa_r+0x6fc>
 800870a:	9b02      	ldr	r3, [sp, #8]
 800870c:	429d      	cmp	r5, r3
 800870e:	f43f af75 	beq.w	80085fc <_dtoa_r+0x47c>
 8008712:	4b2f      	ldr	r3, [pc, #188]	; (80087d0 <_dtoa_r+0x650>)
 8008714:	ec51 0b18 	vmov	r0, r1, d8
 8008718:	2200      	movs	r2, #0
 800871a:	f7f7 ff8d 	bl	8000638 <__aeabi_dmul>
 800871e:	4b2c      	ldr	r3, [pc, #176]	; (80087d0 <_dtoa_r+0x650>)
 8008720:	ec41 0b18 	vmov	d8, r0, r1
 8008724:	2200      	movs	r2, #0
 8008726:	4630      	mov	r0, r6
 8008728:	4639      	mov	r1, r7
 800872a:	f7f7 ff85 	bl	8000638 <__aeabi_dmul>
 800872e:	4606      	mov	r6, r0
 8008730:	460f      	mov	r7, r1
 8008732:	e7c4      	b.n	80086be <_dtoa_r+0x53e>
 8008734:	ec51 0b17 	vmov	r0, r1, d7
 8008738:	f7f7 ff7e 	bl	8000638 <__aeabi_dmul>
 800873c:	9b02      	ldr	r3, [sp, #8]
 800873e:	9d00      	ldr	r5, [sp, #0]
 8008740:	930c      	str	r3, [sp, #48]	; 0x30
 8008742:	ec41 0b18 	vmov	d8, r0, r1
 8008746:	4639      	mov	r1, r7
 8008748:	4630      	mov	r0, r6
 800874a:	f7f8 fa25 	bl	8000b98 <__aeabi_d2iz>
 800874e:	9011      	str	r0, [sp, #68]	; 0x44
 8008750:	f7f7 ff08 	bl	8000564 <__aeabi_i2d>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f7 fdb4 	bl	80002c8 <__aeabi_dsub>
 8008760:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008762:	3330      	adds	r3, #48	; 0x30
 8008764:	f805 3b01 	strb.w	r3, [r5], #1
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	429d      	cmp	r5, r3
 800876c:	4606      	mov	r6, r0
 800876e:	460f      	mov	r7, r1
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	d134      	bne.n	80087e0 <_dtoa_r+0x660>
 8008776:	4b19      	ldr	r3, [pc, #100]	; (80087dc <_dtoa_r+0x65c>)
 8008778:	ec51 0b18 	vmov	r0, r1, d8
 800877c:	f7f7 fda6 	bl	80002cc <__adddf3>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f8 f9e6 	bl	8000b58 <__aeabi_dcmpgt>
 800878c:	2800      	cmp	r0, #0
 800878e:	d175      	bne.n	800887c <_dtoa_r+0x6fc>
 8008790:	ec53 2b18 	vmov	r2, r3, d8
 8008794:	4911      	ldr	r1, [pc, #68]	; (80087dc <_dtoa_r+0x65c>)
 8008796:	2000      	movs	r0, #0
 8008798:	f7f7 fd96 	bl	80002c8 <__aeabi_dsub>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4630      	mov	r0, r6
 80087a2:	4639      	mov	r1, r7
 80087a4:	f7f8 f9ba 	bl	8000b1c <__aeabi_dcmplt>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	f43f af27 	beq.w	80085fc <_dtoa_r+0x47c>
 80087ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087b0:	1e6b      	subs	r3, r5, #1
 80087b2:	930c      	str	r3, [sp, #48]	; 0x30
 80087b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087b8:	2b30      	cmp	r3, #48	; 0x30
 80087ba:	d0f8      	beq.n	80087ae <_dtoa_r+0x62e>
 80087bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087c0:	e04a      	b.n	8008858 <_dtoa_r+0x6d8>
 80087c2:	bf00      	nop
 80087c4:	0800b1b8 	.word	0x0800b1b8
 80087c8:	0800b190 	.word	0x0800b190
 80087cc:	3ff00000 	.word	0x3ff00000
 80087d0:	40240000 	.word	0x40240000
 80087d4:	401c0000 	.word	0x401c0000
 80087d8:	40140000 	.word	0x40140000
 80087dc:	3fe00000 	.word	0x3fe00000
 80087e0:	4baf      	ldr	r3, [pc, #700]	; (8008aa0 <_dtoa_r+0x920>)
 80087e2:	f7f7 ff29 	bl	8000638 <__aeabi_dmul>
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	e7ac      	b.n	8008746 <_dtoa_r+0x5c6>
 80087ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087f0:	9d00      	ldr	r5, [sp, #0]
 80087f2:	4642      	mov	r2, r8
 80087f4:	464b      	mov	r3, r9
 80087f6:	4630      	mov	r0, r6
 80087f8:	4639      	mov	r1, r7
 80087fa:	f7f8 f847 	bl	800088c <__aeabi_ddiv>
 80087fe:	f7f8 f9cb 	bl	8000b98 <__aeabi_d2iz>
 8008802:	9002      	str	r0, [sp, #8]
 8008804:	f7f7 feae 	bl	8000564 <__aeabi_i2d>
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	f7f7 ff14 	bl	8000638 <__aeabi_dmul>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4630      	mov	r0, r6
 8008816:	4639      	mov	r1, r7
 8008818:	f7f7 fd56 	bl	80002c8 <__aeabi_dsub>
 800881c:	9e02      	ldr	r6, [sp, #8]
 800881e:	9f01      	ldr	r7, [sp, #4]
 8008820:	3630      	adds	r6, #48	; 0x30
 8008822:	f805 6b01 	strb.w	r6, [r5], #1
 8008826:	9e00      	ldr	r6, [sp, #0]
 8008828:	1bae      	subs	r6, r5, r6
 800882a:	42b7      	cmp	r7, r6
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	d137      	bne.n	80088a2 <_dtoa_r+0x722>
 8008832:	f7f7 fd4b 	bl	80002cc <__adddf3>
 8008836:	4642      	mov	r2, r8
 8008838:	464b      	mov	r3, r9
 800883a:	4606      	mov	r6, r0
 800883c:	460f      	mov	r7, r1
 800883e:	f7f8 f98b 	bl	8000b58 <__aeabi_dcmpgt>
 8008842:	b9c8      	cbnz	r0, 8008878 <_dtoa_r+0x6f8>
 8008844:	4642      	mov	r2, r8
 8008846:	464b      	mov	r3, r9
 8008848:	4630      	mov	r0, r6
 800884a:	4639      	mov	r1, r7
 800884c:	f7f8 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8008850:	b110      	cbz	r0, 8008858 <_dtoa_r+0x6d8>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	07d9      	lsls	r1, r3, #31
 8008856:	d40f      	bmi.n	8008878 <_dtoa_r+0x6f8>
 8008858:	4620      	mov	r0, r4
 800885a:	4659      	mov	r1, fp
 800885c:	f000 fe58 	bl	8009510 <_Bfree>
 8008860:	2300      	movs	r3, #0
 8008862:	702b      	strb	r3, [r5, #0]
 8008864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008866:	f10a 0001 	add.w	r0, sl, #1
 800886a:	6018      	str	r0, [r3, #0]
 800886c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800886e:	2b00      	cmp	r3, #0
 8008870:	f43f acd8 	beq.w	8008224 <_dtoa_r+0xa4>
 8008874:	601d      	str	r5, [r3, #0]
 8008876:	e4d5      	b.n	8008224 <_dtoa_r+0xa4>
 8008878:	f8cd a01c 	str.w	sl, [sp, #28]
 800887c:	462b      	mov	r3, r5
 800887e:	461d      	mov	r5, r3
 8008880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008884:	2a39      	cmp	r2, #57	; 0x39
 8008886:	d108      	bne.n	800889a <_dtoa_r+0x71a>
 8008888:	9a00      	ldr	r2, [sp, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d1f7      	bne.n	800887e <_dtoa_r+0x6fe>
 800888e:	9a07      	ldr	r2, [sp, #28]
 8008890:	9900      	ldr	r1, [sp, #0]
 8008892:	3201      	adds	r2, #1
 8008894:	9207      	str	r2, [sp, #28]
 8008896:	2230      	movs	r2, #48	; 0x30
 8008898:	700a      	strb	r2, [r1, #0]
 800889a:	781a      	ldrb	r2, [r3, #0]
 800889c:	3201      	adds	r2, #1
 800889e:	701a      	strb	r2, [r3, #0]
 80088a0:	e78c      	b.n	80087bc <_dtoa_r+0x63c>
 80088a2:	4b7f      	ldr	r3, [pc, #508]	; (8008aa0 <_dtoa_r+0x920>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	f7f7 fec7 	bl	8000638 <__aeabi_dmul>
 80088aa:	2200      	movs	r2, #0
 80088ac:	2300      	movs	r3, #0
 80088ae:	4606      	mov	r6, r0
 80088b0:	460f      	mov	r7, r1
 80088b2:	f7f8 f929 	bl	8000b08 <__aeabi_dcmpeq>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d09b      	beq.n	80087f2 <_dtoa_r+0x672>
 80088ba:	e7cd      	b.n	8008858 <_dtoa_r+0x6d8>
 80088bc:	9a08      	ldr	r2, [sp, #32]
 80088be:	2a00      	cmp	r2, #0
 80088c0:	f000 80c4 	beq.w	8008a4c <_dtoa_r+0x8cc>
 80088c4:	9a05      	ldr	r2, [sp, #20]
 80088c6:	2a01      	cmp	r2, #1
 80088c8:	f300 80a8 	bgt.w	8008a1c <_dtoa_r+0x89c>
 80088cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	f000 80a0 	beq.w	8008a14 <_dtoa_r+0x894>
 80088d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088d8:	9e06      	ldr	r6, [sp, #24]
 80088da:	4645      	mov	r5, r8
 80088dc:	9a04      	ldr	r2, [sp, #16]
 80088de:	2101      	movs	r1, #1
 80088e0:	441a      	add	r2, r3
 80088e2:	4620      	mov	r0, r4
 80088e4:	4498      	add	r8, r3
 80088e6:	9204      	str	r2, [sp, #16]
 80088e8:	f000 ff18 	bl	800971c <__i2b>
 80088ec:	4607      	mov	r7, r0
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	dd0b      	ble.n	800890a <_dtoa_r+0x78a>
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dd08      	ble.n	800890a <_dtoa_r+0x78a>
 80088f8:	42ab      	cmp	r3, r5
 80088fa:	9a04      	ldr	r2, [sp, #16]
 80088fc:	bfa8      	it	ge
 80088fe:	462b      	movge	r3, r5
 8008900:	eba8 0803 	sub.w	r8, r8, r3
 8008904:	1aed      	subs	r5, r5, r3
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	9b06      	ldr	r3, [sp, #24]
 800890c:	b1fb      	cbz	r3, 800894e <_dtoa_r+0x7ce>
 800890e:	9b08      	ldr	r3, [sp, #32]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 809f 	beq.w	8008a54 <_dtoa_r+0x8d4>
 8008916:	2e00      	cmp	r6, #0
 8008918:	dd11      	ble.n	800893e <_dtoa_r+0x7be>
 800891a:	4639      	mov	r1, r7
 800891c:	4632      	mov	r2, r6
 800891e:	4620      	mov	r0, r4
 8008920:	f000 ffb8 	bl	8009894 <__pow5mult>
 8008924:	465a      	mov	r2, fp
 8008926:	4601      	mov	r1, r0
 8008928:	4607      	mov	r7, r0
 800892a:	4620      	mov	r0, r4
 800892c:	f000 ff0c 	bl	8009748 <__multiply>
 8008930:	4659      	mov	r1, fp
 8008932:	9007      	str	r0, [sp, #28]
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fdeb 	bl	8009510 <_Bfree>
 800893a:	9b07      	ldr	r3, [sp, #28]
 800893c:	469b      	mov	fp, r3
 800893e:	9b06      	ldr	r3, [sp, #24]
 8008940:	1b9a      	subs	r2, r3, r6
 8008942:	d004      	beq.n	800894e <_dtoa_r+0x7ce>
 8008944:	4659      	mov	r1, fp
 8008946:	4620      	mov	r0, r4
 8008948:	f000 ffa4 	bl	8009894 <__pow5mult>
 800894c:	4683      	mov	fp, r0
 800894e:	2101      	movs	r1, #1
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fee3 	bl	800971c <__i2b>
 8008956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008958:	2b00      	cmp	r3, #0
 800895a:	4606      	mov	r6, r0
 800895c:	dd7c      	ble.n	8008a58 <_dtoa_r+0x8d8>
 800895e:	461a      	mov	r2, r3
 8008960:	4601      	mov	r1, r0
 8008962:	4620      	mov	r0, r4
 8008964:	f000 ff96 	bl	8009894 <__pow5mult>
 8008968:	9b05      	ldr	r3, [sp, #20]
 800896a:	2b01      	cmp	r3, #1
 800896c:	4606      	mov	r6, r0
 800896e:	dd76      	ble.n	8008a5e <_dtoa_r+0x8de>
 8008970:	2300      	movs	r3, #0
 8008972:	9306      	str	r3, [sp, #24]
 8008974:	6933      	ldr	r3, [r6, #16]
 8008976:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800897a:	6918      	ldr	r0, [r3, #16]
 800897c:	f000 fe7e 	bl	800967c <__hi0bits>
 8008980:	f1c0 0020 	rsb	r0, r0, #32
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	4418      	add	r0, r3
 8008988:	f010 001f 	ands.w	r0, r0, #31
 800898c:	f000 8086 	beq.w	8008a9c <_dtoa_r+0x91c>
 8008990:	f1c0 0320 	rsb	r3, r0, #32
 8008994:	2b04      	cmp	r3, #4
 8008996:	dd7f      	ble.n	8008a98 <_dtoa_r+0x918>
 8008998:	f1c0 001c 	rsb	r0, r0, #28
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	4403      	add	r3, r0
 80089a0:	4480      	add	r8, r0
 80089a2:	4405      	add	r5, r0
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	f1b8 0f00 	cmp.w	r8, #0
 80089aa:	dd05      	ble.n	80089b8 <_dtoa_r+0x838>
 80089ac:	4659      	mov	r1, fp
 80089ae:	4642      	mov	r2, r8
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 ffc9 	bl	8009948 <__lshift>
 80089b6:	4683      	mov	fp, r0
 80089b8:	9b04      	ldr	r3, [sp, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dd05      	ble.n	80089ca <_dtoa_r+0x84a>
 80089be:	4631      	mov	r1, r6
 80089c0:	461a      	mov	r2, r3
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 ffc0 	bl	8009948 <__lshift>
 80089c8:	4606      	mov	r6, r0
 80089ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d069      	beq.n	8008aa4 <_dtoa_r+0x924>
 80089d0:	4631      	mov	r1, r6
 80089d2:	4658      	mov	r0, fp
 80089d4:	f001 f824 	bl	8009a20 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	da63      	bge.n	8008aa4 <_dtoa_r+0x924>
 80089dc:	2300      	movs	r3, #0
 80089de:	4659      	mov	r1, fp
 80089e0:	220a      	movs	r2, #10
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fdb6 	bl	8009554 <__multadd>
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ee:	4683      	mov	fp, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 818f 	beq.w	8008d14 <_dtoa_r+0xb94>
 80089f6:	4639      	mov	r1, r7
 80089f8:	2300      	movs	r3, #0
 80089fa:	220a      	movs	r2, #10
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fda9 	bl	8009554 <__multadd>
 8008a02:	f1b9 0f00 	cmp.w	r9, #0
 8008a06:	4607      	mov	r7, r0
 8008a08:	f300 808e 	bgt.w	8008b28 <_dtoa_r+0x9a8>
 8008a0c:	9b05      	ldr	r3, [sp, #20]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dc50      	bgt.n	8008ab4 <_dtoa_r+0x934>
 8008a12:	e089      	b.n	8008b28 <_dtoa_r+0x9a8>
 8008a14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a1a:	e75d      	b.n	80088d8 <_dtoa_r+0x758>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	1e5e      	subs	r6, r3, #1
 8008a20:	9b06      	ldr	r3, [sp, #24]
 8008a22:	42b3      	cmp	r3, r6
 8008a24:	bfbf      	itttt	lt
 8008a26:	9b06      	ldrlt	r3, [sp, #24]
 8008a28:	9606      	strlt	r6, [sp, #24]
 8008a2a:	1af2      	sublt	r2, r6, r3
 8008a2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008a2e:	bfb6      	itet	lt
 8008a30:	189b      	addlt	r3, r3, r2
 8008a32:	1b9e      	subge	r6, r3, r6
 8008a34:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	bfb8      	it	lt
 8008a3a:	2600      	movlt	r6, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bfb5      	itete	lt
 8008a40:	eba8 0503 	sublt.w	r5, r8, r3
 8008a44:	9b01      	ldrge	r3, [sp, #4]
 8008a46:	2300      	movlt	r3, #0
 8008a48:	4645      	movge	r5, r8
 8008a4a:	e747      	b.n	80088dc <_dtoa_r+0x75c>
 8008a4c:	9e06      	ldr	r6, [sp, #24]
 8008a4e:	9f08      	ldr	r7, [sp, #32]
 8008a50:	4645      	mov	r5, r8
 8008a52:	e74c      	b.n	80088ee <_dtoa_r+0x76e>
 8008a54:	9a06      	ldr	r2, [sp, #24]
 8008a56:	e775      	b.n	8008944 <_dtoa_r+0x7c4>
 8008a58:	9b05      	ldr	r3, [sp, #20]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	dc18      	bgt.n	8008a90 <_dtoa_r+0x910>
 8008a5e:	9b02      	ldr	r3, [sp, #8]
 8008a60:	b9b3      	cbnz	r3, 8008a90 <_dtoa_r+0x910>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a68:	b9a3      	cbnz	r3, 8008a94 <_dtoa_r+0x914>
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a70:	0d1b      	lsrs	r3, r3, #20
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	b12b      	cbz	r3, 8008a82 <_dtoa_r+0x902>
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	f108 0801 	add.w	r8, r8, #1
 8008a80:	2301      	movs	r3, #1
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f47f af74 	bne.w	8008974 <_dtoa_r+0x7f4>
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	e779      	b.n	8008984 <_dtoa_r+0x804>
 8008a90:	2300      	movs	r3, #0
 8008a92:	e7f6      	b.n	8008a82 <_dtoa_r+0x902>
 8008a94:	9b02      	ldr	r3, [sp, #8]
 8008a96:	e7f4      	b.n	8008a82 <_dtoa_r+0x902>
 8008a98:	d085      	beq.n	80089a6 <_dtoa_r+0x826>
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	301c      	adds	r0, #28
 8008a9e:	e77d      	b.n	800899c <_dtoa_r+0x81c>
 8008aa0:	40240000 	.word	0x40240000
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dc38      	bgt.n	8008b1c <_dtoa_r+0x99c>
 8008aaa:	9b05      	ldr	r3, [sp, #20]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	dd35      	ble.n	8008b1c <_dtoa_r+0x99c>
 8008ab0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ab4:	f1b9 0f00 	cmp.w	r9, #0
 8008ab8:	d10d      	bne.n	8008ad6 <_dtoa_r+0x956>
 8008aba:	4631      	mov	r1, r6
 8008abc:	464b      	mov	r3, r9
 8008abe:	2205      	movs	r2, #5
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fd47 	bl	8009554 <__multadd>
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	4606      	mov	r6, r0
 8008aca:	4658      	mov	r0, fp
 8008acc:	f000 ffa8 	bl	8009a20 <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f73f adbd 	bgt.w	8008650 <_dtoa_r+0x4d0>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	9d00      	ldr	r5, [sp, #0]
 8008ada:	ea6f 0a03 	mvn.w	sl, r3
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 fd13 	bl	8009510 <_Bfree>
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	f43f aeb4 	beq.w	8008858 <_dtoa_r+0x6d8>
 8008af0:	f1b8 0f00 	cmp.w	r8, #0
 8008af4:	d005      	beq.n	8008b02 <_dtoa_r+0x982>
 8008af6:	45b8      	cmp	r8, r7
 8008af8:	d003      	beq.n	8008b02 <_dtoa_r+0x982>
 8008afa:	4641      	mov	r1, r8
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 fd07 	bl	8009510 <_Bfree>
 8008b02:	4639      	mov	r1, r7
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 fd03 	bl	8009510 <_Bfree>
 8008b0a:	e6a5      	b.n	8008858 <_dtoa_r+0x6d8>
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	4637      	mov	r7, r6
 8008b10:	e7e1      	b.n	8008ad6 <_dtoa_r+0x956>
 8008b12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b18:	4637      	mov	r7, r6
 8008b1a:	e599      	b.n	8008650 <_dtoa_r+0x4d0>
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80fd 	beq.w	8008d22 <_dtoa_r+0xba2>
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	dd05      	ble.n	8008b38 <_dtoa_r+0x9b8>
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 ff09 	bl	8009948 <__lshift>
 8008b36:	4607      	mov	r7, r0
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d05c      	beq.n	8008bf8 <_dtoa_r+0xa78>
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fca5 	bl	8009490 <_Balloc>
 8008b46:	4605      	mov	r5, r0
 8008b48:	b928      	cbnz	r0, 8008b56 <_dtoa_r+0x9d6>
 8008b4a:	4b80      	ldr	r3, [pc, #512]	; (8008d4c <_dtoa_r+0xbcc>)
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b52:	f7ff bb2e 	b.w	80081b2 <_dtoa_r+0x32>
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	3202      	adds	r2, #2
 8008b5a:	0092      	lsls	r2, r2, #2
 8008b5c:	f107 010c 	add.w	r1, r7, #12
 8008b60:	300c      	adds	r0, #12
 8008b62:	f000 fc87 	bl	8009474 <memcpy>
 8008b66:	2201      	movs	r2, #1
 8008b68:	4629      	mov	r1, r5
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 feec 	bl	8009948 <__lshift>
 8008b70:	9b00      	ldr	r3, [sp, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	9b00      	ldr	r3, [sp, #0]
 8008b78:	444b      	add	r3, r9
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	9b02      	ldr	r3, [sp, #8]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	46b8      	mov	r8, r7
 8008b84:	9306      	str	r3, [sp, #24]
 8008b86:	4607      	mov	r7, r0
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	4658      	mov	r0, fp
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	f7ff fa67 	bl	8008064 <quorem>
 8008b96:	4603      	mov	r3, r0
 8008b98:	3330      	adds	r3, #48	; 0x30
 8008b9a:	9004      	str	r0, [sp, #16]
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	9308      	str	r3, [sp, #32]
 8008ba2:	f000 ff3d 	bl	8009a20 <__mcmp>
 8008ba6:	463a      	mov	r2, r7
 8008ba8:	4681      	mov	r9, r0
 8008baa:	4631      	mov	r1, r6
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 ff53 	bl	8009a58 <__mdiff>
 8008bb2:	68c2      	ldr	r2, [r0, #12]
 8008bb4:	9b08      	ldr	r3, [sp, #32]
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	bb02      	cbnz	r2, 8008bfc <_dtoa_r+0xa7c>
 8008bba:	4601      	mov	r1, r0
 8008bbc:	4658      	mov	r0, fp
 8008bbe:	f000 ff2f 	bl	8009a20 <__mcmp>
 8008bc2:	9b08      	ldr	r3, [sp, #32]
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4620      	mov	r0, r4
 8008bca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008bce:	f000 fc9f 	bl	8009510 <_Bfree>
 8008bd2:	9b05      	ldr	r3, [sp, #20]
 8008bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd6:	9d01      	ldr	r5, [sp, #4]
 8008bd8:	ea43 0102 	orr.w	r1, r3, r2
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	430b      	orrs	r3, r1
 8008be0:	9b08      	ldr	r3, [sp, #32]
 8008be2:	d10d      	bne.n	8008c00 <_dtoa_r+0xa80>
 8008be4:	2b39      	cmp	r3, #57	; 0x39
 8008be6:	d029      	beq.n	8008c3c <_dtoa_r+0xabc>
 8008be8:	f1b9 0f00 	cmp.w	r9, #0
 8008bec:	dd01      	ble.n	8008bf2 <_dtoa_r+0xa72>
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	3331      	adds	r3, #49	; 0x31
 8008bf2:	9a02      	ldr	r2, [sp, #8]
 8008bf4:	7013      	strb	r3, [r2, #0]
 8008bf6:	e774      	b.n	8008ae2 <_dtoa_r+0x962>
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	e7b9      	b.n	8008b70 <_dtoa_r+0x9f0>
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	e7e2      	b.n	8008bc6 <_dtoa_r+0xa46>
 8008c00:	f1b9 0f00 	cmp.w	r9, #0
 8008c04:	db06      	blt.n	8008c14 <_dtoa_r+0xa94>
 8008c06:	9905      	ldr	r1, [sp, #20]
 8008c08:	ea41 0909 	orr.w	r9, r1, r9
 8008c0c:	9906      	ldr	r1, [sp, #24]
 8008c0e:	ea59 0101 	orrs.w	r1, r9, r1
 8008c12:	d120      	bne.n	8008c56 <_dtoa_r+0xad6>
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	ddec      	ble.n	8008bf2 <_dtoa_r+0xa72>
 8008c18:	4659      	mov	r1, fp
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	9301      	str	r3, [sp, #4]
 8008c20:	f000 fe92 	bl	8009948 <__lshift>
 8008c24:	4631      	mov	r1, r6
 8008c26:	4683      	mov	fp, r0
 8008c28:	f000 fefa 	bl	8009a20 <__mcmp>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	dc02      	bgt.n	8008c38 <_dtoa_r+0xab8>
 8008c32:	d1de      	bne.n	8008bf2 <_dtoa_r+0xa72>
 8008c34:	07da      	lsls	r2, r3, #31
 8008c36:	d5dc      	bpl.n	8008bf2 <_dtoa_r+0xa72>
 8008c38:	2b39      	cmp	r3, #57	; 0x39
 8008c3a:	d1d8      	bne.n	8008bee <_dtoa_r+0xa6e>
 8008c3c:	9a02      	ldr	r2, [sp, #8]
 8008c3e:	2339      	movs	r3, #57	; 0x39
 8008c40:	7013      	strb	r3, [r2, #0]
 8008c42:	462b      	mov	r3, r5
 8008c44:	461d      	mov	r5, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c4c:	2a39      	cmp	r2, #57	; 0x39
 8008c4e:	d050      	beq.n	8008cf2 <_dtoa_r+0xb72>
 8008c50:	3201      	adds	r2, #1
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	e745      	b.n	8008ae2 <_dtoa_r+0x962>
 8008c56:	2a00      	cmp	r2, #0
 8008c58:	dd03      	ble.n	8008c62 <_dtoa_r+0xae2>
 8008c5a:	2b39      	cmp	r3, #57	; 0x39
 8008c5c:	d0ee      	beq.n	8008c3c <_dtoa_r+0xabc>
 8008c5e:	3301      	adds	r3, #1
 8008c60:	e7c7      	b.n	8008bf2 <_dtoa_r+0xa72>
 8008c62:	9a01      	ldr	r2, [sp, #4]
 8008c64:	9907      	ldr	r1, [sp, #28]
 8008c66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c6a:	428a      	cmp	r2, r1
 8008c6c:	d02a      	beq.n	8008cc4 <_dtoa_r+0xb44>
 8008c6e:	4659      	mov	r1, fp
 8008c70:	2300      	movs	r3, #0
 8008c72:	220a      	movs	r2, #10
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fc6d 	bl	8009554 <__multadd>
 8008c7a:	45b8      	cmp	r8, r7
 8008c7c:	4683      	mov	fp, r0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	f04f 020a 	mov.w	r2, #10
 8008c86:	4641      	mov	r1, r8
 8008c88:	4620      	mov	r0, r4
 8008c8a:	d107      	bne.n	8008c9c <_dtoa_r+0xb1c>
 8008c8c:	f000 fc62 	bl	8009554 <__multadd>
 8008c90:	4680      	mov	r8, r0
 8008c92:	4607      	mov	r7, r0
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	3301      	adds	r3, #1
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	e775      	b.n	8008b88 <_dtoa_r+0xa08>
 8008c9c:	f000 fc5a 	bl	8009554 <__multadd>
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	220a      	movs	r2, #10
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fc53 	bl	8009554 <__multadd>
 8008cae:	4607      	mov	r7, r0
 8008cb0:	e7f0      	b.n	8008c94 <_dtoa_r+0xb14>
 8008cb2:	f1b9 0f00 	cmp.w	r9, #0
 8008cb6:	9a00      	ldr	r2, [sp, #0]
 8008cb8:	bfcc      	ite	gt
 8008cba:	464d      	movgt	r5, r9
 8008cbc:	2501      	movle	r5, #1
 8008cbe:	4415      	add	r5, r2
 8008cc0:	f04f 0800 	mov.w	r8, #0
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4620      	mov	r0, r4
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	f000 fe3c 	bl	8009948 <__lshift>
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	4683      	mov	fp, r0
 8008cd4:	f000 fea4 	bl	8009a20 <__mcmp>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	dcb2      	bgt.n	8008c42 <_dtoa_r+0xac2>
 8008cdc:	d102      	bne.n	8008ce4 <_dtoa_r+0xb64>
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	07db      	lsls	r3, r3, #31
 8008ce2:	d4ae      	bmi.n	8008c42 <_dtoa_r+0xac2>
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cec:	2a30      	cmp	r2, #48	; 0x30
 8008cee:	d0fa      	beq.n	8008ce6 <_dtoa_r+0xb66>
 8008cf0:	e6f7      	b.n	8008ae2 <_dtoa_r+0x962>
 8008cf2:	9a00      	ldr	r2, [sp, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d1a5      	bne.n	8008c44 <_dtoa_r+0xac4>
 8008cf8:	f10a 0a01 	add.w	sl, sl, #1
 8008cfc:	2331      	movs	r3, #49	; 0x31
 8008cfe:	e779      	b.n	8008bf4 <_dtoa_r+0xa74>
 8008d00:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <_dtoa_r+0xbd0>)
 8008d02:	f7ff baaf 	b.w	8008264 <_dtoa_r+0xe4>
 8008d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f47f aa86 	bne.w	800821a <_dtoa_r+0x9a>
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <_dtoa_r+0xbd4>)
 8008d10:	f7ff baa8 	b.w	8008264 <_dtoa_r+0xe4>
 8008d14:	f1b9 0f00 	cmp.w	r9, #0
 8008d18:	dc03      	bgt.n	8008d22 <_dtoa_r+0xba2>
 8008d1a:	9b05      	ldr	r3, [sp, #20]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	f73f aec9 	bgt.w	8008ab4 <_dtoa_r+0x934>
 8008d22:	9d00      	ldr	r5, [sp, #0]
 8008d24:	4631      	mov	r1, r6
 8008d26:	4658      	mov	r0, fp
 8008d28:	f7ff f99c 	bl	8008064 <quorem>
 8008d2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d30:	f805 3b01 	strb.w	r3, [r5], #1
 8008d34:	9a00      	ldr	r2, [sp, #0]
 8008d36:	1aaa      	subs	r2, r5, r2
 8008d38:	4591      	cmp	r9, r2
 8008d3a:	ddba      	ble.n	8008cb2 <_dtoa_r+0xb32>
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	2300      	movs	r3, #0
 8008d40:	220a      	movs	r2, #10
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 fc06 	bl	8009554 <__multadd>
 8008d48:	4683      	mov	fp, r0
 8008d4a:	e7eb      	b.n	8008d24 <_dtoa_r+0xba4>
 8008d4c:	0800b09c 	.word	0x0800b09c
 8008d50:	0800ae9c 	.word	0x0800ae9c
 8008d54:	0800b019 	.word	0x0800b019

08008d58 <rshift>:
 8008d58:	6903      	ldr	r3, [r0, #16]
 8008d5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d66:	f100 0414 	add.w	r4, r0, #20
 8008d6a:	dd45      	ble.n	8008df8 <rshift+0xa0>
 8008d6c:	f011 011f 	ands.w	r1, r1, #31
 8008d70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d78:	d10c      	bne.n	8008d94 <rshift+0x3c>
 8008d7a:	f100 0710 	add.w	r7, r0, #16
 8008d7e:	4629      	mov	r1, r5
 8008d80:	42b1      	cmp	r1, r6
 8008d82:	d334      	bcc.n	8008dee <rshift+0x96>
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	1eea      	subs	r2, r5, #3
 8008d8a:	4296      	cmp	r6, r2
 8008d8c:	bf38      	it	cc
 8008d8e:	2300      	movcc	r3, #0
 8008d90:	4423      	add	r3, r4
 8008d92:	e015      	b.n	8008dc0 <rshift+0x68>
 8008d94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d98:	f1c1 0820 	rsb	r8, r1, #32
 8008d9c:	40cf      	lsrs	r7, r1
 8008d9e:	f105 0e04 	add.w	lr, r5, #4
 8008da2:	46a1      	mov	r9, r4
 8008da4:	4576      	cmp	r6, lr
 8008da6:	46f4      	mov	ip, lr
 8008da8:	d815      	bhi.n	8008dd6 <rshift+0x7e>
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	009a      	lsls	r2, r3, #2
 8008dae:	3a04      	subs	r2, #4
 8008db0:	3501      	adds	r5, #1
 8008db2:	42ae      	cmp	r6, r5
 8008db4:	bf38      	it	cc
 8008db6:	2200      	movcc	r2, #0
 8008db8:	18a3      	adds	r3, r4, r2
 8008dba:	50a7      	str	r7, [r4, r2]
 8008dbc:	b107      	cbz	r7, 8008dc0 <rshift+0x68>
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	1b1a      	subs	r2, r3, r4
 8008dc2:	42a3      	cmp	r3, r4
 8008dc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dc8:	bf08      	it	eq
 8008dca:	2300      	moveq	r3, #0
 8008dcc:	6102      	str	r2, [r0, #16]
 8008dce:	bf08      	it	eq
 8008dd0:	6143      	streq	r3, [r0, #20]
 8008dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	f8dc c000 	ldr.w	ip, [ip]
 8008dda:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dde:	ea4c 0707 	orr.w	r7, ip, r7
 8008de2:	f849 7b04 	str.w	r7, [r9], #4
 8008de6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008dea:	40cf      	lsrs	r7, r1
 8008dec:	e7da      	b.n	8008da4 <rshift+0x4c>
 8008dee:	f851 cb04 	ldr.w	ip, [r1], #4
 8008df2:	f847 cf04 	str.w	ip, [r7, #4]!
 8008df6:	e7c3      	b.n	8008d80 <rshift+0x28>
 8008df8:	4623      	mov	r3, r4
 8008dfa:	e7e1      	b.n	8008dc0 <rshift+0x68>

08008dfc <__hexdig_fun>:
 8008dfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d802      	bhi.n	8008e0a <__hexdig_fun+0xe>
 8008e04:	3820      	subs	r0, #32
 8008e06:	b2c0      	uxtb	r0, r0
 8008e08:	4770      	bx	lr
 8008e0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	d801      	bhi.n	8008e16 <__hexdig_fun+0x1a>
 8008e12:	3847      	subs	r0, #71	; 0x47
 8008e14:	e7f7      	b.n	8008e06 <__hexdig_fun+0xa>
 8008e16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d801      	bhi.n	8008e22 <__hexdig_fun+0x26>
 8008e1e:	3827      	subs	r0, #39	; 0x27
 8008e20:	e7f1      	b.n	8008e06 <__hexdig_fun+0xa>
 8008e22:	2000      	movs	r0, #0
 8008e24:	4770      	bx	lr
	...

08008e28 <__gethex>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	ed2d 8b02 	vpush	{d8}
 8008e30:	b089      	sub	sp, #36	; 0x24
 8008e32:	ee08 0a10 	vmov	s16, r0
 8008e36:	9304      	str	r3, [sp, #16]
 8008e38:	4bbc      	ldr	r3, [pc, #752]	; (800912c <__gethex+0x304>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	468b      	mov	fp, r1
 8008e42:	4690      	mov	r8, r2
 8008e44:	f7f7 f9e4 	bl	8000210 <strlen>
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	f8db 2000 	ldr.w	r2, [fp]
 8008e4e:	4403      	add	r3, r0
 8008e50:	4682      	mov	sl, r0
 8008e52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	1c93      	adds	r3, r2, #2
 8008e5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008e5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e62:	32fe      	adds	r2, #254	; 0xfe
 8008e64:	18d1      	adds	r1, r2, r3
 8008e66:	461f      	mov	r7, r3
 8008e68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e6c:	9100      	str	r1, [sp, #0]
 8008e6e:	2830      	cmp	r0, #48	; 0x30
 8008e70:	d0f8      	beq.n	8008e64 <__gethex+0x3c>
 8008e72:	f7ff ffc3 	bl	8008dfc <__hexdig_fun>
 8008e76:	4604      	mov	r4, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d13a      	bne.n	8008ef2 <__gethex+0xca>
 8008e7c:	9901      	ldr	r1, [sp, #4]
 8008e7e:	4652      	mov	r2, sl
 8008e80:	4638      	mov	r0, r7
 8008e82:	f001 f9e5 	bl	800a250 <strncmp>
 8008e86:	4605      	mov	r5, r0
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d168      	bne.n	8008f5e <__gethex+0x136>
 8008e8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e90:	eb07 060a 	add.w	r6, r7, sl
 8008e94:	f7ff ffb2 	bl	8008dfc <__hexdig_fun>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d062      	beq.n	8008f62 <__gethex+0x13a>
 8008e9c:	4633      	mov	r3, r6
 8008e9e:	7818      	ldrb	r0, [r3, #0]
 8008ea0:	2830      	cmp	r0, #48	; 0x30
 8008ea2:	461f      	mov	r7, r3
 8008ea4:	f103 0301 	add.w	r3, r3, #1
 8008ea8:	d0f9      	beq.n	8008e9e <__gethex+0x76>
 8008eaa:	f7ff ffa7 	bl	8008dfc <__hexdig_fun>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	fab0 f480 	clz	r4, r0
 8008eb4:	0964      	lsrs	r4, r4, #5
 8008eb6:	4635      	mov	r5, r6
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	463a      	mov	r2, r7
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	3201      	adds	r2, #1
 8008ec0:	7830      	ldrb	r0, [r6, #0]
 8008ec2:	f7ff ff9b 	bl	8008dfc <__hexdig_fun>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d1f8      	bne.n	8008ebc <__gethex+0x94>
 8008eca:	9901      	ldr	r1, [sp, #4]
 8008ecc:	4652      	mov	r2, sl
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f001 f9be 	bl	800a250 <strncmp>
 8008ed4:	b980      	cbnz	r0, 8008ef8 <__gethex+0xd0>
 8008ed6:	b94d      	cbnz	r5, 8008eec <__gethex+0xc4>
 8008ed8:	eb06 050a 	add.w	r5, r6, sl
 8008edc:	462a      	mov	r2, r5
 8008ede:	4616      	mov	r6, r2
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	7830      	ldrb	r0, [r6, #0]
 8008ee4:	f7ff ff8a 	bl	8008dfc <__hexdig_fun>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d1f8      	bne.n	8008ede <__gethex+0xb6>
 8008eec:	1bad      	subs	r5, r5, r6
 8008eee:	00ad      	lsls	r5, r5, #2
 8008ef0:	e004      	b.n	8008efc <__gethex+0xd4>
 8008ef2:	2400      	movs	r4, #0
 8008ef4:	4625      	mov	r5, r4
 8008ef6:	e7e0      	b.n	8008eba <__gethex+0x92>
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	d1f7      	bne.n	8008eec <__gethex+0xc4>
 8008efc:	7833      	ldrb	r3, [r6, #0]
 8008efe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f02:	2b50      	cmp	r3, #80	; 0x50
 8008f04:	d13b      	bne.n	8008f7e <__gethex+0x156>
 8008f06:	7873      	ldrb	r3, [r6, #1]
 8008f08:	2b2b      	cmp	r3, #43	; 0x2b
 8008f0a:	d02c      	beq.n	8008f66 <__gethex+0x13e>
 8008f0c:	2b2d      	cmp	r3, #45	; 0x2d
 8008f0e:	d02e      	beq.n	8008f6e <__gethex+0x146>
 8008f10:	1c71      	adds	r1, r6, #1
 8008f12:	f04f 0900 	mov.w	r9, #0
 8008f16:	7808      	ldrb	r0, [r1, #0]
 8008f18:	f7ff ff70 	bl	8008dfc <__hexdig_fun>
 8008f1c:	1e43      	subs	r3, r0, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b18      	cmp	r3, #24
 8008f22:	d82c      	bhi.n	8008f7e <__gethex+0x156>
 8008f24:	f1a0 0210 	sub.w	r2, r0, #16
 8008f28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f2c:	f7ff ff66 	bl	8008dfc <__hexdig_fun>
 8008f30:	1e43      	subs	r3, r0, #1
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b18      	cmp	r3, #24
 8008f36:	d91d      	bls.n	8008f74 <__gethex+0x14c>
 8008f38:	f1b9 0f00 	cmp.w	r9, #0
 8008f3c:	d000      	beq.n	8008f40 <__gethex+0x118>
 8008f3e:	4252      	negs	r2, r2
 8008f40:	4415      	add	r5, r2
 8008f42:	f8cb 1000 	str.w	r1, [fp]
 8008f46:	b1e4      	cbz	r4, 8008f82 <__gethex+0x15a>
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bf14      	ite	ne
 8008f4e:	2700      	movne	r7, #0
 8008f50:	2706      	moveq	r7, #6
 8008f52:	4638      	mov	r0, r7
 8008f54:	b009      	add	sp, #36	; 0x24
 8008f56:	ecbd 8b02 	vpop	{d8}
 8008f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	463e      	mov	r6, r7
 8008f60:	4625      	mov	r5, r4
 8008f62:	2401      	movs	r4, #1
 8008f64:	e7ca      	b.n	8008efc <__gethex+0xd4>
 8008f66:	f04f 0900 	mov.w	r9, #0
 8008f6a:	1cb1      	adds	r1, r6, #2
 8008f6c:	e7d3      	b.n	8008f16 <__gethex+0xee>
 8008f6e:	f04f 0901 	mov.w	r9, #1
 8008f72:	e7fa      	b.n	8008f6a <__gethex+0x142>
 8008f74:	230a      	movs	r3, #10
 8008f76:	fb03 0202 	mla	r2, r3, r2, r0
 8008f7a:	3a10      	subs	r2, #16
 8008f7c:	e7d4      	b.n	8008f28 <__gethex+0x100>
 8008f7e:	4631      	mov	r1, r6
 8008f80:	e7df      	b.n	8008f42 <__gethex+0x11a>
 8008f82:	1bf3      	subs	r3, r6, r7
 8008f84:	3b01      	subs	r3, #1
 8008f86:	4621      	mov	r1, r4
 8008f88:	2b07      	cmp	r3, #7
 8008f8a:	dc0b      	bgt.n	8008fa4 <__gethex+0x17c>
 8008f8c:	ee18 0a10 	vmov	r0, s16
 8008f90:	f000 fa7e 	bl	8009490 <_Balloc>
 8008f94:	4604      	mov	r4, r0
 8008f96:	b940      	cbnz	r0, 8008faa <__gethex+0x182>
 8008f98:	4b65      	ldr	r3, [pc, #404]	; (8009130 <__gethex+0x308>)
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	21de      	movs	r1, #222	; 0xde
 8008f9e:	4865      	ldr	r0, [pc, #404]	; (8009134 <__gethex+0x30c>)
 8008fa0:	f001 f976 	bl	800a290 <__assert_func>
 8008fa4:	3101      	adds	r1, #1
 8008fa6:	105b      	asrs	r3, r3, #1
 8008fa8:	e7ee      	b.n	8008f88 <__gethex+0x160>
 8008faa:	f100 0914 	add.w	r9, r0, #20
 8008fae:	f04f 0b00 	mov.w	fp, #0
 8008fb2:	f1ca 0301 	rsb	r3, sl, #1
 8008fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fba:	f8cd b000 	str.w	fp, [sp]
 8008fbe:	9306      	str	r3, [sp, #24]
 8008fc0:	42b7      	cmp	r7, r6
 8008fc2:	d340      	bcc.n	8009046 <__gethex+0x21e>
 8008fc4:	9802      	ldr	r0, [sp, #8]
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	f840 3b04 	str.w	r3, [r0], #4
 8008fcc:	eba0 0009 	sub.w	r0, r0, r9
 8008fd0:	1080      	asrs	r0, r0, #2
 8008fd2:	0146      	lsls	r6, r0, #5
 8008fd4:	6120      	str	r0, [r4, #16]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fb50 	bl	800967c <__hi0bits>
 8008fdc:	1a30      	subs	r0, r6, r0
 8008fde:	f8d8 6000 	ldr.w	r6, [r8]
 8008fe2:	42b0      	cmp	r0, r6
 8008fe4:	dd63      	ble.n	80090ae <__gethex+0x286>
 8008fe6:	1b87      	subs	r7, r0, r6
 8008fe8:	4639      	mov	r1, r7
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 feea 	bl	8009dc4 <__any_on>
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	b1a8      	cbz	r0, 8009020 <__gethex+0x1f8>
 8008ff4:	1e7b      	subs	r3, r7, #1
 8008ff6:	1159      	asrs	r1, r3, #5
 8008ff8:	f003 021f 	and.w	r2, r3, #31
 8008ffc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009000:	f04f 0a01 	mov.w	sl, #1
 8009004:	fa0a f202 	lsl.w	r2, sl, r2
 8009008:	420a      	tst	r2, r1
 800900a:	d009      	beq.n	8009020 <__gethex+0x1f8>
 800900c:	4553      	cmp	r3, sl
 800900e:	dd05      	ble.n	800901c <__gethex+0x1f4>
 8009010:	1eb9      	subs	r1, r7, #2
 8009012:	4620      	mov	r0, r4
 8009014:	f000 fed6 	bl	8009dc4 <__any_on>
 8009018:	2800      	cmp	r0, #0
 800901a:	d145      	bne.n	80090a8 <__gethex+0x280>
 800901c:	f04f 0a02 	mov.w	sl, #2
 8009020:	4639      	mov	r1, r7
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff fe98 	bl	8008d58 <rshift>
 8009028:	443d      	add	r5, r7
 800902a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800902e:	42ab      	cmp	r3, r5
 8009030:	da4c      	bge.n	80090cc <__gethex+0x2a4>
 8009032:	ee18 0a10 	vmov	r0, s16
 8009036:	4621      	mov	r1, r4
 8009038:	f000 fa6a 	bl	8009510 <_Bfree>
 800903c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800903e:	2300      	movs	r3, #0
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	27a3      	movs	r7, #163	; 0xa3
 8009044:	e785      	b.n	8008f52 <__gethex+0x12a>
 8009046:	1e73      	subs	r3, r6, #1
 8009048:	9a05      	ldr	r2, [sp, #20]
 800904a:	9303      	str	r3, [sp, #12]
 800904c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009050:	4293      	cmp	r3, r2
 8009052:	d019      	beq.n	8009088 <__gethex+0x260>
 8009054:	f1bb 0f20 	cmp.w	fp, #32
 8009058:	d107      	bne.n	800906a <__gethex+0x242>
 800905a:	9b02      	ldr	r3, [sp, #8]
 800905c:	9a00      	ldr	r2, [sp, #0]
 800905e:	f843 2b04 	str.w	r2, [r3], #4
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	2300      	movs	r3, #0
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	469b      	mov	fp, r3
 800906a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800906e:	f7ff fec5 	bl	8008dfc <__hexdig_fun>
 8009072:	9b00      	ldr	r3, [sp, #0]
 8009074:	f000 000f 	and.w	r0, r0, #15
 8009078:	fa00 f00b 	lsl.w	r0, r0, fp
 800907c:	4303      	orrs	r3, r0
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	f10b 0b04 	add.w	fp, fp, #4
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	e00d      	b.n	80090a4 <__gethex+0x27c>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	9a06      	ldr	r2, [sp, #24]
 800908c:	4413      	add	r3, r2
 800908e:	42bb      	cmp	r3, r7
 8009090:	d3e0      	bcc.n	8009054 <__gethex+0x22c>
 8009092:	4618      	mov	r0, r3
 8009094:	9901      	ldr	r1, [sp, #4]
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	4652      	mov	r2, sl
 800909a:	f001 f8d9 	bl	800a250 <strncmp>
 800909e:	9b07      	ldr	r3, [sp, #28]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d1d7      	bne.n	8009054 <__gethex+0x22c>
 80090a4:	461e      	mov	r6, r3
 80090a6:	e78b      	b.n	8008fc0 <__gethex+0x198>
 80090a8:	f04f 0a03 	mov.w	sl, #3
 80090ac:	e7b8      	b.n	8009020 <__gethex+0x1f8>
 80090ae:	da0a      	bge.n	80090c6 <__gethex+0x29e>
 80090b0:	1a37      	subs	r7, r6, r0
 80090b2:	4621      	mov	r1, r4
 80090b4:	ee18 0a10 	vmov	r0, s16
 80090b8:	463a      	mov	r2, r7
 80090ba:	f000 fc45 	bl	8009948 <__lshift>
 80090be:	1bed      	subs	r5, r5, r7
 80090c0:	4604      	mov	r4, r0
 80090c2:	f100 0914 	add.w	r9, r0, #20
 80090c6:	f04f 0a00 	mov.w	sl, #0
 80090ca:	e7ae      	b.n	800902a <__gethex+0x202>
 80090cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80090d0:	42a8      	cmp	r0, r5
 80090d2:	dd72      	ble.n	80091ba <__gethex+0x392>
 80090d4:	1b45      	subs	r5, r0, r5
 80090d6:	42ae      	cmp	r6, r5
 80090d8:	dc36      	bgt.n	8009148 <__gethex+0x320>
 80090da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d02a      	beq.n	8009138 <__gethex+0x310>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d02c      	beq.n	8009140 <__gethex+0x318>
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d115      	bne.n	8009116 <__gethex+0x2ee>
 80090ea:	42ae      	cmp	r6, r5
 80090ec:	d113      	bne.n	8009116 <__gethex+0x2ee>
 80090ee:	2e01      	cmp	r6, #1
 80090f0:	d10b      	bne.n	800910a <__gethex+0x2e2>
 80090f2:	9a04      	ldr	r2, [sp, #16]
 80090f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	2301      	movs	r3, #1
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	f8c9 3000 	str.w	r3, [r9]
 8009102:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009104:	2762      	movs	r7, #98	; 0x62
 8009106:	601c      	str	r4, [r3, #0]
 8009108:	e723      	b.n	8008f52 <__gethex+0x12a>
 800910a:	1e71      	subs	r1, r6, #1
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fe59 	bl	8009dc4 <__any_on>
 8009112:	2800      	cmp	r0, #0
 8009114:	d1ed      	bne.n	80090f2 <__gethex+0x2ca>
 8009116:	ee18 0a10 	vmov	r0, s16
 800911a:	4621      	mov	r1, r4
 800911c:	f000 f9f8 	bl	8009510 <_Bfree>
 8009120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009122:	2300      	movs	r3, #0
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	2750      	movs	r7, #80	; 0x50
 8009128:	e713      	b.n	8008f52 <__gethex+0x12a>
 800912a:	bf00      	nop
 800912c:	0800b118 	.word	0x0800b118
 8009130:	0800b09c 	.word	0x0800b09c
 8009134:	0800b0ad 	.word	0x0800b0ad
 8009138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1eb      	bne.n	8009116 <__gethex+0x2ee>
 800913e:	e7d8      	b.n	80090f2 <__gethex+0x2ca>
 8009140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1d5      	bne.n	80090f2 <__gethex+0x2ca>
 8009146:	e7e6      	b.n	8009116 <__gethex+0x2ee>
 8009148:	1e6f      	subs	r7, r5, #1
 800914a:	f1ba 0f00 	cmp.w	sl, #0
 800914e:	d131      	bne.n	80091b4 <__gethex+0x38c>
 8009150:	b127      	cbz	r7, 800915c <__gethex+0x334>
 8009152:	4639      	mov	r1, r7
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fe35 	bl	8009dc4 <__any_on>
 800915a:	4682      	mov	sl, r0
 800915c:	117b      	asrs	r3, r7, #5
 800915e:	2101      	movs	r1, #1
 8009160:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009164:	f007 071f 	and.w	r7, r7, #31
 8009168:	fa01 f707 	lsl.w	r7, r1, r7
 800916c:	421f      	tst	r7, r3
 800916e:	4629      	mov	r1, r5
 8009170:	4620      	mov	r0, r4
 8009172:	bf18      	it	ne
 8009174:	f04a 0a02 	orrne.w	sl, sl, #2
 8009178:	1b76      	subs	r6, r6, r5
 800917a:	f7ff fded 	bl	8008d58 <rshift>
 800917e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009182:	2702      	movs	r7, #2
 8009184:	f1ba 0f00 	cmp.w	sl, #0
 8009188:	d048      	beq.n	800921c <__gethex+0x3f4>
 800918a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d015      	beq.n	80091be <__gethex+0x396>
 8009192:	2b03      	cmp	r3, #3
 8009194:	d017      	beq.n	80091c6 <__gethex+0x39e>
 8009196:	2b01      	cmp	r3, #1
 8009198:	d109      	bne.n	80091ae <__gethex+0x386>
 800919a:	f01a 0f02 	tst.w	sl, #2
 800919e:	d006      	beq.n	80091ae <__gethex+0x386>
 80091a0:	f8d9 0000 	ldr.w	r0, [r9]
 80091a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80091a8:	f01a 0f01 	tst.w	sl, #1
 80091ac:	d10e      	bne.n	80091cc <__gethex+0x3a4>
 80091ae:	f047 0710 	orr.w	r7, r7, #16
 80091b2:	e033      	b.n	800921c <__gethex+0x3f4>
 80091b4:	f04f 0a01 	mov.w	sl, #1
 80091b8:	e7d0      	b.n	800915c <__gethex+0x334>
 80091ba:	2701      	movs	r7, #1
 80091bc:	e7e2      	b.n	8009184 <__gethex+0x35c>
 80091be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c0:	f1c3 0301 	rsb	r3, r3, #1
 80091c4:	9315      	str	r3, [sp, #84]	; 0x54
 80091c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0f0      	beq.n	80091ae <__gethex+0x386>
 80091cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091d0:	f104 0314 	add.w	r3, r4, #20
 80091d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091dc:	f04f 0c00 	mov.w	ip, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091ea:	d01c      	beq.n	8009226 <__gethex+0x3fe>
 80091ec:	3201      	adds	r2, #1
 80091ee:	6002      	str	r2, [r0, #0]
 80091f0:	2f02      	cmp	r7, #2
 80091f2:	f104 0314 	add.w	r3, r4, #20
 80091f6:	d13f      	bne.n	8009278 <__gethex+0x450>
 80091f8:	f8d8 2000 	ldr.w	r2, [r8]
 80091fc:	3a01      	subs	r2, #1
 80091fe:	42b2      	cmp	r2, r6
 8009200:	d10a      	bne.n	8009218 <__gethex+0x3f0>
 8009202:	1171      	asrs	r1, r6, #5
 8009204:	2201      	movs	r2, #1
 8009206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800920a:	f006 061f 	and.w	r6, r6, #31
 800920e:	fa02 f606 	lsl.w	r6, r2, r6
 8009212:	421e      	tst	r6, r3
 8009214:	bf18      	it	ne
 8009216:	4617      	movne	r7, r2
 8009218:	f047 0720 	orr.w	r7, r7, #32
 800921c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800921e:	601c      	str	r4, [r3, #0]
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	601d      	str	r5, [r3, #0]
 8009224:	e695      	b.n	8008f52 <__gethex+0x12a>
 8009226:	4299      	cmp	r1, r3
 8009228:	f843 cc04 	str.w	ip, [r3, #-4]
 800922c:	d8d8      	bhi.n	80091e0 <__gethex+0x3b8>
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	459b      	cmp	fp, r3
 8009232:	db19      	blt.n	8009268 <__gethex+0x440>
 8009234:	6861      	ldr	r1, [r4, #4]
 8009236:	ee18 0a10 	vmov	r0, s16
 800923a:	3101      	adds	r1, #1
 800923c:	f000 f928 	bl	8009490 <_Balloc>
 8009240:	4681      	mov	r9, r0
 8009242:	b918      	cbnz	r0, 800924c <__gethex+0x424>
 8009244:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <__gethex+0x488>)
 8009246:	4602      	mov	r2, r0
 8009248:	2184      	movs	r1, #132	; 0x84
 800924a:	e6a8      	b.n	8008f9e <__gethex+0x176>
 800924c:	6922      	ldr	r2, [r4, #16]
 800924e:	3202      	adds	r2, #2
 8009250:	f104 010c 	add.w	r1, r4, #12
 8009254:	0092      	lsls	r2, r2, #2
 8009256:	300c      	adds	r0, #12
 8009258:	f000 f90c 	bl	8009474 <memcpy>
 800925c:	4621      	mov	r1, r4
 800925e:	ee18 0a10 	vmov	r0, s16
 8009262:	f000 f955 	bl	8009510 <_Bfree>
 8009266:	464c      	mov	r4, r9
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009270:	6122      	str	r2, [r4, #16]
 8009272:	2201      	movs	r2, #1
 8009274:	615a      	str	r2, [r3, #20]
 8009276:	e7bb      	b.n	80091f0 <__gethex+0x3c8>
 8009278:	6922      	ldr	r2, [r4, #16]
 800927a:	455a      	cmp	r2, fp
 800927c:	dd0b      	ble.n	8009296 <__gethex+0x46e>
 800927e:	2101      	movs	r1, #1
 8009280:	4620      	mov	r0, r4
 8009282:	f7ff fd69 	bl	8008d58 <rshift>
 8009286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800928a:	3501      	adds	r5, #1
 800928c:	42ab      	cmp	r3, r5
 800928e:	f6ff aed0 	blt.w	8009032 <__gethex+0x20a>
 8009292:	2701      	movs	r7, #1
 8009294:	e7c0      	b.n	8009218 <__gethex+0x3f0>
 8009296:	f016 061f 	ands.w	r6, r6, #31
 800929a:	d0fa      	beq.n	8009292 <__gethex+0x46a>
 800929c:	449a      	add	sl, r3
 800929e:	f1c6 0620 	rsb	r6, r6, #32
 80092a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80092a6:	f000 f9e9 	bl	800967c <__hi0bits>
 80092aa:	42b0      	cmp	r0, r6
 80092ac:	dbe7      	blt.n	800927e <__gethex+0x456>
 80092ae:	e7f0      	b.n	8009292 <__gethex+0x46a>
 80092b0:	0800b09c 	.word	0x0800b09c

080092b4 <L_shift>:
 80092b4:	f1c2 0208 	rsb	r2, r2, #8
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	b570      	push	{r4, r5, r6, lr}
 80092bc:	f1c2 0620 	rsb	r6, r2, #32
 80092c0:	6843      	ldr	r3, [r0, #4]
 80092c2:	6804      	ldr	r4, [r0, #0]
 80092c4:	fa03 f506 	lsl.w	r5, r3, r6
 80092c8:	432c      	orrs	r4, r5
 80092ca:	40d3      	lsrs	r3, r2
 80092cc:	6004      	str	r4, [r0, #0]
 80092ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80092d2:	4288      	cmp	r0, r1
 80092d4:	d3f4      	bcc.n	80092c0 <L_shift+0xc>
 80092d6:	bd70      	pop	{r4, r5, r6, pc}

080092d8 <__match>:
 80092d8:	b530      	push	{r4, r5, lr}
 80092da:	6803      	ldr	r3, [r0, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e2:	b914      	cbnz	r4, 80092ea <__match+0x12>
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	2001      	movs	r0, #1
 80092e8:	bd30      	pop	{r4, r5, pc}
 80092ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80092f2:	2d19      	cmp	r5, #25
 80092f4:	bf98      	it	ls
 80092f6:	3220      	addls	r2, #32
 80092f8:	42a2      	cmp	r2, r4
 80092fa:	d0f0      	beq.n	80092de <__match+0x6>
 80092fc:	2000      	movs	r0, #0
 80092fe:	e7f3      	b.n	80092e8 <__match+0x10>

08009300 <__hexnan>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	680b      	ldr	r3, [r1, #0]
 8009306:	6801      	ldr	r1, [r0, #0]
 8009308:	115e      	asrs	r6, r3, #5
 800930a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800930e:	f013 031f 	ands.w	r3, r3, #31
 8009312:	b087      	sub	sp, #28
 8009314:	bf18      	it	ne
 8009316:	3604      	addne	r6, #4
 8009318:	2500      	movs	r5, #0
 800931a:	1f37      	subs	r7, r6, #4
 800931c:	4682      	mov	sl, r0
 800931e:	4690      	mov	r8, r2
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	f846 5c04 	str.w	r5, [r6, #-4]
 8009326:	46b9      	mov	r9, r7
 8009328:	463c      	mov	r4, r7
 800932a:	9502      	str	r5, [sp, #8]
 800932c:	46ab      	mov	fp, r5
 800932e:	784a      	ldrb	r2, [r1, #1]
 8009330:	1c4b      	adds	r3, r1, #1
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	b342      	cbz	r2, 8009388 <__hexnan+0x88>
 8009336:	4610      	mov	r0, r2
 8009338:	9105      	str	r1, [sp, #20]
 800933a:	9204      	str	r2, [sp, #16]
 800933c:	f7ff fd5e 	bl	8008dfc <__hexdig_fun>
 8009340:	2800      	cmp	r0, #0
 8009342:	d14f      	bne.n	80093e4 <__hexnan+0xe4>
 8009344:	9a04      	ldr	r2, [sp, #16]
 8009346:	9905      	ldr	r1, [sp, #20]
 8009348:	2a20      	cmp	r2, #32
 800934a:	d818      	bhi.n	800937e <__hexnan+0x7e>
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	459b      	cmp	fp, r3
 8009350:	dd13      	ble.n	800937a <__hexnan+0x7a>
 8009352:	454c      	cmp	r4, r9
 8009354:	d206      	bcs.n	8009364 <__hexnan+0x64>
 8009356:	2d07      	cmp	r5, #7
 8009358:	dc04      	bgt.n	8009364 <__hexnan+0x64>
 800935a:	462a      	mov	r2, r5
 800935c:	4649      	mov	r1, r9
 800935e:	4620      	mov	r0, r4
 8009360:	f7ff ffa8 	bl	80092b4 <L_shift>
 8009364:	4544      	cmp	r4, r8
 8009366:	d950      	bls.n	800940a <__hexnan+0x10a>
 8009368:	2300      	movs	r3, #0
 800936a:	f1a4 0904 	sub.w	r9, r4, #4
 800936e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009372:	f8cd b008 	str.w	fp, [sp, #8]
 8009376:	464c      	mov	r4, r9
 8009378:	461d      	mov	r5, r3
 800937a:	9903      	ldr	r1, [sp, #12]
 800937c:	e7d7      	b.n	800932e <__hexnan+0x2e>
 800937e:	2a29      	cmp	r2, #41	; 0x29
 8009380:	d156      	bne.n	8009430 <__hexnan+0x130>
 8009382:	3102      	adds	r1, #2
 8009384:	f8ca 1000 	str.w	r1, [sl]
 8009388:	f1bb 0f00 	cmp.w	fp, #0
 800938c:	d050      	beq.n	8009430 <__hexnan+0x130>
 800938e:	454c      	cmp	r4, r9
 8009390:	d206      	bcs.n	80093a0 <__hexnan+0xa0>
 8009392:	2d07      	cmp	r5, #7
 8009394:	dc04      	bgt.n	80093a0 <__hexnan+0xa0>
 8009396:	462a      	mov	r2, r5
 8009398:	4649      	mov	r1, r9
 800939a:	4620      	mov	r0, r4
 800939c:	f7ff ff8a 	bl	80092b4 <L_shift>
 80093a0:	4544      	cmp	r4, r8
 80093a2:	d934      	bls.n	800940e <__hexnan+0x10e>
 80093a4:	f1a8 0204 	sub.w	r2, r8, #4
 80093a8:	4623      	mov	r3, r4
 80093aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80093ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80093b2:	429f      	cmp	r7, r3
 80093b4:	d2f9      	bcs.n	80093aa <__hexnan+0xaa>
 80093b6:	1b3b      	subs	r3, r7, r4
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	3304      	adds	r3, #4
 80093be:	3401      	adds	r4, #1
 80093c0:	3e03      	subs	r6, #3
 80093c2:	42b4      	cmp	r4, r6
 80093c4:	bf88      	it	hi
 80093c6:	2304      	movhi	r3, #4
 80093c8:	4443      	add	r3, r8
 80093ca:	2200      	movs	r2, #0
 80093cc:	f843 2b04 	str.w	r2, [r3], #4
 80093d0:	429f      	cmp	r7, r3
 80093d2:	d2fb      	bcs.n	80093cc <__hexnan+0xcc>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	b91b      	cbnz	r3, 80093e0 <__hexnan+0xe0>
 80093d8:	4547      	cmp	r7, r8
 80093da:	d127      	bne.n	800942c <__hexnan+0x12c>
 80093dc:	2301      	movs	r3, #1
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	2005      	movs	r0, #5
 80093e2:	e026      	b.n	8009432 <__hexnan+0x132>
 80093e4:	3501      	adds	r5, #1
 80093e6:	2d08      	cmp	r5, #8
 80093e8:	f10b 0b01 	add.w	fp, fp, #1
 80093ec:	dd06      	ble.n	80093fc <__hexnan+0xfc>
 80093ee:	4544      	cmp	r4, r8
 80093f0:	d9c3      	bls.n	800937a <__hexnan+0x7a>
 80093f2:	2300      	movs	r3, #0
 80093f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80093f8:	2501      	movs	r5, #1
 80093fa:	3c04      	subs	r4, #4
 80093fc:	6822      	ldr	r2, [r4, #0]
 80093fe:	f000 000f 	and.w	r0, r0, #15
 8009402:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009406:	6022      	str	r2, [r4, #0]
 8009408:	e7b7      	b.n	800937a <__hexnan+0x7a>
 800940a:	2508      	movs	r5, #8
 800940c:	e7b5      	b.n	800937a <__hexnan+0x7a>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0df      	beq.n	80093d4 <__hexnan+0xd4>
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	f1c3 0320 	rsb	r3, r3, #32
 800941c:	fa22 f303 	lsr.w	r3, r2, r3
 8009420:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009424:	401a      	ands	r2, r3
 8009426:	f846 2c04 	str.w	r2, [r6, #-4]
 800942a:	e7d3      	b.n	80093d4 <__hexnan+0xd4>
 800942c:	3f04      	subs	r7, #4
 800942e:	e7d1      	b.n	80093d4 <__hexnan+0xd4>
 8009430:	2004      	movs	r0, #4
 8009432:	b007      	add	sp, #28
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009438 <_localeconv_r>:
 8009438:	4800      	ldr	r0, [pc, #0]	; (800943c <_localeconv_r+0x4>)
 800943a:	4770      	bx	lr
 800943c:	20000164 	.word	0x20000164

08009440 <malloc>:
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <malloc+0xc>)
 8009442:	4601      	mov	r1, r0
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f000 bd3d 	b.w	8009ec4 <_malloc_r>
 800944a:	bf00      	nop
 800944c:	2000000c 	.word	0x2000000c

08009450 <__ascii_mbtowc>:
 8009450:	b082      	sub	sp, #8
 8009452:	b901      	cbnz	r1, 8009456 <__ascii_mbtowc+0x6>
 8009454:	a901      	add	r1, sp, #4
 8009456:	b142      	cbz	r2, 800946a <__ascii_mbtowc+0x1a>
 8009458:	b14b      	cbz	r3, 800946e <__ascii_mbtowc+0x1e>
 800945a:	7813      	ldrb	r3, [r2, #0]
 800945c:	600b      	str	r3, [r1, #0]
 800945e:	7812      	ldrb	r2, [r2, #0]
 8009460:	1e10      	subs	r0, r2, #0
 8009462:	bf18      	it	ne
 8009464:	2001      	movne	r0, #1
 8009466:	b002      	add	sp, #8
 8009468:	4770      	bx	lr
 800946a:	4610      	mov	r0, r2
 800946c:	e7fb      	b.n	8009466 <__ascii_mbtowc+0x16>
 800946e:	f06f 0001 	mvn.w	r0, #1
 8009472:	e7f8      	b.n	8009466 <__ascii_mbtowc+0x16>

08009474 <memcpy>:
 8009474:	440a      	add	r2, r1
 8009476:	4291      	cmp	r1, r2
 8009478:	f100 33ff 	add.w	r3, r0, #4294967295
 800947c:	d100      	bne.n	8009480 <memcpy+0xc>
 800947e:	4770      	bx	lr
 8009480:	b510      	push	{r4, lr}
 8009482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800948a:	4291      	cmp	r1, r2
 800948c:	d1f9      	bne.n	8009482 <memcpy+0xe>
 800948e:	bd10      	pop	{r4, pc}

08009490 <_Balloc>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009494:	4604      	mov	r4, r0
 8009496:	460d      	mov	r5, r1
 8009498:	b976      	cbnz	r6, 80094b8 <_Balloc+0x28>
 800949a:	2010      	movs	r0, #16
 800949c:	f7ff ffd0 	bl	8009440 <malloc>
 80094a0:	4602      	mov	r2, r0
 80094a2:	6260      	str	r0, [r4, #36]	; 0x24
 80094a4:	b920      	cbnz	r0, 80094b0 <_Balloc+0x20>
 80094a6:	4b18      	ldr	r3, [pc, #96]	; (8009508 <_Balloc+0x78>)
 80094a8:	4818      	ldr	r0, [pc, #96]	; (800950c <_Balloc+0x7c>)
 80094aa:	2166      	movs	r1, #102	; 0x66
 80094ac:	f000 fef0 	bl	800a290 <__assert_func>
 80094b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b4:	6006      	str	r6, [r0, #0]
 80094b6:	60c6      	str	r6, [r0, #12]
 80094b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094ba:	68f3      	ldr	r3, [r6, #12]
 80094bc:	b183      	cbz	r3, 80094e0 <_Balloc+0x50>
 80094be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094c6:	b9b8      	cbnz	r0, 80094f8 <_Balloc+0x68>
 80094c8:	2101      	movs	r1, #1
 80094ca:	fa01 f605 	lsl.w	r6, r1, r5
 80094ce:	1d72      	adds	r2, r6, #5
 80094d0:	0092      	lsls	r2, r2, #2
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fc97 	bl	8009e06 <_calloc_r>
 80094d8:	b160      	cbz	r0, 80094f4 <_Balloc+0x64>
 80094da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094de:	e00e      	b.n	80094fe <_Balloc+0x6e>
 80094e0:	2221      	movs	r2, #33	; 0x21
 80094e2:	2104      	movs	r1, #4
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fc8e 	bl	8009e06 <_calloc_r>
 80094ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ec:	60f0      	str	r0, [r6, #12]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e4      	bne.n	80094be <_Balloc+0x2e>
 80094f4:	2000      	movs	r0, #0
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	6802      	ldr	r2, [r0, #0]
 80094fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094fe:	2300      	movs	r3, #0
 8009500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009504:	e7f7      	b.n	80094f6 <_Balloc+0x66>
 8009506:	bf00      	nop
 8009508:	0800b026 	.word	0x0800b026
 800950c:	0800b12c 	.word	0x0800b12c

08009510 <_Bfree>:
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009514:	4605      	mov	r5, r0
 8009516:	460c      	mov	r4, r1
 8009518:	b976      	cbnz	r6, 8009538 <_Bfree+0x28>
 800951a:	2010      	movs	r0, #16
 800951c:	f7ff ff90 	bl	8009440 <malloc>
 8009520:	4602      	mov	r2, r0
 8009522:	6268      	str	r0, [r5, #36]	; 0x24
 8009524:	b920      	cbnz	r0, 8009530 <_Bfree+0x20>
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <_Bfree+0x3c>)
 8009528:	4809      	ldr	r0, [pc, #36]	; (8009550 <_Bfree+0x40>)
 800952a:	218a      	movs	r1, #138	; 0x8a
 800952c:	f000 feb0 	bl	800a290 <__assert_func>
 8009530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009534:	6006      	str	r6, [r0, #0]
 8009536:	60c6      	str	r6, [r0, #12]
 8009538:	b13c      	cbz	r4, 800954a <_Bfree+0x3a>
 800953a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800953c:	6862      	ldr	r2, [r4, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009544:	6021      	str	r1, [r4, #0]
 8009546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	0800b026 	.word	0x0800b026
 8009550:	0800b12c 	.word	0x0800b12c

08009554 <__multadd>:
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	690e      	ldr	r6, [r1, #16]
 800955a:	4607      	mov	r7, r0
 800955c:	4698      	mov	r8, r3
 800955e:	460c      	mov	r4, r1
 8009560:	f101 0014 	add.w	r0, r1, #20
 8009564:	2300      	movs	r3, #0
 8009566:	6805      	ldr	r5, [r0, #0]
 8009568:	b2a9      	uxth	r1, r5
 800956a:	fb02 8101 	mla	r1, r2, r1, r8
 800956e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009572:	0c2d      	lsrs	r5, r5, #16
 8009574:	fb02 c505 	mla	r5, r2, r5, ip
 8009578:	b289      	uxth	r1, r1
 800957a:	3301      	adds	r3, #1
 800957c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009580:	429e      	cmp	r6, r3
 8009582:	f840 1b04 	str.w	r1, [r0], #4
 8009586:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800958a:	dcec      	bgt.n	8009566 <__multadd+0x12>
 800958c:	f1b8 0f00 	cmp.w	r8, #0
 8009590:	d022      	beq.n	80095d8 <__multadd+0x84>
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	42b3      	cmp	r3, r6
 8009596:	dc19      	bgt.n	80095cc <__multadd+0x78>
 8009598:	6861      	ldr	r1, [r4, #4]
 800959a:	4638      	mov	r0, r7
 800959c:	3101      	adds	r1, #1
 800959e:	f7ff ff77 	bl	8009490 <_Balloc>
 80095a2:	4605      	mov	r5, r0
 80095a4:	b928      	cbnz	r0, 80095b2 <__multadd+0x5e>
 80095a6:	4602      	mov	r2, r0
 80095a8:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <__multadd+0x8c>)
 80095aa:	480e      	ldr	r0, [pc, #56]	; (80095e4 <__multadd+0x90>)
 80095ac:	21b5      	movs	r1, #181	; 0xb5
 80095ae:	f000 fe6f 	bl	800a290 <__assert_func>
 80095b2:	6922      	ldr	r2, [r4, #16]
 80095b4:	3202      	adds	r2, #2
 80095b6:	f104 010c 	add.w	r1, r4, #12
 80095ba:	0092      	lsls	r2, r2, #2
 80095bc:	300c      	adds	r0, #12
 80095be:	f7ff ff59 	bl	8009474 <memcpy>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ffa3 	bl	8009510 <_Bfree>
 80095ca:	462c      	mov	r4, r5
 80095cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80095d0:	3601      	adds	r6, #1
 80095d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80095d6:	6126      	str	r6, [r4, #16]
 80095d8:	4620      	mov	r0, r4
 80095da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095de:	bf00      	nop
 80095e0:	0800b09c 	.word	0x0800b09c
 80095e4:	0800b12c 	.word	0x0800b12c

080095e8 <__s2b>:
 80095e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	460c      	mov	r4, r1
 80095ee:	4615      	mov	r5, r2
 80095f0:	461f      	mov	r7, r3
 80095f2:	2209      	movs	r2, #9
 80095f4:	3308      	adds	r3, #8
 80095f6:	4606      	mov	r6, r0
 80095f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095fc:	2100      	movs	r1, #0
 80095fe:	2201      	movs	r2, #1
 8009600:	429a      	cmp	r2, r3
 8009602:	db09      	blt.n	8009618 <__s2b+0x30>
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff ff43 	bl	8009490 <_Balloc>
 800960a:	b940      	cbnz	r0, 800961e <__s2b+0x36>
 800960c:	4602      	mov	r2, r0
 800960e:	4b19      	ldr	r3, [pc, #100]	; (8009674 <__s2b+0x8c>)
 8009610:	4819      	ldr	r0, [pc, #100]	; (8009678 <__s2b+0x90>)
 8009612:	21ce      	movs	r1, #206	; 0xce
 8009614:	f000 fe3c 	bl	800a290 <__assert_func>
 8009618:	0052      	lsls	r2, r2, #1
 800961a:	3101      	adds	r1, #1
 800961c:	e7f0      	b.n	8009600 <__s2b+0x18>
 800961e:	9b08      	ldr	r3, [sp, #32]
 8009620:	6143      	str	r3, [r0, #20]
 8009622:	2d09      	cmp	r5, #9
 8009624:	f04f 0301 	mov.w	r3, #1
 8009628:	6103      	str	r3, [r0, #16]
 800962a:	dd16      	ble.n	800965a <__s2b+0x72>
 800962c:	f104 0909 	add.w	r9, r4, #9
 8009630:	46c8      	mov	r8, r9
 8009632:	442c      	add	r4, r5
 8009634:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009638:	4601      	mov	r1, r0
 800963a:	3b30      	subs	r3, #48	; 0x30
 800963c:	220a      	movs	r2, #10
 800963e:	4630      	mov	r0, r6
 8009640:	f7ff ff88 	bl	8009554 <__multadd>
 8009644:	45a0      	cmp	r8, r4
 8009646:	d1f5      	bne.n	8009634 <__s2b+0x4c>
 8009648:	f1a5 0408 	sub.w	r4, r5, #8
 800964c:	444c      	add	r4, r9
 800964e:	1b2d      	subs	r5, r5, r4
 8009650:	1963      	adds	r3, r4, r5
 8009652:	42bb      	cmp	r3, r7
 8009654:	db04      	blt.n	8009660 <__s2b+0x78>
 8009656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965a:	340a      	adds	r4, #10
 800965c:	2509      	movs	r5, #9
 800965e:	e7f6      	b.n	800964e <__s2b+0x66>
 8009660:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009664:	4601      	mov	r1, r0
 8009666:	3b30      	subs	r3, #48	; 0x30
 8009668:	220a      	movs	r2, #10
 800966a:	4630      	mov	r0, r6
 800966c:	f7ff ff72 	bl	8009554 <__multadd>
 8009670:	e7ee      	b.n	8009650 <__s2b+0x68>
 8009672:	bf00      	nop
 8009674:	0800b09c 	.word	0x0800b09c
 8009678:	0800b12c 	.word	0x0800b12c

0800967c <__hi0bits>:
 800967c:	0c03      	lsrs	r3, r0, #16
 800967e:	041b      	lsls	r3, r3, #16
 8009680:	b9d3      	cbnz	r3, 80096b8 <__hi0bits+0x3c>
 8009682:	0400      	lsls	r0, r0, #16
 8009684:	2310      	movs	r3, #16
 8009686:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800968a:	bf04      	itt	eq
 800968c:	0200      	lsleq	r0, r0, #8
 800968e:	3308      	addeq	r3, #8
 8009690:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009694:	bf04      	itt	eq
 8009696:	0100      	lsleq	r0, r0, #4
 8009698:	3304      	addeq	r3, #4
 800969a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800969e:	bf04      	itt	eq
 80096a0:	0080      	lsleq	r0, r0, #2
 80096a2:	3302      	addeq	r3, #2
 80096a4:	2800      	cmp	r0, #0
 80096a6:	db05      	blt.n	80096b4 <__hi0bits+0x38>
 80096a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80096ac:	f103 0301 	add.w	r3, r3, #1
 80096b0:	bf08      	it	eq
 80096b2:	2320      	moveq	r3, #32
 80096b4:	4618      	mov	r0, r3
 80096b6:	4770      	bx	lr
 80096b8:	2300      	movs	r3, #0
 80096ba:	e7e4      	b.n	8009686 <__hi0bits+0xa>

080096bc <__lo0bits>:
 80096bc:	6803      	ldr	r3, [r0, #0]
 80096be:	f013 0207 	ands.w	r2, r3, #7
 80096c2:	4601      	mov	r1, r0
 80096c4:	d00b      	beq.n	80096de <__lo0bits+0x22>
 80096c6:	07da      	lsls	r2, r3, #31
 80096c8:	d424      	bmi.n	8009714 <__lo0bits+0x58>
 80096ca:	0798      	lsls	r0, r3, #30
 80096cc:	bf49      	itett	mi
 80096ce:	085b      	lsrmi	r3, r3, #1
 80096d0:	089b      	lsrpl	r3, r3, #2
 80096d2:	2001      	movmi	r0, #1
 80096d4:	600b      	strmi	r3, [r1, #0]
 80096d6:	bf5c      	itt	pl
 80096d8:	600b      	strpl	r3, [r1, #0]
 80096da:	2002      	movpl	r0, #2
 80096dc:	4770      	bx	lr
 80096de:	b298      	uxth	r0, r3
 80096e0:	b9b0      	cbnz	r0, 8009710 <__lo0bits+0x54>
 80096e2:	0c1b      	lsrs	r3, r3, #16
 80096e4:	2010      	movs	r0, #16
 80096e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096ea:	bf04      	itt	eq
 80096ec:	0a1b      	lsreq	r3, r3, #8
 80096ee:	3008      	addeq	r0, #8
 80096f0:	071a      	lsls	r2, r3, #28
 80096f2:	bf04      	itt	eq
 80096f4:	091b      	lsreq	r3, r3, #4
 80096f6:	3004      	addeq	r0, #4
 80096f8:	079a      	lsls	r2, r3, #30
 80096fa:	bf04      	itt	eq
 80096fc:	089b      	lsreq	r3, r3, #2
 80096fe:	3002      	addeq	r0, #2
 8009700:	07da      	lsls	r2, r3, #31
 8009702:	d403      	bmi.n	800970c <__lo0bits+0x50>
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	f100 0001 	add.w	r0, r0, #1
 800970a:	d005      	beq.n	8009718 <__lo0bits+0x5c>
 800970c:	600b      	str	r3, [r1, #0]
 800970e:	4770      	bx	lr
 8009710:	4610      	mov	r0, r2
 8009712:	e7e8      	b.n	80096e6 <__lo0bits+0x2a>
 8009714:	2000      	movs	r0, #0
 8009716:	4770      	bx	lr
 8009718:	2020      	movs	r0, #32
 800971a:	4770      	bx	lr

0800971c <__i2b>:
 800971c:	b510      	push	{r4, lr}
 800971e:	460c      	mov	r4, r1
 8009720:	2101      	movs	r1, #1
 8009722:	f7ff feb5 	bl	8009490 <_Balloc>
 8009726:	4602      	mov	r2, r0
 8009728:	b928      	cbnz	r0, 8009736 <__i2b+0x1a>
 800972a:	4b05      	ldr	r3, [pc, #20]	; (8009740 <__i2b+0x24>)
 800972c:	4805      	ldr	r0, [pc, #20]	; (8009744 <__i2b+0x28>)
 800972e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009732:	f000 fdad 	bl	800a290 <__assert_func>
 8009736:	2301      	movs	r3, #1
 8009738:	6144      	str	r4, [r0, #20]
 800973a:	6103      	str	r3, [r0, #16]
 800973c:	bd10      	pop	{r4, pc}
 800973e:	bf00      	nop
 8009740:	0800b09c 	.word	0x0800b09c
 8009744:	0800b12c 	.word	0x0800b12c

08009748 <__multiply>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	4614      	mov	r4, r2
 800974e:	690a      	ldr	r2, [r1, #16]
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	429a      	cmp	r2, r3
 8009754:	bfb8      	it	lt
 8009756:	460b      	movlt	r3, r1
 8009758:	460d      	mov	r5, r1
 800975a:	bfbc      	itt	lt
 800975c:	4625      	movlt	r5, r4
 800975e:	461c      	movlt	r4, r3
 8009760:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009764:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009768:	68ab      	ldr	r3, [r5, #8]
 800976a:	6869      	ldr	r1, [r5, #4]
 800976c:	eb0a 0709 	add.w	r7, sl, r9
 8009770:	42bb      	cmp	r3, r7
 8009772:	b085      	sub	sp, #20
 8009774:	bfb8      	it	lt
 8009776:	3101      	addlt	r1, #1
 8009778:	f7ff fe8a 	bl	8009490 <_Balloc>
 800977c:	b930      	cbnz	r0, 800978c <__multiply+0x44>
 800977e:	4602      	mov	r2, r0
 8009780:	4b42      	ldr	r3, [pc, #264]	; (800988c <__multiply+0x144>)
 8009782:	4843      	ldr	r0, [pc, #268]	; (8009890 <__multiply+0x148>)
 8009784:	f240 115d 	movw	r1, #349	; 0x15d
 8009788:	f000 fd82 	bl	800a290 <__assert_func>
 800978c:	f100 0614 	add.w	r6, r0, #20
 8009790:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009794:	4633      	mov	r3, r6
 8009796:	2200      	movs	r2, #0
 8009798:	4543      	cmp	r3, r8
 800979a:	d31e      	bcc.n	80097da <__multiply+0x92>
 800979c:	f105 0c14 	add.w	ip, r5, #20
 80097a0:	f104 0314 	add.w	r3, r4, #20
 80097a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80097a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80097ac:	9202      	str	r2, [sp, #8]
 80097ae:	ebac 0205 	sub.w	r2, ip, r5
 80097b2:	3a15      	subs	r2, #21
 80097b4:	f022 0203 	bic.w	r2, r2, #3
 80097b8:	3204      	adds	r2, #4
 80097ba:	f105 0115 	add.w	r1, r5, #21
 80097be:	458c      	cmp	ip, r1
 80097c0:	bf38      	it	cc
 80097c2:	2204      	movcc	r2, #4
 80097c4:	9201      	str	r2, [sp, #4]
 80097c6:	9a02      	ldr	r2, [sp, #8]
 80097c8:	9303      	str	r3, [sp, #12]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d808      	bhi.n	80097e0 <__multiply+0x98>
 80097ce:	2f00      	cmp	r7, #0
 80097d0:	dc55      	bgt.n	800987e <__multiply+0x136>
 80097d2:	6107      	str	r7, [r0, #16]
 80097d4:	b005      	add	sp, #20
 80097d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097da:	f843 2b04 	str.w	r2, [r3], #4
 80097de:	e7db      	b.n	8009798 <__multiply+0x50>
 80097e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80097e4:	f1ba 0f00 	cmp.w	sl, #0
 80097e8:	d020      	beq.n	800982c <__multiply+0xe4>
 80097ea:	f105 0e14 	add.w	lr, r5, #20
 80097ee:	46b1      	mov	r9, r6
 80097f0:	2200      	movs	r2, #0
 80097f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80097f6:	f8d9 b000 	ldr.w	fp, [r9]
 80097fa:	b2a1      	uxth	r1, r4
 80097fc:	fa1f fb8b 	uxth.w	fp, fp
 8009800:	fb0a b101 	mla	r1, sl, r1, fp
 8009804:	4411      	add	r1, r2
 8009806:	f8d9 2000 	ldr.w	r2, [r9]
 800980a:	0c24      	lsrs	r4, r4, #16
 800980c:	0c12      	lsrs	r2, r2, #16
 800980e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009812:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009816:	b289      	uxth	r1, r1
 8009818:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800981c:	45f4      	cmp	ip, lr
 800981e:	f849 1b04 	str.w	r1, [r9], #4
 8009822:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009826:	d8e4      	bhi.n	80097f2 <__multiply+0xaa>
 8009828:	9901      	ldr	r1, [sp, #4]
 800982a:	5072      	str	r2, [r6, r1]
 800982c:	9a03      	ldr	r2, [sp, #12]
 800982e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009832:	3304      	adds	r3, #4
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	d01f      	beq.n	800987a <__multiply+0x132>
 800983a:	6834      	ldr	r4, [r6, #0]
 800983c:	f105 0114 	add.w	r1, r5, #20
 8009840:	46b6      	mov	lr, r6
 8009842:	f04f 0a00 	mov.w	sl, #0
 8009846:	880a      	ldrh	r2, [r1, #0]
 8009848:	f8be b002 	ldrh.w	fp, [lr, #2]
 800984c:	fb09 b202 	mla	r2, r9, r2, fp
 8009850:	4492      	add	sl, r2
 8009852:	b2a4      	uxth	r4, r4
 8009854:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009858:	f84e 4b04 	str.w	r4, [lr], #4
 800985c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009860:	f8be 2000 	ldrh.w	r2, [lr]
 8009864:	0c24      	lsrs	r4, r4, #16
 8009866:	fb09 2404 	mla	r4, r9, r4, r2
 800986a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800986e:	458c      	cmp	ip, r1
 8009870:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009874:	d8e7      	bhi.n	8009846 <__multiply+0xfe>
 8009876:	9a01      	ldr	r2, [sp, #4]
 8009878:	50b4      	str	r4, [r6, r2]
 800987a:	3604      	adds	r6, #4
 800987c:	e7a3      	b.n	80097c6 <__multiply+0x7e>
 800987e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1a5      	bne.n	80097d2 <__multiply+0x8a>
 8009886:	3f01      	subs	r7, #1
 8009888:	e7a1      	b.n	80097ce <__multiply+0x86>
 800988a:	bf00      	nop
 800988c:	0800b09c 	.word	0x0800b09c
 8009890:	0800b12c 	.word	0x0800b12c

08009894 <__pow5mult>:
 8009894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009898:	4615      	mov	r5, r2
 800989a:	f012 0203 	ands.w	r2, r2, #3
 800989e:	4606      	mov	r6, r0
 80098a0:	460f      	mov	r7, r1
 80098a2:	d007      	beq.n	80098b4 <__pow5mult+0x20>
 80098a4:	4c25      	ldr	r4, [pc, #148]	; (800993c <__pow5mult+0xa8>)
 80098a6:	3a01      	subs	r2, #1
 80098a8:	2300      	movs	r3, #0
 80098aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098ae:	f7ff fe51 	bl	8009554 <__multadd>
 80098b2:	4607      	mov	r7, r0
 80098b4:	10ad      	asrs	r5, r5, #2
 80098b6:	d03d      	beq.n	8009934 <__pow5mult+0xa0>
 80098b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098ba:	b97c      	cbnz	r4, 80098dc <__pow5mult+0x48>
 80098bc:	2010      	movs	r0, #16
 80098be:	f7ff fdbf 	bl	8009440 <malloc>
 80098c2:	4602      	mov	r2, r0
 80098c4:	6270      	str	r0, [r6, #36]	; 0x24
 80098c6:	b928      	cbnz	r0, 80098d4 <__pow5mult+0x40>
 80098c8:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <__pow5mult+0xac>)
 80098ca:	481e      	ldr	r0, [pc, #120]	; (8009944 <__pow5mult+0xb0>)
 80098cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80098d0:	f000 fcde 	bl	800a290 <__assert_func>
 80098d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098d8:	6004      	str	r4, [r0, #0]
 80098da:	60c4      	str	r4, [r0, #12]
 80098dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098e4:	b94c      	cbnz	r4, 80098fa <__pow5mult+0x66>
 80098e6:	f240 2171 	movw	r1, #625	; 0x271
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7ff ff16 	bl	800971c <__i2b>
 80098f0:	2300      	movs	r3, #0
 80098f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098f6:	4604      	mov	r4, r0
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	f04f 0900 	mov.w	r9, #0
 80098fe:	07eb      	lsls	r3, r5, #31
 8009900:	d50a      	bpl.n	8009918 <__pow5mult+0x84>
 8009902:	4639      	mov	r1, r7
 8009904:	4622      	mov	r2, r4
 8009906:	4630      	mov	r0, r6
 8009908:	f7ff ff1e 	bl	8009748 <__multiply>
 800990c:	4639      	mov	r1, r7
 800990e:	4680      	mov	r8, r0
 8009910:	4630      	mov	r0, r6
 8009912:	f7ff fdfd 	bl	8009510 <_Bfree>
 8009916:	4647      	mov	r7, r8
 8009918:	106d      	asrs	r5, r5, #1
 800991a:	d00b      	beq.n	8009934 <__pow5mult+0xa0>
 800991c:	6820      	ldr	r0, [r4, #0]
 800991e:	b938      	cbnz	r0, 8009930 <__pow5mult+0x9c>
 8009920:	4622      	mov	r2, r4
 8009922:	4621      	mov	r1, r4
 8009924:	4630      	mov	r0, r6
 8009926:	f7ff ff0f 	bl	8009748 <__multiply>
 800992a:	6020      	str	r0, [r4, #0]
 800992c:	f8c0 9000 	str.w	r9, [r0]
 8009930:	4604      	mov	r4, r0
 8009932:	e7e4      	b.n	80098fe <__pow5mult+0x6a>
 8009934:	4638      	mov	r0, r7
 8009936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993a:	bf00      	nop
 800993c:	0800b280 	.word	0x0800b280
 8009940:	0800b026 	.word	0x0800b026
 8009944:	0800b12c 	.word	0x0800b12c

08009948 <__lshift>:
 8009948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800994c:	460c      	mov	r4, r1
 800994e:	6849      	ldr	r1, [r1, #4]
 8009950:	6923      	ldr	r3, [r4, #16]
 8009952:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	4607      	mov	r7, r0
 800995a:	4691      	mov	r9, r2
 800995c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009960:	f108 0601 	add.w	r6, r8, #1
 8009964:	42b3      	cmp	r3, r6
 8009966:	db0b      	blt.n	8009980 <__lshift+0x38>
 8009968:	4638      	mov	r0, r7
 800996a:	f7ff fd91 	bl	8009490 <_Balloc>
 800996e:	4605      	mov	r5, r0
 8009970:	b948      	cbnz	r0, 8009986 <__lshift+0x3e>
 8009972:	4602      	mov	r2, r0
 8009974:	4b28      	ldr	r3, [pc, #160]	; (8009a18 <__lshift+0xd0>)
 8009976:	4829      	ldr	r0, [pc, #164]	; (8009a1c <__lshift+0xd4>)
 8009978:	f240 11d9 	movw	r1, #473	; 0x1d9
 800997c:	f000 fc88 	bl	800a290 <__assert_func>
 8009980:	3101      	adds	r1, #1
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	e7ee      	b.n	8009964 <__lshift+0x1c>
 8009986:	2300      	movs	r3, #0
 8009988:	f100 0114 	add.w	r1, r0, #20
 800998c:	f100 0210 	add.w	r2, r0, #16
 8009990:	4618      	mov	r0, r3
 8009992:	4553      	cmp	r3, sl
 8009994:	db33      	blt.n	80099fe <__lshift+0xb6>
 8009996:	6920      	ldr	r0, [r4, #16]
 8009998:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800999c:	f104 0314 	add.w	r3, r4, #20
 80099a0:	f019 091f 	ands.w	r9, r9, #31
 80099a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099ac:	d02b      	beq.n	8009a06 <__lshift+0xbe>
 80099ae:	f1c9 0e20 	rsb	lr, r9, #32
 80099b2:	468a      	mov	sl, r1
 80099b4:	2200      	movs	r2, #0
 80099b6:	6818      	ldr	r0, [r3, #0]
 80099b8:	fa00 f009 	lsl.w	r0, r0, r9
 80099bc:	4302      	orrs	r2, r0
 80099be:	f84a 2b04 	str.w	r2, [sl], #4
 80099c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c6:	459c      	cmp	ip, r3
 80099c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80099cc:	d8f3      	bhi.n	80099b6 <__lshift+0x6e>
 80099ce:	ebac 0304 	sub.w	r3, ip, r4
 80099d2:	3b15      	subs	r3, #21
 80099d4:	f023 0303 	bic.w	r3, r3, #3
 80099d8:	3304      	adds	r3, #4
 80099da:	f104 0015 	add.w	r0, r4, #21
 80099de:	4584      	cmp	ip, r0
 80099e0:	bf38      	it	cc
 80099e2:	2304      	movcc	r3, #4
 80099e4:	50ca      	str	r2, [r1, r3]
 80099e6:	b10a      	cbz	r2, 80099ec <__lshift+0xa4>
 80099e8:	f108 0602 	add.w	r6, r8, #2
 80099ec:	3e01      	subs	r6, #1
 80099ee:	4638      	mov	r0, r7
 80099f0:	612e      	str	r6, [r5, #16]
 80099f2:	4621      	mov	r1, r4
 80099f4:	f7ff fd8c 	bl	8009510 <_Bfree>
 80099f8:	4628      	mov	r0, r5
 80099fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a02:	3301      	adds	r3, #1
 8009a04:	e7c5      	b.n	8009992 <__lshift+0x4a>
 8009a06:	3904      	subs	r1, #4
 8009a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a10:	459c      	cmp	ip, r3
 8009a12:	d8f9      	bhi.n	8009a08 <__lshift+0xc0>
 8009a14:	e7ea      	b.n	80099ec <__lshift+0xa4>
 8009a16:	bf00      	nop
 8009a18:	0800b09c 	.word	0x0800b09c
 8009a1c:	0800b12c 	.word	0x0800b12c

08009a20 <__mcmp>:
 8009a20:	b530      	push	{r4, r5, lr}
 8009a22:	6902      	ldr	r2, [r0, #16]
 8009a24:	690c      	ldr	r4, [r1, #16]
 8009a26:	1b12      	subs	r2, r2, r4
 8009a28:	d10e      	bne.n	8009a48 <__mcmp+0x28>
 8009a2a:	f100 0314 	add.w	r3, r0, #20
 8009a2e:	3114      	adds	r1, #20
 8009a30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a40:	42a5      	cmp	r5, r4
 8009a42:	d003      	beq.n	8009a4c <__mcmp+0x2c>
 8009a44:	d305      	bcc.n	8009a52 <__mcmp+0x32>
 8009a46:	2201      	movs	r2, #1
 8009a48:	4610      	mov	r0, r2
 8009a4a:	bd30      	pop	{r4, r5, pc}
 8009a4c:	4283      	cmp	r3, r0
 8009a4e:	d3f3      	bcc.n	8009a38 <__mcmp+0x18>
 8009a50:	e7fa      	b.n	8009a48 <__mcmp+0x28>
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	e7f7      	b.n	8009a48 <__mcmp+0x28>

08009a58 <__mdiff>:
 8009a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	4606      	mov	r6, r0
 8009a60:	4611      	mov	r1, r2
 8009a62:	4620      	mov	r0, r4
 8009a64:	4617      	mov	r7, r2
 8009a66:	f7ff ffdb 	bl	8009a20 <__mcmp>
 8009a6a:	1e05      	subs	r5, r0, #0
 8009a6c:	d110      	bne.n	8009a90 <__mdiff+0x38>
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7ff fd0d 	bl	8009490 <_Balloc>
 8009a76:	b930      	cbnz	r0, 8009a86 <__mdiff+0x2e>
 8009a78:	4b39      	ldr	r3, [pc, #228]	; (8009b60 <__mdiff+0x108>)
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	f240 2132 	movw	r1, #562	; 0x232
 8009a80:	4838      	ldr	r0, [pc, #224]	; (8009b64 <__mdiff+0x10c>)
 8009a82:	f000 fc05 	bl	800a290 <__assert_func>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	bfa4      	itt	ge
 8009a92:	463b      	movge	r3, r7
 8009a94:	4627      	movge	r7, r4
 8009a96:	4630      	mov	r0, r6
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	bfa6      	itte	ge
 8009a9c:	461c      	movge	r4, r3
 8009a9e:	2500      	movge	r5, #0
 8009aa0:	2501      	movlt	r5, #1
 8009aa2:	f7ff fcf5 	bl	8009490 <_Balloc>
 8009aa6:	b920      	cbnz	r0, 8009ab2 <__mdiff+0x5a>
 8009aa8:	4b2d      	ldr	r3, [pc, #180]	; (8009b60 <__mdiff+0x108>)
 8009aaa:	4602      	mov	r2, r0
 8009aac:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ab0:	e7e6      	b.n	8009a80 <__mdiff+0x28>
 8009ab2:	693e      	ldr	r6, [r7, #16]
 8009ab4:	60c5      	str	r5, [r0, #12]
 8009ab6:	6925      	ldr	r5, [r4, #16]
 8009ab8:	f107 0114 	add.w	r1, r7, #20
 8009abc:	f104 0914 	add.w	r9, r4, #20
 8009ac0:	f100 0e14 	add.w	lr, r0, #20
 8009ac4:	f107 0210 	add.w	r2, r7, #16
 8009ac8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009acc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009ad0:	46f2      	mov	sl, lr
 8009ad2:	2700      	movs	r7, #0
 8009ad4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ad8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009adc:	fa1f f883 	uxth.w	r8, r3
 8009ae0:	fa17 f78b 	uxtah	r7, r7, fp
 8009ae4:	0c1b      	lsrs	r3, r3, #16
 8009ae6:	eba7 0808 	sub.w	r8, r7, r8
 8009aea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009aee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009af2:	fa1f f888 	uxth.w	r8, r8
 8009af6:	141f      	asrs	r7, r3, #16
 8009af8:	454d      	cmp	r5, r9
 8009afa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009afe:	f84a 3b04 	str.w	r3, [sl], #4
 8009b02:	d8e7      	bhi.n	8009ad4 <__mdiff+0x7c>
 8009b04:	1b2b      	subs	r3, r5, r4
 8009b06:	3b15      	subs	r3, #21
 8009b08:	f023 0303 	bic.w	r3, r3, #3
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	3415      	adds	r4, #21
 8009b10:	42a5      	cmp	r5, r4
 8009b12:	bf38      	it	cc
 8009b14:	2304      	movcc	r3, #4
 8009b16:	4419      	add	r1, r3
 8009b18:	4473      	add	r3, lr
 8009b1a:	469e      	mov	lr, r3
 8009b1c:	460d      	mov	r5, r1
 8009b1e:	4565      	cmp	r5, ip
 8009b20:	d30e      	bcc.n	8009b40 <__mdiff+0xe8>
 8009b22:	f10c 0203 	add.w	r2, ip, #3
 8009b26:	1a52      	subs	r2, r2, r1
 8009b28:	f022 0203 	bic.w	r2, r2, #3
 8009b2c:	3903      	subs	r1, #3
 8009b2e:	458c      	cmp	ip, r1
 8009b30:	bf38      	it	cc
 8009b32:	2200      	movcc	r2, #0
 8009b34:	441a      	add	r2, r3
 8009b36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b3a:	b17b      	cbz	r3, 8009b5c <__mdiff+0x104>
 8009b3c:	6106      	str	r6, [r0, #16]
 8009b3e:	e7a5      	b.n	8009a8c <__mdiff+0x34>
 8009b40:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b44:	fa17 f488 	uxtah	r4, r7, r8
 8009b48:	1422      	asrs	r2, r4, #16
 8009b4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009b4e:	b2a4      	uxth	r4, r4
 8009b50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009b54:	f84e 4b04 	str.w	r4, [lr], #4
 8009b58:	1417      	asrs	r7, r2, #16
 8009b5a:	e7e0      	b.n	8009b1e <__mdiff+0xc6>
 8009b5c:	3e01      	subs	r6, #1
 8009b5e:	e7ea      	b.n	8009b36 <__mdiff+0xde>
 8009b60:	0800b09c 	.word	0x0800b09c
 8009b64:	0800b12c 	.word	0x0800b12c

08009b68 <__ulp>:
 8009b68:	b082      	sub	sp, #8
 8009b6a:	ed8d 0b00 	vstr	d0, [sp]
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	4912      	ldr	r1, [pc, #72]	; (8009bbc <__ulp+0x54>)
 8009b72:	4019      	ands	r1, r3
 8009b74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	dd05      	ble.n	8009b88 <__ulp+0x20>
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	ec43 2b10 	vmov	d0, r2, r3
 8009b84:	b002      	add	sp, #8
 8009b86:	4770      	bx	lr
 8009b88:	4249      	negs	r1, r1
 8009b8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b92:	f04f 0200 	mov.w	r2, #0
 8009b96:	f04f 0300 	mov.w	r3, #0
 8009b9a:	da04      	bge.n	8009ba6 <__ulp+0x3e>
 8009b9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ba0:	fa41 f300 	asr.w	r3, r1, r0
 8009ba4:	e7ec      	b.n	8009b80 <__ulp+0x18>
 8009ba6:	f1a0 0114 	sub.w	r1, r0, #20
 8009baa:	291e      	cmp	r1, #30
 8009bac:	bfda      	itte	le
 8009bae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009bb2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009bb6:	2101      	movgt	r1, #1
 8009bb8:	460a      	mov	r2, r1
 8009bba:	e7e1      	b.n	8009b80 <__ulp+0x18>
 8009bbc:	7ff00000 	.word	0x7ff00000

08009bc0 <__b2d>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	6905      	ldr	r5, [r0, #16]
 8009bc4:	f100 0714 	add.w	r7, r0, #20
 8009bc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009bcc:	1f2e      	subs	r6, r5, #4
 8009bce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f7ff fd52 	bl	800967c <__hi0bits>
 8009bd8:	f1c0 0320 	rsb	r3, r0, #32
 8009bdc:	280a      	cmp	r0, #10
 8009bde:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009c5c <__b2d+0x9c>
 8009be2:	600b      	str	r3, [r1, #0]
 8009be4:	dc14      	bgt.n	8009c10 <__b2d+0x50>
 8009be6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009bea:	fa24 f10e 	lsr.w	r1, r4, lr
 8009bee:	42b7      	cmp	r7, r6
 8009bf0:	ea41 030c 	orr.w	r3, r1, ip
 8009bf4:	bf34      	ite	cc
 8009bf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009bfa:	2100      	movcs	r1, #0
 8009bfc:	3015      	adds	r0, #21
 8009bfe:	fa04 f000 	lsl.w	r0, r4, r0
 8009c02:	fa21 f10e 	lsr.w	r1, r1, lr
 8009c06:	ea40 0201 	orr.w	r2, r0, r1
 8009c0a:	ec43 2b10 	vmov	d0, r2, r3
 8009c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c10:	42b7      	cmp	r7, r6
 8009c12:	bf3a      	itte	cc
 8009c14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009c18:	f1a5 0608 	subcc.w	r6, r5, #8
 8009c1c:	2100      	movcs	r1, #0
 8009c1e:	380b      	subs	r0, #11
 8009c20:	d017      	beq.n	8009c52 <__b2d+0x92>
 8009c22:	f1c0 0c20 	rsb	ip, r0, #32
 8009c26:	fa04 f500 	lsl.w	r5, r4, r0
 8009c2a:	42be      	cmp	r6, r7
 8009c2c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009c30:	ea45 0504 	orr.w	r5, r5, r4
 8009c34:	bf8c      	ite	hi
 8009c36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009c3a:	2400      	movls	r4, #0
 8009c3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009c40:	fa01 f000 	lsl.w	r0, r1, r0
 8009c44:	fa24 f40c 	lsr.w	r4, r4, ip
 8009c48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009c4c:	ea40 0204 	orr.w	r2, r0, r4
 8009c50:	e7db      	b.n	8009c0a <__b2d+0x4a>
 8009c52:	ea44 030c 	orr.w	r3, r4, ip
 8009c56:	460a      	mov	r2, r1
 8009c58:	e7d7      	b.n	8009c0a <__b2d+0x4a>
 8009c5a:	bf00      	nop
 8009c5c:	3ff00000 	.word	0x3ff00000

08009c60 <__d2b>:
 8009c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	4689      	mov	r9, r1
 8009c66:	2101      	movs	r1, #1
 8009c68:	ec57 6b10 	vmov	r6, r7, d0
 8009c6c:	4690      	mov	r8, r2
 8009c6e:	f7ff fc0f 	bl	8009490 <_Balloc>
 8009c72:	4604      	mov	r4, r0
 8009c74:	b930      	cbnz	r0, 8009c84 <__d2b+0x24>
 8009c76:	4602      	mov	r2, r0
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <__d2b+0xb0>)
 8009c7a:	4826      	ldr	r0, [pc, #152]	; (8009d14 <__d2b+0xb4>)
 8009c7c:	f240 310a 	movw	r1, #778	; 0x30a
 8009c80:	f000 fb06 	bl	800a290 <__assert_func>
 8009c84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c8c:	bb35      	cbnz	r5, 8009cdc <__d2b+0x7c>
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	d028      	beq.n	8009ce6 <__d2b+0x86>
 8009c94:	4668      	mov	r0, sp
 8009c96:	9600      	str	r6, [sp, #0]
 8009c98:	f7ff fd10 	bl	80096bc <__lo0bits>
 8009c9c:	9900      	ldr	r1, [sp, #0]
 8009c9e:	b300      	cbz	r0, 8009ce2 <__d2b+0x82>
 8009ca0:	9a01      	ldr	r2, [sp, #4]
 8009ca2:	f1c0 0320 	rsb	r3, r0, #32
 8009ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8009caa:	430b      	orrs	r3, r1
 8009cac:	40c2      	lsrs	r2, r0
 8009cae:	6163      	str	r3, [r4, #20]
 8009cb0:	9201      	str	r2, [sp, #4]
 8009cb2:	9b01      	ldr	r3, [sp, #4]
 8009cb4:	61a3      	str	r3, [r4, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	bf14      	ite	ne
 8009cba:	2202      	movne	r2, #2
 8009cbc:	2201      	moveq	r2, #1
 8009cbe:	6122      	str	r2, [r4, #16]
 8009cc0:	b1d5      	cbz	r5, 8009cf8 <__d2b+0x98>
 8009cc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cc6:	4405      	add	r5, r0
 8009cc8:	f8c9 5000 	str.w	r5, [r9]
 8009ccc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cd0:	f8c8 0000 	str.w	r0, [r8]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	b003      	add	sp, #12
 8009cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ce0:	e7d5      	b.n	8009c8e <__d2b+0x2e>
 8009ce2:	6161      	str	r1, [r4, #20]
 8009ce4:	e7e5      	b.n	8009cb2 <__d2b+0x52>
 8009ce6:	a801      	add	r0, sp, #4
 8009ce8:	f7ff fce8 	bl	80096bc <__lo0bits>
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	6163      	str	r3, [r4, #20]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	6122      	str	r2, [r4, #16]
 8009cf4:	3020      	adds	r0, #32
 8009cf6:	e7e3      	b.n	8009cc0 <__d2b+0x60>
 8009cf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d00:	f8c9 0000 	str.w	r0, [r9]
 8009d04:	6918      	ldr	r0, [r3, #16]
 8009d06:	f7ff fcb9 	bl	800967c <__hi0bits>
 8009d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d0e:	e7df      	b.n	8009cd0 <__d2b+0x70>
 8009d10:	0800b09c 	.word	0x0800b09c
 8009d14:	0800b12c 	.word	0x0800b12c

08009d18 <__ratio>:
 8009d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	4688      	mov	r8, r1
 8009d1e:	4669      	mov	r1, sp
 8009d20:	4681      	mov	r9, r0
 8009d22:	f7ff ff4d 	bl	8009bc0 <__b2d>
 8009d26:	a901      	add	r1, sp, #4
 8009d28:	4640      	mov	r0, r8
 8009d2a:	ec55 4b10 	vmov	r4, r5, d0
 8009d2e:	f7ff ff47 	bl	8009bc0 <__b2d>
 8009d32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d3a:	eba3 0c02 	sub.w	ip, r3, r2
 8009d3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d42:	1a9b      	subs	r3, r3, r2
 8009d44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d48:	ec51 0b10 	vmov	r0, r1, d0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bfd6      	itet	le
 8009d50:	460a      	movle	r2, r1
 8009d52:	462a      	movgt	r2, r5
 8009d54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d58:	468b      	mov	fp, r1
 8009d5a:	462f      	mov	r7, r5
 8009d5c:	bfd4      	ite	le
 8009d5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d66:	4620      	mov	r0, r4
 8009d68:	ee10 2a10 	vmov	r2, s0
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f7f6 fd8c 	bl	800088c <__aeabi_ddiv>
 8009d74:	ec41 0b10 	vmov	d0, r0, r1
 8009d78:	b003      	add	sp, #12
 8009d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d7e <__copybits>:
 8009d7e:	3901      	subs	r1, #1
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	1149      	asrs	r1, r1, #5
 8009d84:	6914      	ldr	r4, [r2, #16]
 8009d86:	3101      	adds	r1, #1
 8009d88:	f102 0314 	add.w	r3, r2, #20
 8009d8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d94:	1f05      	subs	r5, r0, #4
 8009d96:	42a3      	cmp	r3, r4
 8009d98:	d30c      	bcc.n	8009db4 <__copybits+0x36>
 8009d9a:	1aa3      	subs	r3, r4, r2
 8009d9c:	3b11      	subs	r3, #17
 8009d9e:	f023 0303 	bic.w	r3, r3, #3
 8009da2:	3211      	adds	r2, #17
 8009da4:	42a2      	cmp	r2, r4
 8009da6:	bf88      	it	hi
 8009da8:	2300      	movhi	r3, #0
 8009daa:	4418      	add	r0, r3
 8009dac:	2300      	movs	r3, #0
 8009dae:	4288      	cmp	r0, r1
 8009db0:	d305      	bcc.n	8009dbe <__copybits+0x40>
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009db8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dbc:	e7eb      	b.n	8009d96 <__copybits+0x18>
 8009dbe:	f840 3b04 	str.w	r3, [r0], #4
 8009dc2:	e7f4      	b.n	8009dae <__copybits+0x30>

08009dc4 <__any_on>:
 8009dc4:	f100 0214 	add.w	r2, r0, #20
 8009dc8:	6900      	ldr	r0, [r0, #16]
 8009dca:	114b      	asrs	r3, r1, #5
 8009dcc:	4298      	cmp	r0, r3
 8009dce:	b510      	push	{r4, lr}
 8009dd0:	db11      	blt.n	8009df6 <__any_on+0x32>
 8009dd2:	dd0a      	ble.n	8009dea <__any_on+0x26>
 8009dd4:	f011 011f 	ands.w	r1, r1, #31
 8009dd8:	d007      	beq.n	8009dea <__any_on+0x26>
 8009dda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009dde:	fa24 f001 	lsr.w	r0, r4, r1
 8009de2:	fa00 f101 	lsl.w	r1, r0, r1
 8009de6:	428c      	cmp	r4, r1
 8009de8:	d10b      	bne.n	8009e02 <__any_on+0x3e>
 8009dea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d803      	bhi.n	8009dfa <__any_on+0x36>
 8009df2:	2000      	movs	r0, #0
 8009df4:	bd10      	pop	{r4, pc}
 8009df6:	4603      	mov	r3, r0
 8009df8:	e7f7      	b.n	8009dea <__any_on+0x26>
 8009dfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dfe:	2900      	cmp	r1, #0
 8009e00:	d0f5      	beq.n	8009dee <__any_on+0x2a>
 8009e02:	2001      	movs	r0, #1
 8009e04:	e7f6      	b.n	8009df4 <__any_on+0x30>

08009e06 <_calloc_r>:
 8009e06:	b513      	push	{r0, r1, r4, lr}
 8009e08:	434a      	muls	r2, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	9201      	str	r2, [sp, #4]
 8009e0e:	f000 f859 	bl	8009ec4 <_malloc_r>
 8009e12:	4604      	mov	r4, r0
 8009e14:	b118      	cbz	r0, 8009e1e <_calloc_r+0x18>
 8009e16:	9a01      	ldr	r2, [sp, #4]
 8009e18:	2100      	movs	r1, #0
 8009e1a:	f7fc fbcf 	bl	80065bc <memset>
 8009e1e:	4620      	mov	r0, r4
 8009e20:	b002      	add	sp, #8
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <_free_r>:
 8009e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e26:	2900      	cmp	r1, #0
 8009e28:	d048      	beq.n	8009ebc <_free_r+0x98>
 8009e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2e:	9001      	str	r0, [sp, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f1a1 0404 	sub.w	r4, r1, #4
 8009e36:	bfb8      	it	lt
 8009e38:	18e4      	addlt	r4, r4, r3
 8009e3a:	f000 fa73 	bl	800a324 <__malloc_lock>
 8009e3e:	4a20      	ldr	r2, [pc, #128]	; (8009ec0 <_free_r+0x9c>)
 8009e40:	9801      	ldr	r0, [sp, #4]
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	4615      	mov	r5, r2
 8009e46:	b933      	cbnz	r3, 8009e56 <_free_r+0x32>
 8009e48:	6063      	str	r3, [r4, #4]
 8009e4a:	6014      	str	r4, [r2, #0]
 8009e4c:	b003      	add	sp, #12
 8009e4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e52:	f000 ba6d 	b.w	800a330 <__malloc_unlock>
 8009e56:	42a3      	cmp	r3, r4
 8009e58:	d90b      	bls.n	8009e72 <_free_r+0x4e>
 8009e5a:	6821      	ldr	r1, [r4, #0]
 8009e5c:	1862      	adds	r2, r4, r1
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	bf04      	itt	eq
 8009e62:	681a      	ldreq	r2, [r3, #0]
 8009e64:	685b      	ldreq	r3, [r3, #4]
 8009e66:	6063      	str	r3, [r4, #4]
 8009e68:	bf04      	itt	eq
 8009e6a:	1852      	addeq	r2, r2, r1
 8009e6c:	6022      	streq	r2, [r4, #0]
 8009e6e:	602c      	str	r4, [r5, #0]
 8009e70:	e7ec      	b.n	8009e4c <_free_r+0x28>
 8009e72:	461a      	mov	r2, r3
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	b10b      	cbz	r3, 8009e7c <_free_r+0x58>
 8009e78:	42a3      	cmp	r3, r4
 8009e7a:	d9fa      	bls.n	8009e72 <_free_r+0x4e>
 8009e7c:	6811      	ldr	r1, [r2, #0]
 8009e7e:	1855      	adds	r5, r2, r1
 8009e80:	42a5      	cmp	r5, r4
 8009e82:	d10b      	bne.n	8009e9c <_free_r+0x78>
 8009e84:	6824      	ldr	r4, [r4, #0]
 8009e86:	4421      	add	r1, r4
 8009e88:	1854      	adds	r4, r2, r1
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	6011      	str	r1, [r2, #0]
 8009e8e:	d1dd      	bne.n	8009e4c <_free_r+0x28>
 8009e90:	681c      	ldr	r4, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	6053      	str	r3, [r2, #4]
 8009e96:	4421      	add	r1, r4
 8009e98:	6011      	str	r1, [r2, #0]
 8009e9a:	e7d7      	b.n	8009e4c <_free_r+0x28>
 8009e9c:	d902      	bls.n	8009ea4 <_free_r+0x80>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	e7d3      	b.n	8009e4c <_free_r+0x28>
 8009ea4:	6825      	ldr	r5, [r4, #0]
 8009ea6:	1961      	adds	r1, r4, r5
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf04      	itt	eq
 8009eac:	6819      	ldreq	r1, [r3, #0]
 8009eae:	685b      	ldreq	r3, [r3, #4]
 8009eb0:	6063      	str	r3, [r4, #4]
 8009eb2:	bf04      	itt	eq
 8009eb4:	1949      	addeq	r1, r1, r5
 8009eb6:	6021      	streq	r1, [r4, #0]
 8009eb8:	6054      	str	r4, [r2, #4]
 8009eba:	e7c7      	b.n	8009e4c <_free_r+0x28>
 8009ebc:	b003      	add	sp, #12
 8009ebe:	bd30      	pop	{r4, r5, pc}
 8009ec0:	20000578 	.word	0x20000578

08009ec4 <_malloc_r>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	1ccd      	adds	r5, r1, #3
 8009ec8:	f025 0503 	bic.w	r5, r5, #3
 8009ecc:	3508      	adds	r5, #8
 8009ece:	2d0c      	cmp	r5, #12
 8009ed0:	bf38      	it	cc
 8009ed2:	250c      	movcc	r5, #12
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	db01      	blt.n	8009ede <_malloc_r+0x1a>
 8009eda:	42a9      	cmp	r1, r5
 8009edc:	d903      	bls.n	8009ee6 <_malloc_r+0x22>
 8009ede:	230c      	movs	r3, #12
 8009ee0:	6033      	str	r3, [r6, #0]
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee6:	f000 fa1d 	bl	800a324 <__malloc_lock>
 8009eea:	4921      	ldr	r1, [pc, #132]	; (8009f70 <_malloc_r+0xac>)
 8009eec:	680a      	ldr	r2, [r1, #0]
 8009eee:	4614      	mov	r4, r2
 8009ef0:	b99c      	cbnz	r4, 8009f1a <_malloc_r+0x56>
 8009ef2:	4f20      	ldr	r7, [pc, #128]	; (8009f74 <_malloc_r+0xb0>)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	b923      	cbnz	r3, 8009f02 <_malloc_r+0x3e>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4630      	mov	r0, r6
 8009efc:	f000 f998 	bl	800a230 <_sbrk_r>
 8009f00:	6038      	str	r0, [r7, #0]
 8009f02:	4629      	mov	r1, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 f993 	bl	800a230 <_sbrk_r>
 8009f0a:	1c43      	adds	r3, r0, #1
 8009f0c:	d123      	bne.n	8009f56 <_malloc_r+0x92>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	6033      	str	r3, [r6, #0]
 8009f12:	4630      	mov	r0, r6
 8009f14:	f000 fa0c 	bl	800a330 <__malloc_unlock>
 8009f18:	e7e3      	b.n	8009ee2 <_malloc_r+0x1e>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	1b5b      	subs	r3, r3, r5
 8009f1e:	d417      	bmi.n	8009f50 <_malloc_r+0x8c>
 8009f20:	2b0b      	cmp	r3, #11
 8009f22:	d903      	bls.n	8009f2c <_malloc_r+0x68>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	441c      	add	r4, r3
 8009f28:	6025      	str	r5, [r4, #0]
 8009f2a:	e004      	b.n	8009f36 <_malloc_r+0x72>
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	42a2      	cmp	r2, r4
 8009f30:	bf0c      	ite	eq
 8009f32:	600b      	streq	r3, [r1, #0]
 8009f34:	6053      	strne	r3, [r2, #4]
 8009f36:	4630      	mov	r0, r6
 8009f38:	f000 f9fa 	bl	800a330 <__malloc_unlock>
 8009f3c:	f104 000b 	add.w	r0, r4, #11
 8009f40:	1d23      	adds	r3, r4, #4
 8009f42:	f020 0007 	bic.w	r0, r0, #7
 8009f46:	1ac2      	subs	r2, r0, r3
 8009f48:	d0cc      	beq.n	8009ee4 <_malloc_r+0x20>
 8009f4a:	1a1b      	subs	r3, r3, r0
 8009f4c:	50a3      	str	r3, [r4, r2]
 8009f4e:	e7c9      	b.n	8009ee4 <_malloc_r+0x20>
 8009f50:	4622      	mov	r2, r4
 8009f52:	6864      	ldr	r4, [r4, #4]
 8009f54:	e7cc      	b.n	8009ef0 <_malloc_r+0x2c>
 8009f56:	1cc4      	adds	r4, r0, #3
 8009f58:	f024 0403 	bic.w	r4, r4, #3
 8009f5c:	42a0      	cmp	r0, r4
 8009f5e:	d0e3      	beq.n	8009f28 <_malloc_r+0x64>
 8009f60:	1a21      	subs	r1, r4, r0
 8009f62:	4630      	mov	r0, r6
 8009f64:	f000 f964 	bl	800a230 <_sbrk_r>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	d1dd      	bne.n	8009f28 <_malloc_r+0x64>
 8009f6c:	e7cf      	b.n	8009f0e <_malloc_r+0x4a>
 8009f6e:	bf00      	nop
 8009f70:	20000578 	.word	0x20000578
 8009f74:	2000057c 	.word	0x2000057c

08009f78 <__ssputs_r>:
 8009f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	688e      	ldr	r6, [r1, #8]
 8009f7e:	429e      	cmp	r6, r3
 8009f80:	4682      	mov	sl, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	4690      	mov	r8, r2
 8009f86:	461f      	mov	r7, r3
 8009f88:	d838      	bhi.n	8009ffc <__ssputs_r+0x84>
 8009f8a:	898a      	ldrh	r2, [r1, #12]
 8009f8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f90:	d032      	beq.n	8009ff8 <__ssputs_r+0x80>
 8009f92:	6825      	ldr	r5, [r4, #0]
 8009f94:	6909      	ldr	r1, [r1, #16]
 8009f96:	eba5 0901 	sub.w	r9, r5, r1
 8009f9a:	6965      	ldr	r5, [r4, #20]
 8009f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	444b      	add	r3, r9
 8009fa8:	106d      	asrs	r5, r5, #1
 8009faa:	429d      	cmp	r5, r3
 8009fac:	bf38      	it	cc
 8009fae:	461d      	movcc	r5, r3
 8009fb0:	0553      	lsls	r3, r2, #21
 8009fb2:	d531      	bpl.n	800a018 <__ssputs_r+0xa0>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7ff ff85 	bl	8009ec4 <_malloc_r>
 8009fba:	4606      	mov	r6, r0
 8009fbc:	b950      	cbnz	r0, 8009fd4 <__ssputs_r+0x5c>
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	f8ca 3000 	str.w	r3, [sl]
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd4:	6921      	ldr	r1, [r4, #16]
 8009fd6:	464a      	mov	r2, r9
 8009fd8:	f7ff fa4c 	bl	8009474 <memcpy>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	6126      	str	r6, [r4, #16]
 8009fea:	6165      	str	r5, [r4, #20]
 8009fec:	444e      	add	r6, r9
 8009fee:	eba5 0509 	sub.w	r5, r5, r9
 8009ff2:	6026      	str	r6, [r4, #0]
 8009ff4:	60a5      	str	r5, [r4, #8]
 8009ff6:	463e      	mov	r6, r7
 8009ff8:	42be      	cmp	r6, r7
 8009ffa:	d900      	bls.n	8009ffe <__ssputs_r+0x86>
 8009ffc:	463e      	mov	r6, r7
 8009ffe:	4632      	mov	r2, r6
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	4641      	mov	r1, r8
 800a004:	f000 f974 	bl	800a2f0 <memmove>
 800a008:	68a3      	ldr	r3, [r4, #8]
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	1b9b      	subs	r3, r3, r6
 800a00e:	4432      	add	r2, r6
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	6022      	str	r2, [r4, #0]
 800a014:	2000      	movs	r0, #0
 800a016:	e7db      	b.n	8009fd0 <__ssputs_r+0x58>
 800a018:	462a      	mov	r2, r5
 800a01a:	f000 f98f 	bl	800a33c <_realloc_r>
 800a01e:	4606      	mov	r6, r0
 800a020:	2800      	cmp	r0, #0
 800a022:	d1e1      	bne.n	8009fe8 <__ssputs_r+0x70>
 800a024:	6921      	ldr	r1, [r4, #16]
 800a026:	4650      	mov	r0, sl
 800a028:	f7ff fefc 	bl	8009e24 <_free_r>
 800a02c:	e7c7      	b.n	8009fbe <__ssputs_r+0x46>
	...

0800a030 <_svfiprintf_r>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	4698      	mov	r8, r3
 800a036:	898b      	ldrh	r3, [r1, #12]
 800a038:	061b      	lsls	r3, r3, #24
 800a03a:	b09d      	sub	sp, #116	; 0x74
 800a03c:	4607      	mov	r7, r0
 800a03e:	460d      	mov	r5, r1
 800a040:	4614      	mov	r4, r2
 800a042:	d50e      	bpl.n	800a062 <_svfiprintf_r+0x32>
 800a044:	690b      	ldr	r3, [r1, #16]
 800a046:	b963      	cbnz	r3, 800a062 <_svfiprintf_r+0x32>
 800a048:	2140      	movs	r1, #64	; 0x40
 800a04a:	f7ff ff3b 	bl	8009ec4 <_malloc_r>
 800a04e:	6028      	str	r0, [r5, #0]
 800a050:	6128      	str	r0, [r5, #16]
 800a052:	b920      	cbnz	r0, 800a05e <_svfiprintf_r+0x2e>
 800a054:	230c      	movs	r3, #12
 800a056:	603b      	str	r3, [r7, #0]
 800a058:	f04f 30ff 	mov.w	r0, #4294967295
 800a05c:	e0d1      	b.n	800a202 <_svfiprintf_r+0x1d2>
 800a05e:	2340      	movs	r3, #64	; 0x40
 800a060:	616b      	str	r3, [r5, #20]
 800a062:	2300      	movs	r3, #0
 800a064:	9309      	str	r3, [sp, #36]	; 0x24
 800a066:	2320      	movs	r3, #32
 800a068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a06c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a070:	2330      	movs	r3, #48	; 0x30
 800a072:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a21c <_svfiprintf_r+0x1ec>
 800a076:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a07a:	f04f 0901 	mov.w	r9, #1
 800a07e:	4623      	mov	r3, r4
 800a080:	469a      	mov	sl, r3
 800a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a086:	b10a      	cbz	r2, 800a08c <_svfiprintf_r+0x5c>
 800a088:	2a25      	cmp	r2, #37	; 0x25
 800a08a:	d1f9      	bne.n	800a080 <_svfiprintf_r+0x50>
 800a08c:	ebba 0b04 	subs.w	fp, sl, r4
 800a090:	d00b      	beq.n	800a0aa <_svfiprintf_r+0x7a>
 800a092:	465b      	mov	r3, fp
 800a094:	4622      	mov	r2, r4
 800a096:	4629      	mov	r1, r5
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff ff6d 	bl	8009f78 <__ssputs_r>
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f000 80aa 	beq.w	800a1f8 <_svfiprintf_r+0x1c8>
 800a0a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a6:	445a      	add	r2, fp
 800a0a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 80a2 	beq.w	800a1f8 <_svfiprintf_r+0x1c8>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0be:	f10a 0a01 	add.w	sl, sl, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	9307      	str	r3, [sp, #28]
 800a0c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a0cc:	4654      	mov	r4, sl
 800a0ce:	2205      	movs	r2, #5
 800a0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d4:	4851      	ldr	r0, [pc, #324]	; (800a21c <_svfiprintf_r+0x1ec>)
 800a0d6:	f7f6 f8a3 	bl	8000220 <memchr>
 800a0da:	9a04      	ldr	r2, [sp, #16]
 800a0dc:	b9d8      	cbnz	r0, 800a116 <_svfiprintf_r+0xe6>
 800a0de:	06d0      	lsls	r0, r2, #27
 800a0e0:	bf44      	itt	mi
 800a0e2:	2320      	movmi	r3, #32
 800a0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e8:	0711      	lsls	r1, r2, #28
 800a0ea:	bf44      	itt	mi
 800a0ec:	232b      	movmi	r3, #43	; 0x2b
 800a0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f8:	d015      	beq.n	800a126 <_svfiprintf_r+0xf6>
 800a0fa:	9a07      	ldr	r2, [sp, #28]
 800a0fc:	4654      	mov	r4, sl
 800a0fe:	2000      	movs	r0, #0
 800a100:	f04f 0c0a 	mov.w	ip, #10
 800a104:	4621      	mov	r1, r4
 800a106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10a:	3b30      	subs	r3, #48	; 0x30
 800a10c:	2b09      	cmp	r3, #9
 800a10e:	d94e      	bls.n	800a1ae <_svfiprintf_r+0x17e>
 800a110:	b1b0      	cbz	r0, 800a140 <_svfiprintf_r+0x110>
 800a112:	9207      	str	r2, [sp, #28]
 800a114:	e014      	b.n	800a140 <_svfiprintf_r+0x110>
 800a116:	eba0 0308 	sub.w	r3, r0, r8
 800a11a:	fa09 f303 	lsl.w	r3, r9, r3
 800a11e:	4313      	orrs	r3, r2
 800a120:	9304      	str	r3, [sp, #16]
 800a122:	46a2      	mov	sl, r4
 800a124:	e7d2      	b.n	800a0cc <_svfiprintf_r+0x9c>
 800a126:	9b03      	ldr	r3, [sp, #12]
 800a128:	1d19      	adds	r1, r3, #4
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	9103      	str	r1, [sp, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bfbb      	ittet	lt
 800a132:	425b      	neglt	r3, r3
 800a134:	f042 0202 	orrlt.w	r2, r2, #2
 800a138:	9307      	strge	r3, [sp, #28]
 800a13a:	9307      	strlt	r3, [sp, #28]
 800a13c:	bfb8      	it	lt
 800a13e:	9204      	strlt	r2, [sp, #16]
 800a140:	7823      	ldrb	r3, [r4, #0]
 800a142:	2b2e      	cmp	r3, #46	; 0x2e
 800a144:	d10c      	bne.n	800a160 <_svfiprintf_r+0x130>
 800a146:	7863      	ldrb	r3, [r4, #1]
 800a148:	2b2a      	cmp	r3, #42	; 0x2a
 800a14a:	d135      	bne.n	800a1b8 <_svfiprintf_r+0x188>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	1d1a      	adds	r2, r3, #4
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	9203      	str	r2, [sp, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	bfb8      	it	lt
 800a158:	f04f 33ff 	movlt.w	r3, #4294967295
 800a15c:	3402      	adds	r4, #2
 800a15e:	9305      	str	r3, [sp, #20]
 800a160:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a22c <_svfiprintf_r+0x1fc>
 800a164:	7821      	ldrb	r1, [r4, #0]
 800a166:	2203      	movs	r2, #3
 800a168:	4650      	mov	r0, sl
 800a16a:	f7f6 f859 	bl	8000220 <memchr>
 800a16e:	b140      	cbz	r0, 800a182 <_svfiprintf_r+0x152>
 800a170:	2340      	movs	r3, #64	; 0x40
 800a172:	eba0 000a 	sub.w	r0, r0, sl
 800a176:	fa03 f000 	lsl.w	r0, r3, r0
 800a17a:	9b04      	ldr	r3, [sp, #16]
 800a17c:	4303      	orrs	r3, r0
 800a17e:	3401      	adds	r4, #1
 800a180:	9304      	str	r3, [sp, #16]
 800a182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a186:	4826      	ldr	r0, [pc, #152]	; (800a220 <_svfiprintf_r+0x1f0>)
 800a188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a18c:	2206      	movs	r2, #6
 800a18e:	f7f6 f847 	bl	8000220 <memchr>
 800a192:	2800      	cmp	r0, #0
 800a194:	d038      	beq.n	800a208 <_svfiprintf_r+0x1d8>
 800a196:	4b23      	ldr	r3, [pc, #140]	; (800a224 <_svfiprintf_r+0x1f4>)
 800a198:	bb1b      	cbnz	r3, 800a1e2 <_svfiprintf_r+0x1b2>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	3307      	adds	r3, #7
 800a19e:	f023 0307 	bic.w	r3, r3, #7
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	9303      	str	r3, [sp, #12]
 800a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a8:	4433      	add	r3, r6
 800a1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ac:	e767      	b.n	800a07e <_svfiprintf_r+0x4e>
 800a1ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	e7a5      	b.n	800a104 <_svfiprintf_r+0xd4>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	3401      	adds	r4, #1
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f04f 0c0a 	mov.w	ip, #10
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ca:	3a30      	subs	r2, #48	; 0x30
 800a1cc:	2a09      	cmp	r2, #9
 800a1ce:	d903      	bls.n	800a1d8 <_svfiprintf_r+0x1a8>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0c5      	beq.n	800a160 <_svfiprintf_r+0x130>
 800a1d4:	9105      	str	r1, [sp, #20]
 800a1d6:	e7c3      	b.n	800a160 <_svfiprintf_r+0x130>
 800a1d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1dc:	4604      	mov	r4, r0
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e7f0      	b.n	800a1c4 <_svfiprintf_r+0x194>
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <_svfiprintf_r+0x1f8>)
 800a1ea:	a904      	add	r1, sp, #16
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f7fc fa8d 	bl	800670c <_printf_float>
 800a1f2:	1c42      	adds	r2, r0, #1
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	d1d6      	bne.n	800a1a6 <_svfiprintf_r+0x176>
 800a1f8:	89ab      	ldrh	r3, [r5, #12]
 800a1fa:	065b      	lsls	r3, r3, #25
 800a1fc:	f53f af2c 	bmi.w	800a058 <_svfiprintf_r+0x28>
 800a200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a202:	b01d      	add	sp, #116	; 0x74
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	ab03      	add	r3, sp, #12
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	462a      	mov	r2, r5
 800a20e:	4b06      	ldr	r3, [pc, #24]	; (800a228 <_svfiprintf_r+0x1f8>)
 800a210:	a904      	add	r1, sp, #16
 800a212:	4638      	mov	r0, r7
 800a214:	f7fc fd1e 	bl	8006c54 <_printf_i>
 800a218:	e7eb      	b.n	800a1f2 <_svfiprintf_r+0x1c2>
 800a21a:	bf00      	nop
 800a21c:	0800b28c 	.word	0x0800b28c
 800a220:	0800b296 	.word	0x0800b296
 800a224:	0800670d 	.word	0x0800670d
 800a228:	08009f79 	.word	0x08009f79
 800a22c:	0800b292 	.word	0x0800b292

0800a230 <_sbrk_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d06      	ldr	r5, [pc, #24]	; (800a24c <_sbrk_r+0x1c>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	f7f8 f896 	bl	800236c <_sbrk>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d102      	bne.n	800a24a <_sbrk_r+0x1a>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	b103      	cbz	r3, 800a24a <_sbrk_r+0x1a>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	20000584 	.word	0x20000584

0800a250 <strncmp>:
 800a250:	b510      	push	{r4, lr}
 800a252:	b16a      	cbz	r2, 800a270 <strncmp+0x20>
 800a254:	3901      	subs	r1, #1
 800a256:	1884      	adds	r4, r0, r2
 800a258:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a25c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a260:	4293      	cmp	r3, r2
 800a262:	d103      	bne.n	800a26c <strncmp+0x1c>
 800a264:	42a0      	cmp	r0, r4
 800a266:	d001      	beq.n	800a26c <strncmp+0x1c>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1f5      	bne.n	800a258 <strncmp+0x8>
 800a26c:	1a98      	subs	r0, r3, r2
 800a26e:	bd10      	pop	{r4, pc}
 800a270:	4610      	mov	r0, r2
 800a272:	e7fc      	b.n	800a26e <strncmp+0x1e>

0800a274 <__ascii_wctomb>:
 800a274:	b149      	cbz	r1, 800a28a <__ascii_wctomb+0x16>
 800a276:	2aff      	cmp	r2, #255	; 0xff
 800a278:	bf85      	ittet	hi
 800a27a:	238a      	movhi	r3, #138	; 0x8a
 800a27c:	6003      	strhi	r3, [r0, #0]
 800a27e:	700a      	strbls	r2, [r1, #0]
 800a280:	f04f 30ff 	movhi.w	r0, #4294967295
 800a284:	bf98      	it	ls
 800a286:	2001      	movls	r0, #1
 800a288:	4770      	bx	lr
 800a28a:	4608      	mov	r0, r1
 800a28c:	4770      	bx	lr
	...

0800a290 <__assert_func>:
 800a290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a292:	4614      	mov	r4, r2
 800a294:	461a      	mov	r2, r3
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <__assert_func+0x2c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4605      	mov	r5, r0
 800a29c:	68d8      	ldr	r0, [r3, #12]
 800a29e:	b14c      	cbz	r4, 800a2b4 <__assert_func+0x24>
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <__assert_func+0x30>)
 800a2a2:	9100      	str	r1, [sp, #0]
 800a2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a8:	4906      	ldr	r1, [pc, #24]	; (800a2c4 <__assert_func+0x34>)
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	f000 f80e 	bl	800a2cc <fiprintf>
 800a2b0:	f000 fa84 	bl	800a7bc <abort>
 800a2b4:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <__assert_func+0x38>)
 800a2b6:	461c      	mov	r4, r3
 800a2b8:	e7f3      	b.n	800a2a2 <__assert_func+0x12>
 800a2ba:	bf00      	nop
 800a2bc:	2000000c 	.word	0x2000000c
 800a2c0:	0800b29d 	.word	0x0800b29d
 800a2c4:	0800b2aa 	.word	0x0800b2aa
 800a2c8:	0800b2d8 	.word	0x0800b2d8

0800a2cc <fiprintf>:
 800a2cc:	b40e      	push	{r1, r2, r3}
 800a2ce:	b503      	push	{r0, r1, lr}
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	ab03      	add	r3, sp, #12
 800a2d4:	4805      	ldr	r0, [pc, #20]	; (800a2ec <fiprintf+0x20>)
 800a2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	f000 f87d 	bl	800a3dc <_vfiprintf_r>
 800a2e2:	b002      	add	sp, #8
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	2000000c 	.word	0x2000000c

0800a2f0 <memmove>:
 800a2f0:	4288      	cmp	r0, r1
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	eb01 0402 	add.w	r4, r1, r2
 800a2f8:	d902      	bls.n	800a300 <memmove+0x10>
 800a2fa:	4284      	cmp	r4, r0
 800a2fc:	4623      	mov	r3, r4
 800a2fe:	d807      	bhi.n	800a310 <memmove+0x20>
 800a300:	1e43      	subs	r3, r0, #1
 800a302:	42a1      	cmp	r1, r4
 800a304:	d008      	beq.n	800a318 <memmove+0x28>
 800a306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a30a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a30e:	e7f8      	b.n	800a302 <memmove+0x12>
 800a310:	4402      	add	r2, r0
 800a312:	4601      	mov	r1, r0
 800a314:	428a      	cmp	r2, r1
 800a316:	d100      	bne.n	800a31a <memmove+0x2a>
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a31e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a322:	e7f7      	b.n	800a314 <memmove+0x24>

0800a324 <__malloc_lock>:
 800a324:	4801      	ldr	r0, [pc, #4]	; (800a32c <__malloc_lock+0x8>)
 800a326:	f000 bc09 	b.w	800ab3c <__retarget_lock_acquire_recursive>
 800a32a:	bf00      	nop
 800a32c:	2000058c 	.word	0x2000058c

0800a330 <__malloc_unlock>:
 800a330:	4801      	ldr	r0, [pc, #4]	; (800a338 <__malloc_unlock+0x8>)
 800a332:	f000 bc04 	b.w	800ab3e <__retarget_lock_release_recursive>
 800a336:	bf00      	nop
 800a338:	2000058c 	.word	0x2000058c

0800a33c <_realloc_r>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	4607      	mov	r7, r0
 800a340:	4614      	mov	r4, r2
 800a342:	460e      	mov	r6, r1
 800a344:	b921      	cbnz	r1, 800a350 <_realloc_r+0x14>
 800a346:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a34a:	4611      	mov	r1, r2
 800a34c:	f7ff bdba 	b.w	8009ec4 <_malloc_r>
 800a350:	b922      	cbnz	r2, 800a35c <_realloc_r+0x20>
 800a352:	f7ff fd67 	bl	8009e24 <_free_r>
 800a356:	4625      	mov	r5, r4
 800a358:	4628      	mov	r0, r5
 800a35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35c:	f000 fc54 	bl	800ac08 <_malloc_usable_size_r>
 800a360:	42a0      	cmp	r0, r4
 800a362:	d20f      	bcs.n	800a384 <_realloc_r+0x48>
 800a364:	4621      	mov	r1, r4
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff fdac 	bl	8009ec4 <_malloc_r>
 800a36c:	4605      	mov	r5, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	d0f2      	beq.n	800a358 <_realloc_r+0x1c>
 800a372:	4631      	mov	r1, r6
 800a374:	4622      	mov	r2, r4
 800a376:	f7ff f87d 	bl	8009474 <memcpy>
 800a37a:	4631      	mov	r1, r6
 800a37c:	4638      	mov	r0, r7
 800a37e:	f7ff fd51 	bl	8009e24 <_free_r>
 800a382:	e7e9      	b.n	800a358 <_realloc_r+0x1c>
 800a384:	4635      	mov	r5, r6
 800a386:	e7e7      	b.n	800a358 <_realloc_r+0x1c>

0800a388 <__sfputc_r>:
 800a388:	6893      	ldr	r3, [r2, #8]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	b410      	push	{r4}
 800a390:	6093      	str	r3, [r2, #8]
 800a392:	da08      	bge.n	800a3a6 <__sfputc_r+0x1e>
 800a394:	6994      	ldr	r4, [r2, #24]
 800a396:	42a3      	cmp	r3, r4
 800a398:	db01      	blt.n	800a39e <__sfputc_r+0x16>
 800a39a:	290a      	cmp	r1, #10
 800a39c:	d103      	bne.n	800a3a6 <__sfputc_r+0x1e>
 800a39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a2:	f000 b94b 	b.w	800a63c <__swbuf_r>
 800a3a6:	6813      	ldr	r3, [r2, #0]
 800a3a8:	1c58      	adds	r0, r3, #1
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	7019      	strb	r1, [r3, #0]
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <__sfputs_r>:
 800a3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	18d5      	adds	r5, r2, r3
 800a3c0:	42ac      	cmp	r4, r5
 800a3c2:	d101      	bne.n	800a3c8 <__sfputs_r+0x12>
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e007      	b.n	800a3d8 <__sfputs_r+0x22>
 800a3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ffda 	bl	800a388 <__sfputc_r>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d1f3      	bne.n	800a3c0 <__sfputs_r+0xa>
 800a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3dc <_vfiprintf_r>:
 800a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	b09d      	sub	sp, #116	; 0x74
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	4698      	mov	r8, r3
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	b118      	cbz	r0, 800a3f4 <_vfiprintf_r+0x18>
 800a3ec:	6983      	ldr	r3, [r0, #24]
 800a3ee:	b90b      	cbnz	r3, 800a3f4 <_vfiprintf_r+0x18>
 800a3f0:	f000 fb06 	bl	800aa00 <__sinit>
 800a3f4:	4b89      	ldr	r3, [pc, #548]	; (800a61c <_vfiprintf_r+0x240>)
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	d11b      	bne.n	800a432 <_vfiprintf_r+0x56>
 800a3fa:	6875      	ldr	r5, [r6, #4]
 800a3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fe:	07d9      	lsls	r1, r3, #31
 800a400:	d405      	bmi.n	800a40e <_vfiprintf_r+0x32>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	059a      	lsls	r2, r3, #22
 800a406:	d402      	bmi.n	800a40e <_vfiprintf_r+0x32>
 800a408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40a:	f000 fb97 	bl	800ab3c <__retarget_lock_acquire_recursive>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	071b      	lsls	r3, r3, #28
 800a412:	d501      	bpl.n	800a418 <_vfiprintf_r+0x3c>
 800a414:	692b      	ldr	r3, [r5, #16]
 800a416:	b9eb      	cbnz	r3, 800a454 <_vfiprintf_r+0x78>
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f000 f960 	bl	800a6e0 <__swsetup_r>
 800a420:	b1c0      	cbz	r0, 800a454 <_vfiprintf_r+0x78>
 800a422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a424:	07dc      	lsls	r4, r3, #31
 800a426:	d50e      	bpl.n	800a446 <_vfiprintf_r+0x6a>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295
 800a42c:	b01d      	add	sp, #116	; 0x74
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	4b7b      	ldr	r3, [pc, #492]	; (800a620 <_vfiprintf_r+0x244>)
 800a434:	429d      	cmp	r5, r3
 800a436:	d101      	bne.n	800a43c <_vfiprintf_r+0x60>
 800a438:	68b5      	ldr	r5, [r6, #8]
 800a43a:	e7df      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a43c:	4b79      	ldr	r3, [pc, #484]	; (800a624 <_vfiprintf_r+0x248>)
 800a43e:	429d      	cmp	r5, r3
 800a440:	bf08      	it	eq
 800a442:	68f5      	ldreq	r5, [r6, #12]
 800a444:	e7da      	b.n	800a3fc <_vfiprintf_r+0x20>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	0598      	lsls	r0, r3, #22
 800a44a:	d4ed      	bmi.n	800a428 <_vfiprintf_r+0x4c>
 800a44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44e:	f000 fb76 	bl	800ab3e <__retarget_lock_release_recursive>
 800a452:	e7e9      	b.n	800a428 <_vfiprintf_r+0x4c>
 800a454:	2300      	movs	r3, #0
 800a456:	9309      	str	r3, [sp, #36]	; 0x24
 800a458:	2320      	movs	r3, #32
 800a45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a462:	2330      	movs	r3, #48	; 0x30
 800a464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a628 <_vfiprintf_r+0x24c>
 800a468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a46c:	f04f 0901 	mov.w	r9, #1
 800a470:	4623      	mov	r3, r4
 800a472:	469a      	mov	sl, r3
 800a474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a478:	b10a      	cbz	r2, 800a47e <_vfiprintf_r+0xa2>
 800a47a:	2a25      	cmp	r2, #37	; 0x25
 800a47c:	d1f9      	bne.n	800a472 <_vfiprintf_r+0x96>
 800a47e:	ebba 0b04 	subs.w	fp, sl, r4
 800a482:	d00b      	beq.n	800a49c <_vfiprintf_r+0xc0>
 800a484:	465b      	mov	r3, fp
 800a486:	4622      	mov	r2, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ff93 	bl	800a3b6 <__sfputs_r>
 800a490:	3001      	adds	r0, #1
 800a492:	f000 80aa 	beq.w	800a5ea <_vfiprintf_r+0x20e>
 800a496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a498:	445a      	add	r2, fp
 800a49a:	9209      	str	r2, [sp, #36]	; 0x24
 800a49c:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 80a2 	beq.w	800a5ea <_vfiprintf_r+0x20e>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b0:	f10a 0a01 	add.w	sl, sl, #1
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4be:	4654      	mov	r4, sl
 800a4c0:	2205      	movs	r2, #5
 800a4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c6:	4858      	ldr	r0, [pc, #352]	; (800a628 <_vfiprintf_r+0x24c>)
 800a4c8:	f7f5 feaa 	bl	8000220 <memchr>
 800a4cc:	9a04      	ldr	r2, [sp, #16]
 800a4ce:	b9d8      	cbnz	r0, 800a508 <_vfiprintf_r+0x12c>
 800a4d0:	06d1      	lsls	r1, r2, #27
 800a4d2:	bf44      	itt	mi
 800a4d4:	2320      	movmi	r3, #32
 800a4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4da:	0713      	lsls	r3, r2, #28
 800a4dc:	bf44      	itt	mi
 800a4de:	232b      	movmi	r3, #43	; 0x2b
 800a4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ea:	d015      	beq.n	800a518 <_vfiprintf_r+0x13c>
 800a4ec:	9a07      	ldr	r2, [sp, #28]
 800a4ee:	4654      	mov	r4, sl
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f04f 0c0a 	mov.w	ip, #10
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4fc:	3b30      	subs	r3, #48	; 0x30
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d94e      	bls.n	800a5a0 <_vfiprintf_r+0x1c4>
 800a502:	b1b0      	cbz	r0, 800a532 <_vfiprintf_r+0x156>
 800a504:	9207      	str	r2, [sp, #28]
 800a506:	e014      	b.n	800a532 <_vfiprintf_r+0x156>
 800a508:	eba0 0308 	sub.w	r3, r0, r8
 800a50c:	fa09 f303 	lsl.w	r3, r9, r3
 800a510:	4313      	orrs	r3, r2
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	46a2      	mov	sl, r4
 800a516:	e7d2      	b.n	800a4be <_vfiprintf_r+0xe2>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	1d19      	adds	r1, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	9103      	str	r1, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfbb      	ittet	lt
 800a524:	425b      	neglt	r3, r3
 800a526:	f042 0202 	orrlt.w	r2, r2, #2
 800a52a:	9307      	strge	r3, [sp, #28]
 800a52c:	9307      	strlt	r3, [sp, #28]
 800a52e:	bfb8      	it	lt
 800a530:	9204      	strlt	r2, [sp, #16]
 800a532:	7823      	ldrb	r3, [r4, #0]
 800a534:	2b2e      	cmp	r3, #46	; 0x2e
 800a536:	d10c      	bne.n	800a552 <_vfiprintf_r+0x176>
 800a538:	7863      	ldrb	r3, [r4, #1]
 800a53a:	2b2a      	cmp	r3, #42	; 0x2a
 800a53c:	d135      	bne.n	800a5aa <_vfiprintf_r+0x1ce>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	1d1a      	adds	r2, r3, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	9203      	str	r2, [sp, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a54e:	3402      	adds	r4, #2
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a638 <_vfiprintf_r+0x25c>
 800a556:	7821      	ldrb	r1, [r4, #0]
 800a558:	2203      	movs	r2, #3
 800a55a:	4650      	mov	r0, sl
 800a55c:	f7f5 fe60 	bl	8000220 <memchr>
 800a560:	b140      	cbz	r0, 800a574 <_vfiprintf_r+0x198>
 800a562:	2340      	movs	r3, #64	; 0x40
 800a564:	eba0 000a 	sub.w	r0, r0, sl
 800a568:	fa03 f000 	lsl.w	r0, r3, r0
 800a56c:	9b04      	ldr	r3, [sp, #16]
 800a56e:	4303      	orrs	r3, r0
 800a570:	3401      	adds	r4, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a578:	482c      	ldr	r0, [pc, #176]	; (800a62c <_vfiprintf_r+0x250>)
 800a57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57e:	2206      	movs	r2, #6
 800a580:	f7f5 fe4e 	bl	8000220 <memchr>
 800a584:	2800      	cmp	r0, #0
 800a586:	d03f      	beq.n	800a608 <_vfiprintf_r+0x22c>
 800a588:	4b29      	ldr	r3, [pc, #164]	; (800a630 <_vfiprintf_r+0x254>)
 800a58a:	bb1b      	cbnz	r3, 800a5d4 <_vfiprintf_r+0x1f8>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	3307      	adds	r3, #7
 800a590:	f023 0307 	bic.w	r3, r3, #7
 800a594:	3308      	adds	r3, #8
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59a:	443b      	add	r3, r7
 800a59c:	9309      	str	r3, [sp, #36]	; 0x24
 800a59e:	e767      	b.n	800a470 <_vfiprintf_r+0x94>
 800a5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	e7a5      	b.n	800a4f6 <_vfiprintf_r+0x11a>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	3401      	adds	r4, #1
 800a5ae:	9305      	str	r3, [sp, #20]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f04f 0c0a 	mov.w	ip, #10
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5bc:	3a30      	subs	r2, #48	; 0x30
 800a5be:	2a09      	cmp	r2, #9
 800a5c0:	d903      	bls.n	800a5ca <_vfiprintf_r+0x1ee>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0c5      	beq.n	800a552 <_vfiprintf_r+0x176>
 800a5c6:	9105      	str	r1, [sp, #20]
 800a5c8:	e7c3      	b.n	800a552 <_vfiprintf_r+0x176>
 800a5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e7f0      	b.n	800a5b6 <_vfiprintf_r+0x1da>
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <_vfiprintf_r+0x258>)
 800a5dc:	a904      	add	r1, sp, #16
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7fc f894 	bl	800670c <_printf_float>
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	1c78      	adds	r0, r7, #1
 800a5e8:	d1d6      	bne.n	800a598 <_vfiprintf_r+0x1bc>
 800a5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ec:	07d9      	lsls	r1, r3, #31
 800a5ee:	d405      	bmi.n	800a5fc <_vfiprintf_r+0x220>
 800a5f0:	89ab      	ldrh	r3, [r5, #12]
 800a5f2:	059a      	lsls	r2, r3, #22
 800a5f4:	d402      	bmi.n	800a5fc <_vfiprintf_r+0x220>
 800a5f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f8:	f000 faa1 	bl	800ab3e <__retarget_lock_release_recursive>
 800a5fc:	89ab      	ldrh	r3, [r5, #12]
 800a5fe:	065b      	lsls	r3, r3, #25
 800a600:	f53f af12 	bmi.w	800a428 <_vfiprintf_r+0x4c>
 800a604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a606:	e711      	b.n	800a42c <_vfiprintf_r+0x50>
 800a608:	ab03      	add	r3, sp, #12
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	462a      	mov	r2, r5
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <_vfiprintf_r+0x258>)
 800a610:	a904      	add	r1, sp, #16
 800a612:	4630      	mov	r0, r6
 800a614:	f7fc fb1e 	bl	8006c54 <_printf_i>
 800a618:	e7e4      	b.n	800a5e4 <_vfiprintf_r+0x208>
 800a61a:	bf00      	nop
 800a61c:	0800b2fc 	.word	0x0800b2fc
 800a620:	0800b31c 	.word	0x0800b31c
 800a624:	0800b2dc 	.word	0x0800b2dc
 800a628:	0800b28c 	.word	0x0800b28c
 800a62c:	0800b296 	.word	0x0800b296
 800a630:	0800670d 	.word	0x0800670d
 800a634:	0800a3b7 	.word	0x0800a3b7
 800a638:	0800b292 	.word	0x0800b292

0800a63c <__swbuf_r>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	460e      	mov	r6, r1
 800a640:	4614      	mov	r4, r2
 800a642:	4605      	mov	r5, r0
 800a644:	b118      	cbz	r0, 800a64e <__swbuf_r+0x12>
 800a646:	6983      	ldr	r3, [r0, #24]
 800a648:	b90b      	cbnz	r3, 800a64e <__swbuf_r+0x12>
 800a64a:	f000 f9d9 	bl	800aa00 <__sinit>
 800a64e:	4b21      	ldr	r3, [pc, #132]	; (800a6d4 <__swbuf_r+0x98>)
 800a650:	429c      	cmp	r4, r3
 800a652:	d12b      	bne.n	800a6ac <__swbuf_r+0x70>
 800a654:	686c      	ldr	r4, [r5, #4]
 800a656:	69a3      	ldr	r3, [r4, #24]
 800a658:	60a3      	str	r3, [r4, #8]
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	071a      	lsls	r2, r3, #28
 800a65e:	d52f      	bpl.n	800a6c0 <__swbuf_r+0x84>
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	b36b      	cbz	r3, 800a6c0 <__swbuf_r+0x84>
 800a664:	6923      	ldr	r3, [r4, #16]
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	1ac0      	subs	r0, r0, r3
 800a66a:	6963      	ldr	r3, [r4, #20]
 800a66c:	b2f6      	uxtb	r6, r6
 800a66e:	4283      	cmp	r3, r0
 800a670:	4637      	mov	r7, r6
 800a672:	dc04      	bgt.n	800a67e <__swbuf_r+0x42>
 800a674:	4621      	mov	r1, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 f92e 	bl	800a8d8 <_fflush_r>
 800a67c:	bb30      	cbnz	r0, 800a6cc <__swbuf_r+0x90>
 800a67e:	68a3      	ldr	r3, [r4, #8]
 800a680:	3b01      	subs	r3, #1
 800a682:	60a3      	str	r3, [r4, #8]
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	6022      	str	r2, [r4, #0]
 800a68a:	701e      	strb	r6, [r3, #0]
 800a68c:	6963      	ldr	r3, [r4, #20]
 800a68e:	3001      	adds	r0, #1
 800a690:	4283      	cmp	r3, r0
 800a692:	d004      	beq.n	800a69e <__swbuf_r+0x62>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	07db      	lsls	r3, r3, #31
 800a698:	d506      	bpl.n	800a6a8 <__swbuf_r+0x6c>
 800a69a:	2e0a      	cmp	r6, #10
 800a69c:	d104      	bne.n	800a6a8 <__swbuf_r+0x6c>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f000 f919 	bl	800a8d8 <_fflush_r>
 800a6a6:	b988      	cbnz	r0, 800a6cc <__swbuf_r+0x90>
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <__swbuf_r+0x9c>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	d101      	bne.n	800a6b6 <__swbuf_r+0x7a>
 800a6b2:	68ac      	ldr	r4, [r5, #8]
 800a6b4:	e7cf      	b.n	800a656 <__swbuf_r+0x1a>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <__swbuf_r+0xa0>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	bf08      	it	eq
 800a6bc:	68ec      	ldreq	r4, [r5, #12]
 800a6be:	e7ca      	b.n	800a656 <__swbuf_r+0x1a>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f80c 	bl	800a6e0 <__swsetup_r>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d0cb      	beq.n	800a664 <__swbuf_r+0x28>
 800a6cc:	f04f 37ff 	mov.w	r7, #4294967295
 800a6d0:	e7ea      	b.n	800a6a8 <__swbuf_r+0x6c>
 800a6d2:	bf00      	nop
 800a6d4:	0800b2fc 	.word	0x0800b2fc
 800a6d8:	0800b31c 	.word	0x0800b31c
 800a6dc:	0800b2dc 	.word	0x0800b2dc

0800a6e0 <__swsetup_r>:
 800a6e0:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <__swsetup_r+0xcc>)
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	681d      	ldr	r5, [r3, #0]
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	b125      	cbz	r5, 800a6f6 <__swsetup_r+0x16>
 800a6ec:	69ab      	ldr	r3, [r5, #24]
 800a6ee:	b913      	cbnz	r3, 800a6f6 <__swsetup_r+0x16>
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f000 f985 	bl	800aa00 <__sinit>
 800a6f6:	4b2e      	ldr	r3, [pc, #184]	; (800a7b0 <__swsetup_r+0xd0>)
 800a6f8:	429c      	cmp	r4, r3
 800a6fa:	d10f      	bne.n	800a71c <__swsetup_r+0x3c>
 800a6fc:	686c      	ldr	r4, [r5, #4]
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a704:	0719      	lsls	r1, r3, #28
 800a706:	d42c      	bmi.n	800a762 <__swsetup_r+0x82>
 800a708:	06dd      	lsls	r5, r3, #27
 800a70a:	d411      	bmi.n	800a730 <__swsetup_r+0x50>
 800a70c:	2309      	movs	r3, #9
 800a70e:	6033      	str	r3, [r6, #0]
 800a710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	f04f 30ff 	mov.w	r0, #4294967295
 800a71a:	e03e      	b.n	800a79a <__swsetup_r+0xba>
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <__swsetup_r+0xd4>)
 800a71e:	429c      	cmp	r4, r3
 800a720:	d101      	bne.n	800a726 <__swsetup_r+0x46>
 800a722:	68ac      	ldr	r4, [r5, #8]
 800a724:	e7eb      	b.n	800a6fe <__swsetup_r+0x1e>
 800a726:	4b24      	ldr	r3, [pc, #144]	; (800a7b8 <__swsetup_r+0xd8>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	bf08      	it	eq
 800a72c:	68ec      	ldreq	r4, [r5, #12]
 800a72e:	e7e6      	b.n	800a6fe <__swsetup_r+0x1e>
 800a730:	0758      	lsls	r0, r3, #29
 800a732:	d512      	bpl.n	800a75a <__swsetup_r+0x7a>
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	b141      	cbz	r1, 800a74a <__swsetup_r+0x6a>
 800a738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a73c:	4299      	cmp	r1, r3
 800a73e:	d002      	beq.n	800a746 <__swsetup_r+0x66>
 800a740:	4630      	mov	r0, r6
 800a742:	f7ff fb6f 	bl	8009e24 <_free_r>
 800a746:	2300      	movs	r3, #0
 800a748:	6363      	str	r3, [r4, #52]	; 0x34
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	2300      	movs	r3, #0
 800a754:	6063      	str	r3, [r4, #4]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f043 0308 	orr.w	r3, r3, #8
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	b94b      	cbnz	r3, 800a77a <__swsetup_r+0x9a>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a770:	d003      	beq.n	800a77a <__swsetup_r+0x9a>
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	f000 fa07 	bl	800ab88 <__smakebuf_r>
 800a77a:	89a0      	ldrh	r0, [r4, #12]
 800a77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a780:	f010 0301 	ands.w	r3, r0, #1
 800a784:	d00a      	beq.n	800a79c <__swsetup_r+0xbc>
 800a786:	2300      	movs	r3, #0
 800a788:	60a3      	str	r3, [r4, #8]
 800a78a:	6963      	ldr	r3, [r4, #20]
 800a78c:	425b      	negs	r3, r3
 800a78e:	61a3      	str	r3, [r4, #24]
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	b943      	cbnz	r3, 800a7a6 <__swsetup_r+0xc6>
 800a794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a798:	d1ba      	bne.n	800a710 <__swsetup_r+0x30>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0781      	lsls	r1, r0, #30
 800a79e:	bf58      	it	pl
 800a7a0:	6963      	ldrpl	r3, [r4, #20]
 800a7a2:	60a3      	str	r3, [r4, #8]
 800a7a4:	e7f4      	b.n	800a790 <__swsetup_r+0xb0>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e7f7      	b.n	800a79a <__swsetup_r+0xba>
 800a7aa:	bf00      	nop
 800a7ac:	2000000c 	.word	0x2000000c
 800a7b0:	0800b2fc 	.word	0x0800b2fc
 800a7b4:	0800b31c 	.word	0x0800b31c
 800a7b8:	0800b2dc 	.word	0x0800b2dc

0800a7bc <abort>:
 800a7bc:	b508      	push	{r3, lr}
 800a7be:	2006      	movs	r0, #6
 800a7c0:	f000 fa52 	bl	800ac68 <raise>
 800a7c4:	2001      	movs	r0, #1
 800a7c6:	f7f7 fd59 	bl	800227c <_exit>
	...

0800a7cc <__sflush_r>:
 800a7cc:	898a      	ldrh	r2, [r1, #12]
 800a7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	0710      	lsls	r0, r2, #28
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	d458      	bmi.n	800a88c <__sflush_r+0xc0>
 800a7da:	684b      	ldr	r3, [r1, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dc05      	bgt.n	800a7ec <__sflush_r+0x20>
 800a7e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	dc02      	bgt.n	800a7ec <__sflush_r+0x20>
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	d0f9      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7f8:	682f      	ldr	r7, [r5, #0]
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	d032      	beq.n	800a864 <__sflush_r+0x98>
 800a7fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	075a      	lsls	r2, r3, #29
 800a804:	d505      	bpl.n	800a812 <__sflush_r+0x46>
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	1ac0      	subs	r0, r0, r3
 800a80a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a80c:	b10b      	cbz	r3, 800a812 <__sflush_r+0x46>
 800a80e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a810:	1ac0      	subs	r0, r0, r3
 800a812:	2300      	movs	r3, #0
 800a814:	4602      	mov	r2, r0
 800a816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a818:	6a21      	ldr	r1, [r4, #32]
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b0      	blx	r6
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	d106      	bne.n	800a832 <__sflush_r+0x66>
 800a824:	6829      	ldr	r1, [r5, #0]
 800a826:	291d      	cmp	r1, #29
 800a828:	d82c      	bhi.n	800a884 <__sflush_r+0xb8>
 800a82a:	4a2a      	ldr	r2, [pc, #168]	; (800a8d4 <__sflush_r+0x108>)
 800a82c:	40ca      	lsrs	r2, r1
 800a82e:	07d6      	lsls	r6, r2, #31
 800a830:	d528      	bpl.n	800a884 <__sflush_r+0xb8>
 800a832:	2200      	movs	r2, #0
 800a834:	6062      	str	r2, [r4, #4]
 800a836:	04d9      	lsls	r1, r3, #19
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	6022      	str	r2, [r4, #0]
 800a83c:	d504      	bpl.n	800a848 <__sflush_r+0x7c>
 800a83e:	1c42      	adds	r2, r0, #1
 800a840:	d101      	bne.n	800a846 <__sflush_r+0x7a>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	b903      	cbnz	r3, 800a848 <__sflush_r+0x7c>
 800a846:	6560      	str	r0, [r4, #84]	; 0x54
 800a848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a84a:	602f      	str	r7, [r5, #0]
 800a84c:	2900      	cmp	r1, #0
 800a84e:	d0ca      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a854:	4299      	cmp	r1, r3
 800a856:	d002      	beq.n	800a85e <__sflush_r+0x92>
 800a858:	4628      	mov	r0, r5
 800a85a:	f7ff fae3 	bl	8009e24 <_free_r>
 800a85e:	2000      	movs	r0, #0
 800a860:	6360      	str	r0, [r4, #52]	; 0x34
 800a862:	e7c1      	b.n	800a7e8 <__sflush_r+0x1c>
 800a864:	6a21      	ldr	r1, [r4, #32]
 800a866:	2301      	movs	r3, #1
 800a868:	4628      	mov	r0, r5
 800a86a:	47b0      	blx	r6
 800a86c:	1c41      	adds	r1, r0, #1
 800a86e:	d1c7      	bne.n	800a800 <__sflush_r+0x34>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0c4      	beq.n	800a800 <__sflush_r+0x34>
 800a876:	2b1d      	cmp	r3, #29
 800a878:	d001      	beq.n	800a87e <__sflush_r+0xb2>
 800a87a:	2b16      	cmp	r3, #22
 800a87c:	d101      	bne.n	800a882 <__sflush_r+0xb6>
 800a87e:	602f      	str	r7, [r5, #0]
 800a880:	e7b1      	b.n	800a7e6 <__sflush_r+0x1a>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	e7ad      	b.n	800a7e8 <__sflush_r+0x1c>
 800a88c:	690f      	ldr	r7, [r1, #16]
 800a88e:	2f00      	cmp	r7, #0
 800a890:	d0a9      	beq.n	800a7e6 <__sflush_r+0x1a>
 800a892:	0793      	lsls	r3, r2, #30
 800a894:	680e      	ldr	r6, [r1, #0]
 800a896:	bf08      	it	eq
 800a898:	694b      	ldreq	r3, [r1, #20]
 800a89a:	600f      	str	r7, [r1, #0]
 800a89c:	bf18      	it	ne
 800a89e:	2300      	movne	r3, #0
 800a8a0:	eba6 0807 	sub.w	r8, r6, r7
 800a8a4:	608b      	str	r3, [r1, #8]
 800a8a6:	f1b8 0f00 	cmp.w	r8, #0
 800a8aa:	dd9c      	ble.n	800a7e6 <__sflush_r+0x1a>
 800a8ac:	6a21      	ldr	r1, [r4, #32]
 800a8ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8b0:	4643      	mov	r3, r8
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b0      	blx	r6
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	dc06      	bgt.n	800a8ca <__sflush_r+0xfe>
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c2:	81a3      	strh	r3, [r4, #12]
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c8:	e78e      	b.n	800a7e8 <__sflush_r+0x1c>
 800a8ca:	4407      	add	r7, r0
 800a8cc:	eba8 0800 	sub.w	r8, r8, r0
 800a8d0:	e7e9      	b.n	800a8a6 <__sflush_r+0xda>
 800a8d2:	bf00      	nop
 800a8d4:	20400001 	.word	0x20400001

0800a8d8 <_fflush_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	690b      	ldr	r3, [r1, #16]
 800a8dc:	4605      	mov	r5, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	b913      	cbnz	r3, 800a8e8 <_fflush_r+0x10>
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	b118      	cbz	r0, 800a8f2 <_fflush_r+0x1a>
 800a8ea:	6983      	ldr	r3, [r0, #24]
 800a8ec:	b90b      	cbnz	r3, 800a8f2 <_fflush_r+0x1a>
 800a8ee:	f000 f887 	bl	800aa00 <__sinit>
 800a8f2:	4b14      	ldr	r3, [pc, #80]	; (800a944 <_fflush_r+0x6c>)
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	d11b      	bne.n	800a930 <_fflush_r+0x58>
 800a8f8:	686c      	ldr	r4, [r5, #4]
 800a8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0ef      	beq.n	800a8e2 <_fflush_r+0xa>
 800a902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a904:	07d0      	lsls	r0, r2, #31
 800a906:	d404      	bmi.n	800a912 <_fflush_r+0x3a>
 800a908:	0599      	lsls	r1, r3, #22
 800a90a:	d402      	bmi.n	800a912 <_fflush_r+0x3a>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f000 f915 	bl	800ab3c <__retarget_lock_acquire_recursive>
 800a912:	4628      	mov	r0, r5
 800a914:	4621      	mov	r1, r4
 800a916:	f7ff ff59 	bl	800a7cc <__sflush_r>
 800a91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a91c:	07da      	lsls	r2, r3, #31
 800a91e:	4605      	mov	r5, r0
 800a920:	d4e0      	bmi.n	800a8e4 <_fflush_r+0xc>
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	059b      	lsls	r3, r3, #22
 800a926:	d4dd      	bmi.n	800a8e4 <_fflush_r+0xc>
 800a928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a92a:	f000 f908 	bl	800ab3e <__retarget_lock_release_recursive>
 800a92e:	e7d9      	b.n	800a8e4 <_fflush_r+0xc>
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <_fflush_r+0x70>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <_fflush_r+0x62>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7df      	b.n	800a8fa <_fflush_r+0x22>
 800a93a:	4b04      	ldr	r3, [pc, #16]	; (800a94c <_fflush_r+0x74>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7da      	b.n	800a8fa <_fflush_r+0x22>
 800a944:	0800b2fc 	.word	0x0800b2fc
 800a948:	0800b31c 	.word	0x0800b31c
 800a94c:	0800b2dc 	.word	0x0800b2dc

0800a950 <std>:
 800a950:	2300      	movs	r3, #0
 800a952:	b510      	push	{r4, lr}
 800a954:	4604      	mov	r4, r0
 800a956:	e9c0 3300 	strd	r3, r3, [r0]
 800a95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a95e:	6083      	str	r3, [r0, #8]
 800a960:	8181      	strh	r1, [r0, #12]
 800a962:	6643      	str	r3, [r0, #100]	; 0x64
 800a964:	81c2      	strh	r2, [r0, #14]
 800a966:	6183      	str	r3, [r0, #24]
 800a968:	4619      	mov	r1, r3
 800a96a:	2208      	movs	r2, #8
 800a96c:	305c      	adds	r0, #92	; 0x5c
 800a96e:	f7fb fe25 	bl	80065bc <memset>
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <std+0x38>)
 800a974:	6263      	str	r3, [r4, #36]	; 0x24
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <std+0x3c>)
 800a978:	62a3      	str	r3, [r4, #40]	; 0x28
 800a97a:	4b05      	ldr	r3, [pc, #20]	; (800a990 <std+0x40>)
 800a97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <std+0x44>)
 800a980:	6224      	str	r4, [r4, #32]
 800a982:	6323      	str	r3, [r4, #48]	; 0x30
 800a984:	bd10      	pop	{r4, pc}
 800a986:	bf00      	nop
 800a988:	0800aca1 	.word	0x0800aca1
 800a98c:	0800acc3 	.word	0x0800acc3
 800a990:	0800acfb 	.word	0x0800acfb
 800a994:	0800ad1f 	.word	0x0800ad1f

0800a998 <_cleanup_r>:
 800a998:	4901      	ldr	r1, [pc, #4]	; (800a9a0 <_cleanup_r+0x8>)
 800a99a:	f000 b8af 	b.w	800aafc <_fwalk_reent>
 800a99e:	bf00      	nop
 800a9a0:	0800a8d9 	.word	0x0800a8d9

0800a9a4 <__sfmoreglue>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	1e4a      	subs	r2, r1, #1
 800a9a8:	2568      	movs	r5, #104	; 0x68
 800a9aa:	4355      	muls	r5, r2
 800a9ac:	460e      	mov	r6, r1
 800a9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9b2:	f7ff fa87 	bl	8009ec4 <_malloc_r>
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	b140      	cbz	r0, 800a9cc <__sfmoreglue+0x28>
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a9c0:	300c      	adds	r0, #12
 800a9c2:	60a0      	str	r0, [r4, #8]
 800a9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9c8:	f7fb fdf8 	bl	80065bc <memset>
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}

0800a9d0 <__sfp_lock_acquire>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	; (800a9d8 <__sfp_lock_acquire+0x8>)
 800a9d2:	f000 b8b3 	b.w	800ab3c <__retarget_lock_acquire_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	20000590 	.word	0x20000590

0800a9dc <__sfp_lock_release>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__sfp_lock_release+0x8>)
 800a9de:	f000 b8ae 	b.w	800ab3e <__retarget_lock_release_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20000590 	.word	0x20000590

0800a9e8 <__sinit_lock_acquire>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__sinit_lock_acquire+0x8>)
 800a9ea:	f000 b8a7 	b.w	800ab3c <__retarget_lock_acquire_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	2000058b 	.word	0x2000058b

0800a9f4 <__sinit_lock_release>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__sinit_lock_release+0x8>)
 800a9f6:	f000 b8a2 	b.w	800ab3e <__retarget_lock_release_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	2000058b 	.word	0x2000058b

0800aa00 <__sinit>:
 800aa00:	b510      	push	{r4, lr}
 800aa02:	4604      	mov	r4, r0
 800aa04:	f7ff fff0 	bl	800a9e8 <__sinit_lock_acquire>
 800aa08:	69a3      	ldr	r3, [r4, #24]
 800aa0a:	b11b      	cbz	r3, 800aa14 <__sinit+0x14>
 800aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa10:	f7ff bff0 	b.w	800a9f4 <__sinit_lock_release>
 800aa14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa18:	6523      	str	r3, [r4, #80]	; 0x50
 800aa1a:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <__sinit+0x68>)
 800aa1c:	4a13      	ldr	r2, [pc, #76]	; (800aa6c <__sinit+0x6c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa22:	42a3      	cmp	r3, r4
 800aa24:	bf04      	itt	eq
 800aa26:	2301      	moveq	r3, #1
 800aa28:	61a3      	streq	r3, [r4, #24]
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 f820 	bl	800aa70 <__sfp>
 800aa30:	6060      	str	r0, [r4, #4]
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 f81c 	bl	800aa70 <__sfp>
 800aa38:	60a0      	str	r0, [r4, #8]
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 f818 	bl	800aa70 <__sfp>
 800aa40:	2200      	movs	r2, #0
 800aa42:	60e0      	str	r0, [r4, #12]
 800aa44:	2104      	movs	r1, #4
 800aa46:	6860      	ldr	r0, [r4, #4]
 800aa48:	f7ff ff82 	bl	800a950 <std>
 800aa4c:	68a0      	ldr	r0, [r4, #8]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	2109      	movs	r1, #9
 800aa52:	f7ff ff7d 	bl	800a950 <std>
 800aa56:	68e0      	ldr	r0, [r4, #12]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	2112      	movs	r1, #18
 800aa5c:	f7ff ff78 	bl	800a950 <std>
 800aa60:	2301      	movs	r3, #1
 800aa62:	61a3      	str	r3, [r4, #24]
 800aa64:	e7d2      	b.n	800aa0c <__sinit+0xc>
 800aa66:	bf00      	nop
 800aa68:	0800ae88 	.word	0x0800ae88
 800aa6c:	0800a999 	.word	0x0800a999

0800aa70 <__sfp>:
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	4607      	mov	r7, r0
 800aa74:	f7ff ffac 	bl	800a9d0 <__sfp_lock_acquire>
 800aa78:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <__sfp+0x84>)
 800aa7a:	681e      	ldr	r6, [r3, #0]
 800aa7c:	69b3      	ldr	r3, [r6, #24]
 800aa7e:	b913      	cbnz	r3, 800aa86 <__sfp+0x16>
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff ffbd 	bl	800aa00 <__sinit>
 800aa86:	3648      	adds	r6, #72	; 0x48
 800aa88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	d503      	bpl.n	800aa98 <__sfp+0x28>
 800aa90:	6833      	ldr	r3, [r6, #0]
 800aa92:	b30b      	cbz	r3, 800aad8 <__sfp+0x68>
 800aa94:	6836      	ldr	r6, [r6, #0]
 800aa96:	e7f7      	b.n	800aa88 <__sfp+0x18>
 800aa98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa9c:	b9d5      	cbnz	r5, 800aad4 <__sfp+0x64>
 800aa9e:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <__sfp+0x88>)
 800aaa0:	60e3      	str	r3, [r4, #12]
 800aaa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaa6:	6665      	str	r5, [r4, #100]	; 0x64
 800aaa8:	f000 f847 	bl	800ab3a <__retarget_lock_init_recursive>
 800aaac:	f7ff ff96 	bl	800a9dc <__sfp_lock_release>
 800aab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aab8:	6025      	str	r5, [r4, #0]
 800aaba:	61a5      	str	r5, [r4, #24]
 800aabc:	2208      	movs	r2, #8
 800aabe:	4629      	mov	r1, r5
 800aac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aac4:	f7fb fd7a 	bl	80065bc <memset>
 800aac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aacc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aad0:	4620      	mov	r0, r4
 800aad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad4:	3468      	adds	r4, #104	; 0x68
 800aad6:	e7d9      	b.n	800aa8c <__sfp+0x1c>
 800aad8:	2104      	movs	r1, #4
 800aada:	4638      	mov	r0, r7
 800aadc:	f7ff ff62 	bl	800a9a4 <__sfmoreglue>
 800aae0:	4604      	mov	r4, r0
 800aae2:	6030      	str	r0, [r6, #0]
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d1d5      	bne.n	800aa94 <__sfp+0x24>
 800aae8:	f7ff ff78 	bl	800a9dc <__sfp_lock_release>
 800aaec:	230c      	movs	r3, #12
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	e7ee      	b.n	800aad0 <__sfp+0x60>
 800aaf2:	bf00      	nop
 800aaf4:	0800ae88 	.word	0x0800ae88
 800aaf8:	ffff0001 	.word	0xffff0001

0800aafc <_fwalk_reent>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4606      	mov	r6, r0
 800ab02:	4688      	mov	r8, r1
 800ab04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab08:	2700      	movs	r7, #0
 800ab0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab0e:	f1b9 0901 	subs.w	r9, r9, #1
 800ab12:	d505      	bpl.n	800ab20 <_fwalk_reent+0x24>
 800ab14:	6824      	ldr	r4, [r4, #0]
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d1f7      	bne.n	800ab0a <_fwalk_reent+0xe>
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab20:	89ab      	ldrh	r3, [r5, #12]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d907      	bls.n	800ab36 <_fwalk_reent+0x3a>
 800ab26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	d003      	beq.n	800ab36 <_fwalk_reent+0x3a>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4630      	mov	r0, r6
 800ab32:	47c0      	blx	r8
 800ab34:	4307      	orrs	r7, r0
 800ab36:	3568      	adds	r5, #104	; 0x68
 800ab38:	e7e9      	b.n	800ab0e <_fwalk_reent+0x12>

0800ab3a <__retarget_lock_init_recursive>:
 800ab3a:	4770      	bx	lr

0800ab3c <__retarget_lock_acquire_recursive>:
 800ab3c:	4770      	bx	lr

0800ab3e <__retarget_lock_release_recursive>:
 800ab3e:	4770      	bx	lr

0800ab40 <__swhatbuf_r>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	460e      	mov	r6, r1
 800ab44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	b096      	sub	sp, #88	; 0x58
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	461d      	mov	r5, r3
 800ab50:	da07      	bge.n	800ab62 <__swhatbuf_r+0x22>
 800ab52:	2300      	movs	r3, #0
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	89b3      	ldrh	r3, [r6, #12]
 800ab58:	061a      	lsls	r2, r3, #24
 800ab5a:	d410      	bmi.n	800ab7e <__swhatbuf_r+0x3e>
 800ab5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab60:	e00e      	b.n	800ab80 <__swhatbuf_r+0x40>
 800ab62:	466a      	mov	r2, sp
 800ab64:	f000 f902 	bl	800ad6c <_fstat_r>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	dbf2      	blt.n	800ab52 <__swhatbuf_r+0x12>
 800ab6c:	9a01      	ldr	r2, [sp, #4]
 800ab6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab76:	425a      	negs	r2, r3
 800ab78:	415a      	adcs	r2, r3
 800ab7a:	602a      	str	r2, [r5, #0]
 800ab7c:	e7ee      	b.n	800ab5c <__swhatbuf_r+0x1c>
 800ab7e:	2340      	movs	r3, #64	; 0x40
 800ab80:	2000      	movs	r0, #0
 800ab82:	6023      	str	r3, [r4, #0]
 800ab84:	b016      	add	sp, #88	; 0x58
 800ab86:	bd70      	pop	{r4, r5, r6, pc}

0800ab88 <__smakebuf_r>:
 800ab88:	898b      	ldrh	r3, [r1, #12]
 800ab8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab8c:	079d      	lsls	r5, r3, #30
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460c      	mov	r4, r1
 800ab92:	d507      	bpl.n	800aba4 <__smakebuf_r+0x1c>
 800ab94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	6123      	str	r3, [r4, #16]
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	6163      	str	r3, [r4, #20]
 800aba0:	b002      	add	sp, #8
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	ab01      	add	r3, sp, #4
 800aba6:	466a      	mov	r2, sp
 800aba8:	f7ff ffca 	bl	800ab40 <__swhatbuf_r>
 800abac:	9900      	ldr	r1, [sp, #0]
 800abae:	4605      	mov	r5, r0
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff f987 	bl	8009ec4 <_malloc_r>
 800abb6:	b948      	cbnz	r0, 800abcc <__smakebuf_r+0x44>
 800abb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abbc:	059a      	lsls	r2, r3, #22
 800abbe:	d4ef      	bmi.n	800aba0 <__smakebuf_r+0x18>
 800abc0:	f023 0303 	bic.w	r3, r3, #3
 800abc4:	f043 0302 	orr.w	r3, r3, #2
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	e7e3      	b.n	800ab94 <__smakebuf_r+0xc>
 800abcc:	4b0d      	ldr	r3, [pc, #52]	; (800ac04 <__smakebuf_r+0x7c>)
 800abce:	62b3      	str	r3, [r6, #40]	; 0x28
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	6020      	str	r0, [r4, #0]
 800abd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	9b00      	ldr	r3, [sp, #0]
 800abdc:	6163      	str	r3, [r4, #20]
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	6120      	str	r0, [r4, #16]
 800abe2:	b15b      	cbz	r3, 800abfc <__smakebuf_r+0x74>
 800abe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe8:	4630      	mov	r0, r6
 800abea:	f000 f8d1 	bl	800ad90 <_isatty_r>
 800abee:	b128      	cbz	r0, 800abfc <__smakebuf_r+0x74>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	f023 0303 	bic.w	r3, r3, #3
 800abf6:	f043 0301 	orr.w	r3, r3, #1
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	89a0      	ldrh	r0, [r4, #12]
 800abfe:	4305      	orrs	r5, r0
 800ac00:	81a5      	strh	r5, [r4, #12]
 800ac02:	e7cd      	b.n	800aba0 <__smakebuf_r+0x18>
 800ac04:	0800a999 	.word	0x0800a999

0800ac08 <_malloc_usable_size_r>:
 800ac08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0c:	1f18      	subs	r0, r3, #4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bfbc      	itt	lt
 800ac12:	580b      	ldrlt	r3, [r1, r0]
 800ac14:	18c0      	addlt	r0, r0, r3
 800ac16:	4770      	bx	lr

0800ac18 <_raise_r>:
 800ac18:	291f      	cmp	r1, #31
 800ac1a:	b538      	push	{r3, r4, r5, lr}
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	460d      	mov	r5, r1
 800ac20:	d904      	bls.n	800ac2c <_raise_r+0x14>
 800ac22:	2316      	movs	r3, #22
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac2e:	b112      	cbz	r2, 800ac36 <_raise_r+0x1e>
 800ac30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac34:	b94b      	cbnz	r3, 800ac4a <_raise_r+0x32>
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 f830 	bl	800ac9c <_getpid_r>
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4601      	mov	r1, r0
 800ac40:	4620      	mov	r0, r4
 800ac42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac46:	f000 b817 	b.w	800ac78 <_kill_r>
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d00a      	beq.n	800ac64 <_raise_r+0x4c>
 800ac4e:	1c59      	adds	r1, r3, #1
 800ac50:	d103      	bne.n	800ac5a <_raise_r+0x42>
 800ac52:	2316      	movs	r3, #22
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	2001      	movs	r0, #1
 800ac58:	e7e7      	b.n	800ac2a <_raise_r+0x12>
 800ac5a:	2400      	movs	r4, #0
 800ac5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac60:	4628      	mov	r0, r5
 800ac62:	4798      	blx	r3
 800ac64:	2000      	movs	r0, #0
 800ac66:	e7e0      	b.n	800ac2a <_raise_r+0x12>

0800ac68 <raise>:
 800ac68:	4b02      	ldr	r3, [pc, #8]	; (800ac74 <raise+0xc>)
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	f7ff bfd3 	b.w	800ac18 <_raise_r>
 800ac72:	bf00      	nop
 800ac74:	2000000c 	.word	0x2000000c

0800ac78 <_kill_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4d07      	ldr	r5, [pc, #28]	; (800ac98 <_kill_r+0x20>)
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	4611      	mov	r1, r2
 800ac84:	602b      	str	r3, [r5, #0]
 800ac86:	f7f7 fae9 	bl	800225c <_kill>
 800ac8a:	1c43      	adds	r3, r0, #1
 800ac8c:	d102      	bne.n	800ac94 <_kill_r+0x1c>
 800ac8e:	682b      	ldr	r3, [r5, #0]
 800ac90:	b103      	cbz	r3, 800ac94 <_kill_r+0x1c>
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	bd38      	pop	{r3, r4, r5, pc}
 800ac96:	bf00      	nop
 800ac98:	20000584 	.word	0x20000584

0800ac9c <_getpid_r>:
 800ac9c:	f7f7 bad6 	b.w	800224c <_getpid>

0800aca0 <__sread>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca8:	f000 f894 	bl	800add4 <_read_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	bfab      	itete	ge
 800acb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acb2:	89a3      	ldrhlt	r3, [r4, #12]
 800acb4:	181b      	addge	r3, r3, r0
 800acb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acba:	bfac      	ite	ge
 800acbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800acbe:	81a3      	strhlt	r3, [r4, #12]
 800acc0:	bd10      	pop	{r4, pc}

0800acc2 <__swrite>:
 800acc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc6:	461f      	mov	r7, r3
 800acc8:	898b      	ldrh	r3, [r1, #12]
 800acca:	05db      	lsls	r3, r3, #23
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	4616      	mov	r6, r2
 800acd2:	d505      	bpl.n	800ace0 <__swrite+0x1e>
 800acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd8:	2302      	movs	r3, #2
 800acda:	2200      	movs	r2, #0
 800acdc:	f000 f868 	bl	800adb0 <_lseek_r>
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	4632      	mov	r2, r6
 800acee:	463b      	mov	r3, r7
 800acf0:	4628      	mov	r0, r5
 800acf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	f000 b817 	b.w	800ad28 <_write_r>

0800acfa <__sseek>:
 800acfa:	b510      	push	{r4, lr}
 800acfc:	460c      	mov	r4, r1
 800acfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad02:	f000 f855 	bl	800adb0 <_lseek_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	bf15      	itete	ne
 800ad0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad16:	81a3      	strheq	r3, [r4, #12]
 800ad18:	bf18      	it	ne
 800ad1a:	81a3      	strhne	r3, [r4, #12]
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <__sclose>:
 800ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad22:	f000 b813 	b.w	800ad4c <_close_r>
	...

0800ad28 <_write_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d07      	ldr	r5, [pc, #28]	; (800ad48 <_write_r+0x20>)
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	4608      	mov	r0, r1
 800ad30:	4611      	mov	r1, r2
 800ad32:	2200      	movs	r2, #0
 800ad34:	602a      	str	r2, [r5, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	f7f7 fac7 	bl	80022ca <_write>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_write_r+0x1e>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_write_r+0x1e>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	20000584 	.word	0x20000584

0800ad4c <_close_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d06      	ldr	r5, [pc, #24]	; (800ad68 <_close_r+0x1c>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	f7f7 fad3 	bl	8002302 <_close>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_close_r+0x1a>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_close_r+0x1a>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20000584 	.word	0x20000584

0800ad6c <_fstat_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_fstat_r+0x20>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	f7f7 face 	bl	800231a <_fstat>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	d102      	bne.n	800ad88 <_fstat_r+0x1c>
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	b103      	cbz	r3, 800ad88 <_fstat_r+0x1c>
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000584 	.word	0x20000584

0800ad90 <_isatty_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d06      	ldr	r5, [pc, #24]	; (800adac <_isatty_r+0x1c>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	602b      	str	r3, [r5, #0]
 800ad9c:	f7f7 facd 	bl	800233a <_isatty>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d102      	bne.n	800adaa <_isatty_r+0x1a>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	b103      	cbz	r3, 800adaa <_isatty_r+0x1a>
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	20000584 	.word	0x20000584

0800adb0 <_lseek_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	; (800add0 <_lseek_r+0x20>)
 800adb4:	4604      	mov	r4, r0
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f7f7 fac6 	bl	8002350 <_lseek>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_lseek_r+0x1e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_lseek_r+0x1e>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000584 	.word	0x20000584

0800add4 <_read_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	; (800adf4 <_read_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f7 fa54 	bl	8002290 <_read>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_read_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_read_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000584 	.word	0x20000584

0800adf8 <_init>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr

0800ae04 <_fini>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	bf00      	nop
 800ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0a:	bc08      	pop	{r3}
 800ae0c:	469e      	mov	lr, r3
 800ae0e:	4770      	bx	lr
